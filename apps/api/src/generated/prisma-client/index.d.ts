
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Preference
 * 
 */
export type Preference = $Result.DefaultSelection<Prisma.$PreferencePayload>
/**
 * Model PremiumProfile
 * 
 */
export type PremiumProfile = $Result.DefaultSelection<Prisma.$PremiumProfilePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserPreferences
 * 
 */
export type UserPreferences = $Result.DefaultSelection<Prisma.$UserPreferencesPayload>
/**
 * Model UserStats
 * 
 */
export type UserStats = $Result.DefaultSelection<Prisma.$UserStatsPayload>
/**
 * Model UserReward
 * 
 */
export type UserReward = $Result.DefaultSelection<Prisma.$UserRewardPayload>
/**
 * Model UserQuest
 * 
 */
export type UserQuest = $Result.DefaultSelection<Prisma.$UserQuestPayload>
/**
 * Model UserCoin
 * 
 */
export type UserCoin = $Result.DefaultSelection<Prisma.$UserCoinPayload>
/**
 * Model UserNotification
 * 
 */
export type UserNotification = $Result.DefaultSelection<Prisma.$UserNotificationPayload>
/**
 * Model AdminUser
 * 
 */
export type AdminUser = $Result.DefaultSelection<Prisma.$AdminUserPayload>
/**
 * Model AdminPermission
 * 
 */
export type AdminPermission = $Result.DefaultSelection<Prisma.$AdminPermissionPayload>
/**
 * Model AdminAction
 * 
 */
export type AdminAction = $Result.DefaultSelection<Prisma.$AdminActionPayload>
/**
 * Model AdminNote
 * 
 */
export type AdminNote = $Result.DefaultSelection<Prisma.$AdminNotePayload>
/**
 * Model Feature
 * 
 */
export type Feature = $Result.DefaultSelection<Prisma.$FeaturePayload>
/**
 * Model FeatureAccess
 * 
 */
export type FeatureAccess = $Result.DefaultSelection<Prisma.$FeatureAccessPayload>
/**
 * Model Game
 * 
 */
export type Game = $Result.DefaultSelection<Prisma.$GamePayload>
/**
 * Model GameCategory
 * 
 */
export type GameCategory = $Result.DefaultSelection<Prisma.$GameCategoryPayload>
/**
 * Model GameScreenshot
 * 
 */
export type GameScreenshot = $Result.DefaultSelection<Prisma.$GameScreenshotPayload>
/**
 * Model GameTag
 * 
 */
export type GameTag = $Result.DefaultSelection<Prisma.$GameTagPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserStatus: {
  Standard: 'Standard',
  Premium: 'Premium',
  OnChainUnlinked: 'OnChainUnlinked'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const PrivacyLevel: {
  Public: 'Public',
  Private: 'Private',
  FriendsOnly: 'FriendsOnly'
};

export type PrivacyLevel = (typeof PrivacyLevel)[keyof typeof PrivacyLevel]


export const RewardType: {
  Referral: 'Referral',
  Quest: 'Quest',
  Activity: 'Activity',
  Bonus: 'Bonus',
  Welcome: 'Welcome'
};

export type RewardType = (typeof RewardType)[keyof typeof RewardType]


export const RewardStatus: {
  Pending: 'Pending',
  Claimed: 'Claimed',
  Failed: 'Failed',
  Expired: 'Expired'
};

export type RewardStatus = (typeof RewardStatus)[keyof typeof RewardStatus]


export const RewardSourceType: {
  Registration: 'Registration',
  Referral: 'Referral',
  Quest: 'Quest',
  Activity: 'Activity',
  Admin: 'Admin'
};

export type RewardSourceType = (typeof RewardSourceType)[keyof typeof RewardSourceType]


export const QuestType: {
  Welcome: 'Welcome',
  Referral: 'Referral',
  Activity: 'Activity',
  Social: 'Social',
  Premium: 'Premium'
};

export type QuestType = (typeof QuestType)[keyof typeof QuestType]


export const QuestStatus: {
  Active: 'Active',
  Completed: 'Completed',
  Expired: 'Expired',
  Failed: 'Failed'
};

export type QuestStatus = (typeof QuestStatus)[keyof typeof QuestStatus]


export const CoinType: {
  Experience: 'Experience',
  Achievement: 'Achievement',
  Social: 'Social',
  Premium: 'Premium'
};

export type CoinType = (typeof CoinType)[keyof typeof CoinType]


export const CoinSourceType: {
  Registration: 'Registration',
  Referral: 'Referral',
  Quest: 'Quest',
  Activity: 'Activity',
  Social: 'Social'
};

export type CoinSourceType = (typeof CoinSourceType)[keyof typeof CoinSourceType]


export const NotificationType: {
  Welcome: 'Welcome',
  Premium: 'Premium',
  Quest: 'Quest',
  Reward: 'Reward',
  Referral: 'Referral',
  System: 'System',
  Marketing: 'Marketing'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const NotificationPriority: {
  Low: 'Low',
  Normal: 'Normal',
  High: 'High',
  Urgent: 'Urgent'
};

export type NotificationPriority = (typeof NotificationPriority)[keyof typeof NotificationPriority]


export const GameStatus: {
  Draft: 'Draft',
  Published: 'Published'
};

export type GameStatus = (typeof GameStatus)[keyof typeof GameStatus]


export const GameOrientation: {
  Landscape: 'Landscape',
  Portrait: 'Portrait',
  Both: 'Both'
};

export type GameOrientation = (typeof GameOrientation)[keyof typeof GameOrientation]


export const AdminRole: {
  SuperAdmin: 'SuperAdmin',
  SupportAgent: 'SupportAgent',
  Auditor: 'Auditor',
  Moderator: 'Moderator'
};

export type AdminRole = (typeof AdminRole)[keyof typeof AdminRole]


export const AdminActionType: {
  ForceUnlinkProfile: 'ForceUnlinkProfile',
  ForceLinkProfile: 'ForceLinkProfile',
  GrantPremium: 'GrantPremium',
  RevokePremium: 'RevokePremium',
  UpdateFeatureAccess: 'UpdateFeatureAccess',
  AddAdminNote: 'AddAdminNote',
  UpdateUserStatus: 'UpdateUserStatus',
  BlockUser: 'BlockUser',
  UnblockUser: 'UnblockUser'
};

export type AdminActionType = (typeof AdminActionType)[keyof typeof AdminActionType]


export const AdminActionStatus: {
  Pending: 'Pending',
  Completed: 'Completed',
  Failed: 'Failed',
  Cancelled: 'Cancelled'
};

export type AdminActionStatus = (typeof AdminActionStatus)[keyof typeof AdminActionStatus]

}

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

export type PrivacyLevel = $Enums.PrivacyLevel

export const PrivacyLevel: typeof $Enums.PrivacyLevel

export type RewardType = $Enums.RewardType

export const RewardType: typeof $Enums.RewardType

export type RewardStatus = $Enums.RewardStatus

export const RewardStatus: typeof $Enums.RewardStatus

export type RewardSourceType = $Enums.RewardSourceType

export const RewardSourceType: typeof $Enums.RewardSourceType

export type QuestType = $Enums.QuestType

export const QuestType: typeof $Enums.QuestType

export type QuestStatus = $Enums.QuestStatus

export const QuestStatus: typeof $Enums.QuestStatus

export type CoinType = $Enums.CoinType

export const CoinType: typeof $Enums.CoinType

export type CoinSourceType = $Enums.CoinSourceType

export const CoinSourceType: typeof $Enums.CoinSourceType

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type NotificationPriority = $Enums.NotificationPriority

export const NotificationPriority: typeof $Enums.NotificationPriority

export type GameStatus = $Enums.GameStatus

export const GameStatus: typeof $Enums.GameStatus

export type GameOrientation = $Enums.GameOrientation

export const GameOrientation: typeof $Enums.GameOrientation

export type AdminRole = $Enums.AdminRole

export const AdminRole: typeof $Enums.AdminRole

export type AdminActionType = $Enums.AdminActionType

export const AdminActionType: typeof $Enums.AdminActionType

export type AdminActionStatus = $Enums.AdminActionStatus

export const AdminActionStatus: typeof $Enums.AdminActionStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Preferences
 * const preferences = await prisma.preference.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Preferences
   * const preferences = await prisma.preference.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.preference`: Exposes CRUD operations for the **Preference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Preferences
    * const preferences = await prisma.preference.findMany()
    * ```
    */
  get preference(): Prisma.PreferenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.premiumProfile`: Exposes CRUD operations for the **PremiumProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PremiumProfiles
    * const premiumProfiles = await prisma.premiumProfile.findMany()
    * ```
    */
  get premiumProfile(): Prisma.PremiumProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userPreferences`: Exposes CRUD operations for the **UserPreferences** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPreferences
    * const userPreferences = await prisma.userPreferences.findMany()
    * ```
    */
  get userPreferences(): Prisma.UserPreferencesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userStats`: Exposes CRUD operations for the **UserStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserStats
    * const userStats = await prisma.userStats.findMany()
    * ```
    */
  get userStats(): Prisma.UserStatsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userReward`: Exposes CRUD operations for the **UserReward** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRewards
    * const userRewards = await prisma.userReward.findMany()
    * ```
    */
  get userReward(): Prisma.UserRewardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userQuest`: Exposes CRUD operations for the **UserQuest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserQuests
    * const userQuests = await prisma.userQuest.findMany()
    * ```
    */
  get userQuest(): Prisma.UserQuestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userCoin`: Exposes CRUD operations for the **UserCoin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserCoins
    * const userCoins = await prisma.userCoin.findMany()
    * ```
    */
  get userCoin(): Prisma.UserCoinDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userNotification`: Exposes CRUD operations for the **UserNotification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserNotifications
    * const userNotifications = await prisma.userNotification.findMany()
    * ```
    */
  get userNotification(): Prisma.UserNotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminUser`: Exposes CRUD operations for the **AdminUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminUsers
    * const adminUsers = await prisma.adminUser.findMany()
    * ```
    */
  get adminUser(): Prisma.AdminUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminPermission`: Exposes CRUD operations for the **AdminPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminPermissions
    * const adminPermissions = await prisma.adminPermission.findMany()
    * ```
    */
  get adminPermission(): Prisma.AdminPermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminAction`: Exposes CRUD operations for the **AdminAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminActions
    * const adminActions = await prisma.adminAction.findMany()
    * ```
    */
  get adminAction(): Prisma.AdminActionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminNote`: Exposes CRUD operations for the **AdminNote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminNotes
    * const adminNotes = await prisma.adminNote.findMany()
    * ```
    */
  get adminNote(): Prisma.AdminNoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feature`: Exposes CRUD operations for the **Feature** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Features
    * const features = await prisma.feature.findMany()
    * ```
    */
  get feature(): Prisma.FeatureDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.featureAccess`: Exposes CRUD operations for the **FeatureAccess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeatureAccesses
    * const featureAccesses = await prisma.featureAccess.findMany()
    * ```
    */
  get featureAccess(): Prisma.FeatureAccessDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameCategory`: Exposes CRUD operations for the **GameCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameCategories
    * const gameCategories = await prisma.gameCategory.findMany()
    * ```
    */
  get gameCategory(): Prisma.GameCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameScreenshot`: Exposes CRUD operations for the **GameScreenshot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameScreenshots
    * const gameScreenshots = await prisma.gameScreenshot.findMany()
    * ```
    */
  get gameScreenshot(): Prisma.GameScreenshotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameTag`: Exposes CRUD operations for the **GameTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameTags
    * const gameTags = await prisma.gameTag.findMany()
    * ```
    */
  get gameTag(): Prisma.GameTagDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Preference: 'Preference',
    PremiumProfile: 'PremiumProfile',
    User: 'User',
    UserPreferences: 'UserPreferences',
    UserStats: 'UserStats',
    UserReward: 'UserReward',
    UserQuest: 'UserQuest',
    UserCoin: 'UserCoin',
    UserNotification: 'UserNotification',
    AdminUser: 'AdminUser',
    AdminPermission: 'AdminPermission',
    AdminAction: 'AdminAction',
    AdminNote: 'AdminNote',
    Feature: 'Feature',
    FeatureAccess: 'FeatureAccess',
    Game: 'Game',
    GameCategory: 'GameCategory',
    GameScreenshot: 'GameScreenshot',
    GameTag: 'GameTag'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "preference" | "premiumProfile" | "user" | "userPreferences" | "userStats" | "userReward" | "userQuest" | "userCoin" | "userNotification" | "adminUser" | "adminPermission" | "adminAction" | "adminNote" | "feature" | "featureAccess" | "game" | "gameCategory" | "gameScreenshot" | "gameTag"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Preference: {
        payload: Prisma.$PreferencePayload<ExtArgs>
        fields: Prisma.PreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          findFirst: {
            args: Prisma.PreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          findMany: {
            args: Prisma.PreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>[]
          }
          create: {
            args: Prisma.PreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          createMany: {
            args: Prisma.PreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PreferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>[]
          }
          delete: {
            args: Prisma.PreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          update: {
            args: Prisma.PreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          deleteMany: {
            args: Prisma.PreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PreferenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>[]
          }
          upsert: {
            args: Prisma.PreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          aggregate: {
            args: Prisma.PreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePreference>
          }
          groupBy: {
            args: Prisma.PreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<PreferenceCountAggregateOutputType> | number
          }
        }
      }
      PremiumProfile: {
        payload: Prisma.$PremiumProfilePayload<ExtArgs>
        fields: Prisma.PremiumProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PremiumProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PremiumProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumProfilePayload>
          }
          findFirst: {
            args: Prisma.PremiumProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PremiumProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumProfilePayload>
          }
          findMany: {
            args: Prisma.PremiumProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumProfilePayload>[]
          }
          create: {
            args: Prisma.PremiumProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumProfilePayload>
          }
          createMany: {
            args: Prisma.PremiumProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PremiumProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumProfilePayload>[]
          }
          delete: {
            args: Prisma.PremiumProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumProfilePayload>
          }
          update: {
            args: Prisma.PremiumProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumProfilePayload>
          }
          deleteMany: {
            args: Prisma.PremiumProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PremiumProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PremiumProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumProfilePayload>[]
          }
          upsert: {
            args: Prisma.PremiumProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumProfilePayload>
          }
          aggregate: {
            args: Prisma.PremiumProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePremiumProfile>
          }
          groupBy: {
            args: Prisma.PremiumProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<PremiumProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.PremiumProfileCountArgs<ExtArgs>
            result: $Utils.Optional<PremiumProfileCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserPreferences: {
        payload: Prisma.$UserPreferencesPayload<ExtArgs>
        fields: Prisma.UserPreferencesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPreferencesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPreferencesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          findFirst: {
            args: Prisma.UserPreferencesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPreferencesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          findMany: {
            args: Prisma.UserPreferencesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>[]
          }
          create: {
            args: Prisma.UserPreferencesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          createMany: {
            args: Prisma.UserPreferencesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPreferencesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>[]
          }
          delete: {
            args: Prisma.UserPreferencesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          update: {
            args: Prisma.UserPreferencesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          deleteMany: {
            args: Prisma.UserPreferencesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPreferencesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserPreferencesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>[]
          }
          upsert: {
            args: Prisma.UserPreferencesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          aggregate: {
            args: Prisma.UserPreferencesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPreferences>
          }
          groupBy: {
            args: Prisma.UserPreferencesGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPreferencesGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPreferencesCountArgs<ExtArgs>
            result: $Utils.Optional<UserPreferencesCountAggregateOutputType> | number
          }
        }
      }
      UserStats: {
        payload: Prisma.$UserStatsPayload<ExtArgs>
        fields: Prisma.UserStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>
          }
          findFirst: {
            args: Prisma.UserStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>
          }
          findMany: {
            args: Prisma.UserStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>[]
          }
          create: {
            args: Prisma.UserStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>
          }
          createMany: {
            args: Prisma.UserStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>[]
          }
          delete: {
            args: Prisma.UserStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>
          }
          update: {
            args: Prisma.UserStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>
          }
          deleteMany: {
            args: Prisma.UserStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserStatsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>[]
          }
          upsert: {
            args: Prisma.UserStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatsPayload>
          }
          aggregate: {
            args: Prisma.UserStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserStats>
          }
          groupBy: {
            args: Prisma.UserStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserStatsCountArgs<ExtArgs>
            result: $Utils.Optional<UserStatsCountAggregateOutputType> | number
          }
        }
      }
      UserReward: {
        payload: Prisma.$UserRewardPayload<ExtArgs>
        fields: Prisma.UserRewardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRewardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRewardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          findFirst: {
            args: Prisma.UserRewardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRewardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          findMany: {
            args: Prisma.UserRewardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>[]
          }
          create: {
            args: Prisma.UserRewardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          createMany: {
            args: Prisma.UserRewardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRewardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>[]
          }
          delete: {
            args: Prisma.UserRewardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          update: {
            args: Prisma.UserRewardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          deleteMany: {
            args: Prisma.UserRewardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRewardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserRewardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>[]
          }
          upsert: {
            args: Prisma.UserRewardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRewardPayload>
          }
          aggregate: {
            args: Prisma.UserRewardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserReward>
          }
          groupBy: {
            args: Prisma.UserRewardGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRewardGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRewardCountArgs<ExtArgs>
            result: $Utils.Optional<UserRewardCountAggregateOutputType> | number
          }
        }
      }
      UserQuest: {
        payload: Prisma.$UserQuestPayload<ExtArgs>
        fields: Prisma.UserQuestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserQuestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserQuestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestPayload>
          }
          findFirst: {
            args: Prisma.UserQuestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserQuestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestPayload>
          }
          findMany: {
            args: Prisma.UserQuestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestPayload>[]
          }
          create: {
            args: Prisma.UserQuestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestPayload>
          }
          createMany: {
            args: Prisma.UserQuestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserQuestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestPayload>[]
          }
          delete: {
            args: Prisma.UserQuestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestPayload>
          }
          update: {
            args: Prisma.UserQuestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestPayload>
          }
          deleteMany: {
            args: Prisma.UserQuestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserQuestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserQuestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestPayload>[]
          }
          upsert: {
            args: Prisma.UserQuestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserQuestPayload>
          }
          aggregate: {
            args: Prisma.UserQuestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserQuest>
          }
          groupBy: {
            args: Prisma.UserQuestGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserQuestGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserQuestCountArgs<ExtArgs>
            result: $Utils.Optional<UserQuestCountAggregateOutputType> | number
          }
        }
      }
      UserCoin: {
        payload: Prisma.$UserCoinPayload<ExtArgs>
        fields: Prisma.UserCoinFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserCoinFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCoinPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserCoinFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCoinPayload>
          }
          findFirst: {
            args: Prisma.UserCoinFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCoinPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserCoinFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCoinPayload>
          }
          findMany: {
            args: Prisma.UserCoinFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCoinPayload>[]
          }
          create: {
            args: Prisma.UserCoinCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCoinPayload>
          }
          createMany: {
            args: Prisma.UserCoinCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCoinCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCoinPayload>[]
          }
          delete: {
            args: Prisma.UserCoinDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCoinPayload>
          }
          update: {
            args: Prisma.UserCoinUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCoinPayload>
          }
          deleteMany: {
            args: Prisma.UserCoinDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserCoinUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserCoinUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCoinPayload>[]
          }
          upsert: {
            args: Prisma.UserCoinUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCoinPayload>
          }
          aggregate: {
            args: Prisma.UserCoinAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserCoin>
          }
          groupBy: {
            args: Prisma.UserCoinGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserCoinGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCoinCountArgs<ExtArgs>
            result: $Utils.Optional<UserCoinCountAggregateOutputType> | number
          }
        }
      }
      UserNotification: {
        payload: Prisma.$UserNotificationPayload<ExtArgs>
        fields: Prisma.UserNotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserNotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserNotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>
          }
          findFirst: {
            args: Prisma.UserNotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserNotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>
          }
          findMany: {
            args: Prisma.UserNotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>[]
          }
          create: {
            args: Prisma.UserNotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>
          }
          createMany: {
            args: Prisma.UserNotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserNotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>[]
          }
          delete: {
            args: Prisma.UserNotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>
          }
          update: {
            args: Prisma.UserNotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>
          }
          deleteMany: {
            args: Prisma.UserNotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserNotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserNotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>[]
          }
          upsert: {
            args: Prisma.UserNotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNotificationPayload>
          }
          aggregate: {
            args: Prisma.UserNotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserNotification>
          }
          groupBy: {
            args: Prisma.UserNotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserNotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserNotificationCountArgs<ExtArgs>
            result: $Utils.Optional<UserNotificationCountAggregateOutputType> | number
          }
        }
      }
      AdminUser: {
        payload: Prisma.$AdminUserPayload<ExtArgs>
        fields: Prisma.AdminUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          findFirst: {
            args: Prisma.AdminUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          findMany: {
            args: Prisma.AdminUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>[]
          }
          create: {
            args: Prisma.AdminUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          createMany: {
            args: Prisma.AdminUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>[]
          }
          delete: {
            args: Prisma.AdminUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          update: {
            args: Prisma.AdminUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          deleteMany: {
            args: Prisma.AdminUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>[]
          }
          upsert: {
            args: Prisma.AdminUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminUserPayload>
          }
          aggregate: {
            args: Prisma.AdminUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminUser>
          }
          groupBy: {
            args: Prisma.AdminUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminUserCountArgs<ExtArgs>
            result: $Utils.Optional<AdminUserCountAggregateOutputType> | number
          }
        }
      }
      AdminPermission: {
        payload: Prisma.$AdminPermissionPayload<ExtArgs>
        fields: Prisma.AdminPermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminPermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminPermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPermissionPayload>
          }
          findFirst: {
            args: Prisma.AdminPermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminPermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPermissionPayload>
          }
          findMany: {
            args: Prisma.AdminPermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPermissionPayload>[]
          }
          create: {
            args: Prisma.AdminPermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPermissionPayload>
          }
          createMany: {
            args: Prisma.AdminPermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminPermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPermissionPayload>[]
          }
          delete: {
            args: Prisma.AdminPermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPermissionPayload>
          }
          update: {
            args: Prisma.AdminPermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPermissionPayload>
          }
          deleteMany: {
            args: Prisma.AdminPermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminPermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminPermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPermissionPayload>[]
          }
          upsert: {
            args: Prisma.AdminPermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPermissionPayload>
          }
          aggregate: {
            args: Prisma.AdminPermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminPermission>
          }
          groupBy: {
            args: Prisma.AdminPermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminPermissionCountArgs<ExtArgs>
            result: $Utils.Optional<AdminPermissionCountAggregateOutputType> | number
          }
        }
      }
      AdminAction: {
        payload: Prisma.$AdminActionPayload<ExtArgs>
        fields: Prisma.AdminActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          findFirst: {
            args: Prisma.AdminActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          findMany: {
            args: Prisma.AdminActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>[]
          }
          create: {
            args: Prisma.AdminActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          createMany: {
            args: Prisma.AdminActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminActionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>[]
          }
          delete: {
            args: Prisma.AdminActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          update: {
            args: Prisma.AdminActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          deleteMany: {
            args: Prisma.AdminActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminActionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>[]
          }
          upsert: {
            args: Prisma.AdminActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminActionPayload>
          }
          aggregate: {
            args: Prisma.AdminActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminAction>
          }
          groupBy: {
            args: Prisma.AdminActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminActionCountArgs<ExtArgs>
            result: $Utils.Optional<AdminActionCountAggregateOutputType> | number
          }
        }
      }
      AdminNote: {
        payload: Prisma.$AdminNotePayload<ExtArgs>
        fields: Prisma.AdminNoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminNoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminNotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminNoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminNotePayload>
          }
          findFirst: {
            args: Prisma.AdminNoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminNotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminNoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminNotePayload>
          }
          findMany: {
            args: Prisma.AdminNoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminNotePayload>[]
          }
          create: {
            args: Prisma.AdminNoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminNotePayload>
          }
          createMany: {
            args: Prisma.AdminNoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminNoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminNotePayload>[]
          }
          delete: {
            args: Prisma.AdminNoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminNotePayload>
          }
          update: {
            args: Prisma.AdminNoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminNotePayload>
          }
          deleteMany: {
            args: Prisma.AdminNoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminNoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminNoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminNotePayload>[]
          }
          upsert: {
            args: Prisma.AdminNoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminNotePayload>
          }
          aggregate: {
            args: Prisma.AdminNoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminNote>
          }
          groupBy: {
            args: Prisma.AdminNoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminNoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminNoteCountArgs<ExtArgs>
            result: $Utils.Optional<AdminNoteCountAggregateOutputType> | number
          }
        }
      }
      Feature: {
        payload: Prisma.$FeaturePayload<ExtArgs>
        fields: Prisma.FeatureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeatureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeatureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>
          }
          findFirst: {
            args: Prisma.FeatureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeatureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>
          }
          findMany: {
            args: Prisma.FeatureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>[]
          }
          create: {
            args: Prisma.FeatureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>
          }
          createMany: {
            args: Prisma.FeatureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeatureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>[]
          }
          delete: {
            args: Prisma.FeatureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>
          }
          update: {
            args: Prisma.FeatureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>
          }
          deleteMany: {
            args: Prisma.FeatureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeatureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeatureUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>[]
          }
          upsert: {
            args: Prisma.FeatureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeaturePayload>
          }
          aggregate: {
            args: Prisma.FeatureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeature>
          }
          groupBy: {
            args: Prisma.FeatureGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeatureGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeatureCountArgs<ExtArgs>
            result: $Utils.Optional<FeatureCountAggregateOutputType> | number
          }
        }
      }
      FeatureAccess: {
        payload: Prisma.$FeatureAccessPayload<ExtArgs>
        fields: Prisma.FeatureAccessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeatureAccessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureAccessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeatureAccessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureAccessPayload>
          }
          findFirst: {
            args: Prisma.FeatureAccessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureAccessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeatureAccessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureAccessPayload>
          }
          findMany: {
            args: Prisma.FeatureAccessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureAccessPayload>[]
          }
          create: {
            args: Prisma.FeatureAccessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureAccessPayload>
          }
          createMany: {
            args: Prisma.FeatureAccessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeatureAccessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureAccessPayload>[]
          }
          delete: {
            args: Prisma.FeatureAccessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureAccessPayload>
          }
          update: {
            args: Prisma.FeatureAccessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureAccessPayload>
          }
          deleteMany: {
            args: Prisma.FeatureAccessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeatureAccessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeatureAccessUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureAccessPayload>[]
          }
          upsert: {
            args: Prisma.FeatureAccessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureAccessPayload>
          }
          aggregate: {
            args: Prisma.FeatureAccessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeatureAccess>
          }
          groupBy: {
            args: Prisma.FeatureAccessGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeatureAccessGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeatureAccessCountArgs<ExtArgs>
            result: $Utils.Optional<FeatureAccessCountAggregateOutputType> | number
          }
        }
      }
      Game: {
        payload: Prisma.$GamePayload<ExtArgs>
        fields: Prisma.GameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      GameCategory: {
        payload: Prisma.$GameCategoryPayload<ExtArgs>
        fields: Prisma.GameCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCategoryPayload>
          }
          findFirst: {
            args: Prisma.GameCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCategoryPayload>
          }
          findMany: {
            args: Prisma.GameCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCategoryPayload>[]
          }
          create: {
            args: Prisma.GameCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCategoryPayload>
          }
          createMany: {
            args: Prisma.GameCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCategoryPayload>[]
          }
          delete: {
            args: Prisma.GameCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCategoryPayload>
          }
          update: {
            args: Prisma.GameCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCategoryPayload>
          }
          deleteMany: {
            args: Prisma.GameCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCategoryPayload>[]
          }
          upsert: {
            args: Prisma.GameCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameCategoryPayload>
          }
          aggregate: {
            args: Prisma.GameCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameCategory>
          }
          groupBy: {
            args: Prisma.GameCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<GameCategoryCountAggregateOutputType> | number
          }
        }
      }
      GameScreenshot: {
        payload: Prisma.$GameScreenshotPayload<ExtArgs>
        fields: Prisma.GameScreenshotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameScreenshotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameScreenshotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameScreenshotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameScreenshotPayload>
          }
          findFirst: {
            args: Prisma.GameScreenshotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameScreenshotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameScreenshotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameScreenshotPayload>
          }
          findMany: {
            args: Prisma.GameScreenshotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameScreenshotPayload>[]
          }
          create: {
            args: Prisma.GameScreenshotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameScreenshotPayload>
          }
          createMany: {
            args: Prisma.GameScreenshotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameScreenshotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameScreenshotPayload>[]
          }
          delete: {
            args: Prisma.GameScreenshotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameScreenshotPayload>
          }
          update: {
            args: Prisma.GameScreenshotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameScreenshotPayload>
          }
          deleteMany: {
            args: Prisma.GameScreenshotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameScreenshotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameScreenshotUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameScreenshotPayload>[]
          }
          upsert: {
            args: Prisma.GameScreenshotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameScreenshotPayload>
          }
          aggregate: {
            args: Prisma.GameScreenshotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameScreenshot>
          }
          groupBy: {
            args: Prisma.GameScreenshotGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameScreenshotGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameScreenshotCountArgs<ExtArgs>
            result: $Utils.Optional<GameScreenshotCountAggregateOutputType> | number
          }
        }
      }
      GameTag: {
        payload: Prisma.$GameTagPayload<ExtArgs>
        fields: Prisma.GameTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTagPayload>
          }
          findFirst: {
            args: Prisma.GameTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTagPayload>
          }
          findMany: {
            args: Prisma.GameTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTagPayload>[]
          }
          create: {
            args: Prisma.GameTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTagPayload>
          }
          createMany: {
            args: Prisma.GameTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTagPayload>[]
          }
          delete: {
            args: Prisma.GameTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTagPayload>
          }
          update: {
            args: Prisma.GameTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTagPayload>
          }
          deleteMany: {
            args: Prisma.GameTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameTagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTagPayload>[]
          }
          upsert: {
            args: Prisma.GameTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameTagPayload>
          }
          aggregate: {
            args: Prisma.GameTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameTag>
          }
          groupBy: {
            args: Prisma.GameTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameTagCountArgs<ExtArgs>
            result: $Utils.Optional<GameTagCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    preference?: PreferenceOmit
    premiumProfile?: PremiumProfileOmit
    user?: UserOmit
    userPreferences?: UserPreferencesOmit
    userStats?: UserStatsOmit
    userReward?: UserRewardOmit
    userQuest?: UserQuestOmit
    userCoin?: UserCoinOmit
    userNotification?: UserNotificationOmit
    adminUser?: AdminUserOmit
    adminPermission?: AdminPermissionOmit
    adminAction?: AdminActionOmit
    adminNote?: AdminNoteOmit
    feature?: FeatureOmit
    featureAccess?: FeatureAccessOmit
    game?: GameOmit
    gameCategory?: GameCategoryOmit
    gameScreenshot?: GameScreenshotOmit
    gameTag?: GameTagOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    adminNotes: number
    featureAccesses: number
    userCoins: number
    userNotifications: number
    userQuests: number
    userRewards: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminNotes?: boolean | UserCountOutputTypeCountAdminNotesArgs
    featureAccesses?: boolean | UserCountOutputTypeCountFeatureAccessesArgs
    userCoins?: boolean | UserCountOutputTypeCountUserCoinsArgs
    userNotifications?: boolean | UserCountOutputTypeCountUserNotificationsArgs
    userQuests?: boolean | UserCountOutputTypeCountUserQuestsArgs
    userRewards?: boolean | UserCountOutputTypeCountUserRewardsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAdminNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminNoteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeatureAccessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureAccessWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserCoinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCoinWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserNotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserQuestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserRewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRewardWhereInput
  }


  /**
   * Count Type AdminUserCountOutputType
   */

  export type AdminUserCountOutputType = {
    adminActions: number
    adminNotes: number
    permissions: number
  }

  export type AdminUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminActions?: boolean | AdminUserCountOutputTypeCountAdminActionsArgs
    adminNotes?: boolean | AdminUserCountOutputTypeCountAdminNotesArgs
    permissions?: boolean | AdminUserCountOutputTypeCountPermissionsArgs
  }

  // Custom InputTypes
  /**
   * AdminUserCountOutputType without action
   */
  export type AdminUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUserCountOutputType
     */
    select?: AdminUserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdminUserCountOutputType without action
   */
  export type AdminUserCountOutputTypeCountAdminActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminActionWhereInput
  }

  /**
   * AdminUserCountOutputType without action
   */
  export type AdminUserCountOutputTypeCountAdminNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminNoteWhereInput
  }

  /**
   * AdminUserCountOutputType without action
   */
  export type AdminUserCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminPermissionWhereInput
  }


  /**
   * Count Type FeatureCountOutputType
   */

  export type FeatureCountOutputType = {
    featureAccesses: number
  }

  export type FeatureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    featureAccesses?: boolean | FeatureCountOutputTypeCountFeatureAccessesArgs
  }

  // Custom InputTypes
  /**
   * FeatureCountOutputType without action
   */
  export type FeatureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureCountOutputType
     */
    select?: FeatureCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FeatureCountOutputType without action
   */
  export type FeatureCountOutputTypeCountFeatureAccessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureAccessWhereInput
  }


  /**
   * Count Type GameCountOutputType
   */

  export type GameCountOutputType = {
    GameScreenshot: number
    categories: number
    GameTag: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    GameScreenshot?: boolean | GameCountOutputTypeCountGameScreenshotArgs
    categories?: boolean | GameCountOutputTypeCountCategoriesArgs
    GameTag?: boolean | GameCountOutputTypeCountGameTagArgs
  }

  // Custom InputTypes
  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountGameScreenshotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameScreenshotWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameCategoryWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountGameTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameTagWhereInput
  }


  /**
   * Count Type GameCategoryCountOutputType
   */

  export type GameCategoryCountOutputType = {
    games: number
  }

  export type GameCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | GameCategoryCountOutputTypeCountGamesArgs
  }

  // Custom InputTypes
  /**
   * GameCategoryCountOutputType without action
   */
  export type GameCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCategoryCountOutputType
     */
    select?: GameCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameCategoryCountOutputType without action
   */
  export type GameCategoryCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }


  /**
   * Count Type GameTagCountOutputType
   */

  export type GameTagCountOutputType = {
    Game: number
  }

  export type GameTagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Game?: boolean | GameTagCountOutputTypeCountGameArgs
  }

  // Custom InputTypes
  /**
   * GameTagCountOutputType without action
   */
  export type GameTagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTagCountOutputType
     */
    select?: GameTagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameTagCountOutputType without action
   */
  export type GameTagCountOutputTypeCountGameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Preference
   */

  export type AggregatePreference = {
    _count: PreferenceCountAggregateOutputType | null
    _avg: PreferenceAvgAggregateOutputType | null
    _sum: PreferenceSumAggregateOutputType | null
    _min: PreferenceMinAggregateOutputType | null
    _max: PreferenceMaxAggregateOutputType | null
  }

  export type PreferenceAvgAggregateOutputType = {
    appIcon: number | null
  }

  export type PreferenceSumAggregateOutputType = {
    appIcon: number | null
  }

  export type PreferenceMinAggregateOutputType = {
    accountAddress: string | null
    appIcon: number | null
    includeLowScore: boolean | null
    createdAt: Date | null
  }

  export type PreferenceMaxAggregateOutputType = {
    accountAddress: string | null
    appIcon: number | null
    includeLowScore: boolean | null
    createdAt: Date | null
  }

  export type PreferenceCountAggregateOutputType = {
    accountAddress: number
    appIcon: number
    includeLowScore: number
    createdAt: number
    _all: number
  }


  export type PreferenceAvgAggregateInputType = {
    appIcon?: true
  }

  export type PreferenceSumAggregateInputType = {
    appIcon?: true
  }

  export type PreferenceMinAggregateInputType = {
    accountAddress?: true
    appIcon?: true
    includeLowScore?: true
    createdAt?: true
  }

  export type PreferenceMaxAggregateInputType = {
    accountAddress?: true
    appIcon?: true
    includeLowScore?: true
    createdAt?: true
  }

  export type PreferenceCountAggregateInputType = {
    accountAddress?: true
    appIcon?: true
    includeLowScore?: true
    createdAt?: true
    _all?: true
  }

  export type PreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Preference to aggregate.
     */
    where?: PreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferenceOrderByWithRelationInput | PreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Preferences
    **/
    _count?: true | PreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PreferenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PreferenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PreferenceMaxAggregateInputType
  }

  export type GetPreferenceAggregateType<T extends PreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregatePreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePreference[P]>
      : GetScalarType<T[P], AggregatePreference[P]>
  }




  export type PreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferenceWhereInput
    orderBy?: PreferenceOrderByWithAggregationInput | PreferenceOrderByWithAggregationInput[]
    by: PreferenceScalarFieldEnum[] | PreferenceScalarFieldEnum
    having?: PreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PreferenceCountAggregateInputType | true
    _avg?: PreferenceAvgAggregateInputType
    _sum?: PreferenceSumAggregateInputType
    _min?: PreferenceMinAggregateInputType
    _max?: PreferenceMaxAggregateInputType
  }

  export type PreferenceGroupByOutputType = {
    accountAddress: string
    appIcon: number | null
    includeLowScore: boolean
    createdAt: Date
    _count: PreferenceCountAggregateOutputType | null
    _avg: PreferenceAvgAggregateOutputType | null
    _sum: PreferenceSumAggregateOutputType | null
    _min: PreferenceMinAggregateOutputType | null
    _max: PreferenceMaxAggregateOutputType | null
  }

  type GetPreferenceGroupByPayload<T extends PreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], PreferenceGroupByOutputType[P]>
        }
      >
    >


  export type PreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    accountAddress?: boolean
    appIcon?: boolean
    includeLowScore?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["preference"]>

  export type PreferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    accountAddress?: boolean
    appIcon?: boolean
    includeLowScore?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["preference"]>

  export type PreferenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    accountAddress?: boolean
    appIcon?: boolean
    includeLowScore?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["preference"]>

  export type PreferenceSelectScalar = {
    accountAddress?: boolean
    appIcon?: boolean
    includeLowScore?: boolean
    createdAt?: boolean
  }

  export type PreferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"accountAddress" | "appIcon" | "includeLowScore" | "createdAt", ExtArgs["result"]["preference"]>

  export type $PreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Preference"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      accountAddress: string
      appIcon: number | null
      includeLowScore: boolean
      createdAt: Date
    }, ExtArgs["result"]["preference"]>
    composites: {}
  }

  type PreferenceGetPayload<S extends boolean | null | undefined | PreferenceDefaultArgs> = $Result.GetResult<Prisma.$PreferencePayload, S>

  type PreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PreferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PreferenceCountAggregateInputType | true
    }

  export interface PreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Preference'], meta: { name: 'Preference' } }
    /**
     * Find zero or one Preference that matches the filter.
     * @param {PreferenceFindUniqueArgs} args - Arguments to find a Preference
     * @example
     * // Get one Preference
     * const preference = await prisma.preference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PreferenceFindUniqueArgs>(args: SelectSubset<T, PreferenceFindUniqueArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Preference that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PreferenceFindUniqueOrThrowArgs} args - Arguments to find a Preference
     * @example
     * // Get one Preference
     * const preference = await prisma.preference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, PreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Preference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceFindFirstArgs} args - Arguments to find a Preference
     * @example
     * // Get one Preference
     * const preference = await prisma.preference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PreferenceFindFirstArgs>(args?: SelectSubset<T, PreferenceFindFirstArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Preference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceFindFirstOrThrowArgs} args - Arguments to find a Preference
     * @example
     * // Get one Preference
     * const preference = await prisma.preference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, PreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Preferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Preferences
     * const preferences = await prisma.preference.findMany()
     * 
     * // Get first 10 Preferences
     * const preferences = await prisma.preference.findMany({ take: 10 })
     * 
     * // Only select the `accountAddress`
     * const preferenceWithAccountAddressOnly = await prisma.preference.findMany({ select: { accountAddress: true } })
     * 
     */
    findMany<T extends PreferenceFindManyArgs>(args?: SelectSubset<T, PreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Preference.
     * @param {PreferenceCreateArgs} args - Arguments to create a Preference.
     * @example
     * // Create one Preference
     * const Preference = await prisma.preference.create({
     *   data: {
     *     // ... data to create a Preference
     *   }
     * })
     * 
     */
    create<T extends PreferenceCreateArgs>(args: SelectSubset<T, PreferenceCreateArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Preferences.
     * @param {PreferenceCreateManyArgs} args - Arguments to create many Preferences.
     * @example
     * // Create many Preferences
     * const preference = await prisma.preference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PreferenceCreateManyArgs>(args?: SelectSubset<T, PreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Preferences and returns the data saved in the database.
     * @param {PreferenceCreateManyAndReturnArgs} args - Arguments to create many Preferences.
     * @example
     * // Create many Preferences
     * const preference = await prisma.preference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Preferences and only return the `accountAddress`
     * const preferenceWithAccountAddressOnly = await prisma.preference.createManyAndReturn({
     *   select: { accountAddress: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PreferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, PreferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Preference.
     * @param {PreferenceDeleteArgs} args - Arguments to delete one Preference.
     * @example
     * // Delete one Preference
     * const Preference = await prisma.preference.delete({
     *   where: {
     *     // ... filter to delete one Preference
     *   }
     * })
     * 
     */
    delete<T extends PreferenceDeleteArgs>(args: SelectSubset<T, PreferenceDeleteArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Preference.
     * @param {PreferenceUpdateArgs} args - Arguments to update one Preference.
     * @example
     * // Update one Preference
     * const preference = await prisma.preference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PreferenceUpdateArgs>(args: SelectSubset<T, PreferenceUpdateArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Preferences.
     * @param {PreferenceDeleteManyArgs} args - Arguments to filter Preferences to delete.
     * @example
     * // Delete a few Preferences
     * const { count } = await prisma.preference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PreferenceDeleteManyArgs>(args?: SelectSubset<T, PreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Preferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Preferences
     * const preference = await prisma.preference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PreferenceUpdateManyArgs>(args: SelectSubset<T, PreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Preferences and returns the data updated in the database.
     * @param {PreferenceUpdateManyAndReturnArgs} args - Arguments to update many Preferences.
     * @example
     * // Update many Preferences
     * const preference = await prisma.preference.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Preferences and only return the `accountAddress`
     * const preferenceWithAccountAddressOnly = await prisma.preference.updateManyAndReturn({
     *   select: { accountAddress: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PreferenceUpdateManyAndReturnArgs>(args: SelectSubset<T, PreferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Preference.
     * @param {PreferenceUpsertArgs} args - Arguments to update or create a Preference.
     * @example
     * // Update or create a Preference
     * const preference = await prisma.preference.upsert({
     *   create: {
     *     // ... data to create a Preference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Preference we want to update
     *   }
     * })
     */
    upsert<T extends PreferenceUpsertArgs>(args: SelectSubset<T, PreferenceUpsertArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Preferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceCountArgs} args - Arguments to filter Preferences to count.
     * @example
     * // Count the number of Preferences
     * const count = await prisma.preference.count({
     *   where: {
     *     // ... the filter for the Preferences we want to count
     *   }
     * })
    **/
    count<T extends PreferenceCountArgs>(
      args?: Subset<T, PreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Preference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PreferenceAggregateArgs>(args: Subset<T, PreferenceAggregateArgs>): Prisma.PrismaPromise<GetPreferenceAggregateType<T>>

    /**
     * Group by Preference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PreferenceGroupByArgs['orderBy'] }
        : { orderBy?: PreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Preference model
   */
  readonly fields: PreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Preference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Preference model
   */
  interface PreferenceFieldRefs {
    readonly accountAddress: FieldRef<"Preference", 'String'>
    readonly appIcon: FieldRef<"Preference", 'Int'>
    readonly includeLowScore: FieldRef<"Preference", 'Boolean'>
    readonly createdAt: FieldRef<"Preference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Preference findUnique
   */
  export type PreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Filter, which Preference to fetch.
     */
    where: PreferenceWhereUniqueInput
  }

  /**
   * Preference findUniqueOrThrow
   */
  export type PreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Filter, which Preference to fetch.
     */
    where: PreferenceWhereUniqueInput
  }

  /**
   * Preference findFirst
   */
  export type PreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Filter, which Preference to fetch.
     */
    where?: PreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferenceOrderByWithRelationInput | PreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Preferences.
     */
    cursor?: PreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Preferences.
     */
    distinct?: PreferenceScalarFieldEnum | PreferenceScalarFieldEnum[]
  }

  /**
   * Preference findFirstOrThrow
   */
  export type PreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Filter, which Preference to fetch.
     */
    where?: PreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferenceOrderByWithRelationInput | PreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Preferences.
     */
    cursor?: PreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Preferences.
     */
    distinct?: PreferenceScalarFieldEnum | PreferenceScalarFieldEnum[]
  }

  /**
   * Preference findMany
   */
  export type PreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Filter, which Preferences to fetch.
     */
    where?: PreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferenceOrderByWithRelationInput | PreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Preferences.
     */
    cursor?: PreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    distinct?: PreferenceScalarFieldEnum | PreferenceScalarFieldEnum[]
  }

  /**
   * Preference create
   */
  export type PreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * The data needed to create a Preference.
     */
    data: XOR<PreferenceCreateInput, PreferenceUncheckedCreateInput>
  }

  /**
   * Preference createMany
   */
  export type PreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Preferences.
     */
    data: PreferenceCreateManyInput | PreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Preference createManyAndReturn
   */
  export type PreferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * The data used to create many Preferences.
     */
    data: PreferenceCreateManyInput | PreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Preference update
   */
  export type PreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * The data needed to update a Preference.
     */
    data: XOR<PreferenceUpdateInput, PreferenceUncheckedUpdateInput>
    /**
     * Choose, which Preference to update.
     */
    where: PreferenceWhereUniqueInput
  }

  /**
   * Preference updateMany
   */
  export type PreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Preferences.
     */
    data: XOR<PreferenceUpdateManyMutationInput, PreferenceUncheckedUpdateManyInput>
    /**
     * Filter which Preferences to update
     */
    where?: PreferenceWhereInput
    /**
     * Limit how many Preferences to update.
     */
    limit?: number
  }

  /**
   * Preference updateManyAndReturn
   */
  export type PreferenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * The data used to update Preferences.
     */
    data: XOR<PreferenceUpdateManyMutationInput, PreferenceUncheckedUpdateManyInput>
    /**
     * Filter which Preferences to update
     */
    where?: PreferenceWhereInput
    /**
     * Limit how many Preferences to update.
     */
    limit?: number
  }

  /**
   * Preference upsert
   */
  export type PreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * The filter to search for the Preference to update in case it exists.
     */
    where: PreferenceWhereUniqueInput
    /**
     * In case the Preference found by the `where` argument doesn't exist, create a new Preference with this data.
     */
    create: XOR<PreferenceCreateInput, PreferenceUncheckedCreateInput>
    /**
     * In case the Preference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PreferenceUpdateInput, PreferenceUncheckedUpdateInput>
  }

  /**
   * Preference delete
   */
  export type PreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
    /**
     * Filter which Preference to delete.
     */
    where: PreferenceWhereUniqueInput
  }

  /**
   * Preference deleteMany
   */
  export type PreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Preferences to delete
     */
    where?: PreferenceWhereInput
    /**
     * Limit how many Preferences to delete.
     */
    limit?: number
  }

  /**
   * Preference without action
   */
  export type PreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Preference
     */
    omit?: PreferenceOmit<ExtArgs> | null
  }


  /**
   * Model PremiumProfile
   */

  export type AggregatePremiumProfile = {
    _count: PremiumProfileCountAggregateOutputType | null
    _min: PremiumProfileMinAggregateOutputType | null
    _max: PremiumProfileMaxAggregateOutputType | null
  }

  export type PremiumProfileMinAggregateOutputType = {
    id: string | null
    walletAddress: string | null
    profileId: string | null
    isActive: boolean | null
    linkedAt: Date | null
    deactivatedAt: Date | null
  }

  export type PremiumProfileMaxAggregateOutputType = {
    id: string | null
    walletAddress: string | null
    profileId: string | null
    isActive: boolean | null
    linkedAt: Date | null
    deactivatedAt: Date | null
  }

  export type PremiumProfileCountAggregateOutputType = {
    id: number
    walletAddress: number
    profileId: number
    isActive: number
    linkedAt: number
    deactivatedAt: number
    _all: number
  }


  export type PremiumProfileMinAggregateInputType = {
    id?: true
    walletAddress?: true
    profileId?: true
    isActive?: true
    linkedAt?: true
    deactivatedAt?: true
  }

  export type PremiumProfileMaxAggregateInputType = {
    id?: true
    walletAddress?: true
    profileId?: true
    isActive?: true
    linkedAt?: true
    deactivatedAt?: true
  }

  export type PremiumProfileCountAggregateInputType = {
    id?: true
    walletAddress?: true
    profileId?: true
    isActive?: true
    linkedAt?: true
    deactivatedAt?: true
    _all?: true
  }

  export type PremiumProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PremiumProfile to aggregate.
     */
    where?: PremiumProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumProfiles to fetch.
     */
    orderBy?: PremiumProfileOrderByWithRelationInput | PremiumProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PremiumProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PremiumProfiles
    **/
    _count?: true | PremiumProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PremiumProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PremiumProfileMaxAggregateInputType
  }

  export type GetPremiumProfileAggregateType<T extends PremiumProfileAggregateArgs> = {
        [P in keyof T & keyof AggregatePremiumProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePremiumProfile[P]>
      : GetScalarType<T[P], AggregatePremiumProfile[P]>
  }




  export type PremiumProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PremiumProfileWhereInput
    orderBy?: PremiumProfileOrderByWithAggregationInput | PremiumProfileOrderByWithAggregationInput[]
    by: PremiumProfileScalarFieldEnum[] | PremiumProfileScalarFieldEnum
    having?: PremiumProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PremiumProfileCountAggregateInputType | true
    _min?: PremiumProfileMinAggregateInputType
    _max?: PremiumProfileMaxAggregateInputType
  }

  export type PremiumProfileGroupByOutputType = {
    id: string
    walletAddress: string
    profileId: string
    isActive: boolean
    linkedAt: Date
    deactivatedAt: Date | null
    _count: PremiumProfileCountAggregateOutputType | null
    _min: PremiumProfileMinAggregateOutputType | null
    _max: PremiumProfileMaxAggregateOutputType | null
  }

  type GetPremiumProfileGroupByPayload<T extends PremiumProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PremiumProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PremiumProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PremiumProfileGroupByOutputType[P]>
            : GetScalarType<T[P], PremiumProfileGroupByOutputType[P]>
        }
      >
    >


  export type PremiumProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    profileId?: boolean
    isActive?: boolean
    linkedAt?: boolean
    deactivatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["premiumProfile"]>

  export type PremiumProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    profileId?: boolean
    isActive?: boolean
    linkedAt?: boolean
    deactivatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["premiumProfile"]>

  export type PremiumProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    profileId?: boolean
    isActive?: boolean
    linkedAt?: boolean
    deactivatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["premiumProfile"]>

  export type PremiumProfileSelectScalar = {
    id?: boolean
    walletAddress?: boolean
    profileId?: boolean
    isActive?: boolean
    linkedAt?: boolean
    deactivatedAt?: boolean
  }

  export type PremiumProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "walletAddress" | "profileId" | "isActive" | "linkedAt" | "deactivatedAt", ExtArgs["result"]["premiumProfile"]>
  export type PremiumProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PremiumProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PremiumProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PremiumProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PremiumProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      walletAddress: string
      profileId: string
      isActive: boolean
      linkedAt: Date
      deactivatedAt: Date | null
    }, ExtArgs["result"]["premiumProfile"]>
    composites: {}
  }

  type PremiumProfileGetPayload<S extends boolean | null | undefined | PremiumProfileDefaultArgs> = $Result.GetResult<Prisma.$PremiumProfilePayload, S>

  type PremiumProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PremiumProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PremiumProfileCountAggregateInputType | true
    }

  export interface PremiumProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PremiumProfile'], meta: { name: 'PremiumProfile' } }
    /**
     * Find zero or one PremiumProfile that matches the filter.
     * @param {PremiumProfileFindUniqueArgs} args - Arguments to find a PremiumProfile
     * @example
     * // Get one PremiumProfile
     * const premiumProfile = await prisma.premiumProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PremiumProfileFindUniqueArgs>(args: SelectSubset<T, PremiumProfileFindUniqueArgs<ExtArgs>>): Prisma__PremiumProfileClient<$Result.GetResult<Prisma.$PremiumProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PremiumProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PremiumProfileFindUniqueOrThrowArgs} args - Arguments to find a PremiumProfile
     * @example
     * // Get one PremiumProfile
     * const premiumProfile = await prisma.premiumProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PremiumProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, PremiumProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PremiumProfileClient<$Result.GetResult<Prisma.$PremiumProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PremiumProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumProfileFindFirstArgs} args - Arguments to find a PremiumProfile
     * @example
     * // Get one PremiumProfile
     * const premiumProfile = await prisma.premiumProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PremiumProfileFindFirstArgs>(args?: SelectSubset<T, PremiumProfileFindFirstArgs<ExtArgs>>): Prisma__PremiumProfileClient<$Result.GetResult<Prisma.$PremiumProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PremiumProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumProfileFindFirstOrThrowArgs} args - Arguments to find a PremiumProfile
     * @example
     * // Get one PremiumProfile
     * const premiumProfile = await prisma.premiumProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PremiumProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, PremiumProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__PremiumProfileClient<$Result.GetResult<Prisma.$PremiumProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PremiumProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PremiumProfiles
     * const premiumProfiles = await prisma.premiumProfile.findMany()
     * 
     * // Get first 10 PremiumProfiles
     * const premiumProfiles = await prisma.premiumProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const premiumProfileWithIdOnly = await prisma.premiumProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PremiumProfileFindManyArgs>(args?: SelectSubset<T, PremiumProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PremiumProfile.
     * @param {PremiumProfileCreateArgs} args - Arguments to create a PremiumProfile.
     * @example
     * // Create one PremiumProfile
     * const PremiumProfile = await prisma.premiumProfile.create({
     *   data: {
     *     // ... data to create a PremiumProfile
     *   }
     * })
     * 
     */
    create<T extends PremiumProfileCreateArgs>(args: SelectSubset<T, PremiumProfileCreateArgs<ExtArgs>>): Prisma__PremiumProfileClient<$Result.GetResult<Prisma.$PremiumProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PremiumProfiles.
     * @param {PremiumProfileCreateManyArgs} args - Arguments to create many PremiumProfiles.
     * @example
     * // Create many PremiumProfiles
     * const premiumProfile = await prisma.premiumProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PremiumProfileCreateManyArgs>(args?: SelectSubset<T, PremiumProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PremiumProfiles and returns the data saved in the database.
     * @param {PremiumProfileCreateManyAndReturnArgs} args - Arguments to create many PremiumProfiles.
     * @example
     * // Create many PremiumProfiles
     * const premiumProfile = await prisma.premiumProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PremiumProfiles and only return the `id`
     * const premiumProfileWithIdOnly = await prisma.premiumProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PremiumProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, PremiumProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PremiumProfile.
     * @param {PremiumProfileDeleteArgs} args - Arguments to delete one PremiumProfile.
     * @example
     * // Delete one PremiumProfile
     * const PremiumProfile = await prisma.premiumProfile.delete({
     *   where: {
     *     // ... filter to delete one PremiumProfile
     *   }
     * })
     * 
     */
    delete<T extends PremiumProfileDeleteArgs>(args: SelectSubset<T, PremiumProfileDeleteArgs<ExtArgs>>): Prisma__PremiumProfileClient<$Result.GetResult<Prisma.$PremiumProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PremiumProfile.
     * @param {PremiumProfileUpdateArgs} args - Arguments to update one PremiumProfile.
     * @example
     * // Update one PremiumProfile
     * const premiumProfile = await prisma.premiumProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PremiumProfileUpdateArgs>(args: SelectSubset<T, PremiumProfileUpdateArgs<ExtArgs>>): Prisma__PremiumProfileClient<$Result.GetResult<Prisma.$PremiumProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PremiumProfiles.
     * @param {PremiumProfileDeleteManyArgs} args - Arguments to filter PremiumProfiles to delete.
     * @example
     * // Delete a few PremiumProfiles
     * const { count } = await prisma.premiumProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PremiumProfileDeleteManyArgs>(args?: SelectSubset<T, PremiumProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PremiumProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PremiumProfiles
     * const premiumProfile = await prisma.premiumProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PremiumProfileUpdateManyArgs>(args: SelectSubset<T, PremiumProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PremiumProfiles and returns the data updated in the database.
     * @param {PremiumProfileUpdateManyAndReturnArgs} args - Arguments to update many PremiumProfiles.
     * @example
     * // Update many PremiumProfiles
     * const premiumProfile = await prisma.premiumProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PremiumProfiles and only return the `id`
     * const premiumProfileWithIdOnly = await prisma.premiumProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PremiumProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, PremiumProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PremiumProfile.
     * @param {PremiumProfileUpsertArgs} args - Arguments to update or create a PremiumProfile.
     * @example
     * // Update or create a PremiumProfile
     * const premiumProfile = await prisma.premiumProfile.upsert({
     *   create: {
     *     // ... data to create a PremiumProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PremiumProfile we want to update
     *   }
     * })
     */
    upsert<T extends PremiumProfileUpsertArgs>(args: SelectSubset<T, PremiumProfileUpsertArgs<ExtArgs>>): Prisma__PremiumProfileClient<$Result.GetResult<Prisma.$PremiumProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PremiumProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumProfileCountArgs} args - Arguments to filter PremiumProfiles to count.
     * @example
     * // Count the number of PremiumProfiles
     * const count = await prisma.premiumProfile.count({
     *   where: {
     *     // ... the filter for the PremiumProfiles we want to count
     *   }
     * })
    **/
    count<T extends PremiumProfileCountArgs>(
      args?: Subset<T, PremiumProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PremiumProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PremiumProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PremiumProfileAggregateArgs>(args: Subset<T, PremiumProfileAggregateArgs>): Prisma.PrismaPromise<GetPremiumProfileAggregateType<T>>

    /**
     * Group by PremiumProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PremiumProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PremiumProfileGroupByArgs['orderBy'] }
        : { orderBy?: PremiumProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PremiumProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPremiumProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PremiumProfile model
   */
  readonly fields: PremiumProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PremiumProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PremiumProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PremiumProfile model
   */
  interface PremiumProfileFieldRefs {
    readonly id: FieldRef<"PremiumProfile", 'String'>
    readonly walletAddress: FieldRef<"PremiumProfile", 'String'>
    readonly profileId: FieldRef<"PremiumProfile", 'String'>
    readonly isActive: FieldRef<"PremiumProfile", 'Boolean'>
    readonly linkedAt: FieldRef<"PremiumProfile", 'DateTime'>
    readonly deactivatedAt: FieldRef<"PremiumProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PremiumProfile findUnique
   */
  export type PremiumProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumProfile
     */
    select?: PremiumProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumProfile
     */
    omit?: PremiumProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumProfileInclude<ExtArgs> | null
    /**
     * Filter, which PremiumProfile to fetch.
     */
    where: PremiumProfileWhereUniqueInput
  }

  /**
   * PremiumProfile findUniqueOrThrow
   */
  export type PremiumProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumProfile
     */
    select?: PremiumProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumProfile
     */
    omit?: PremiumProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumProfileInclude<ExtArgs> | null
    /**
     * Filter, which PremiumProfile to fetch.
     */
    where: PremiumProfileWhereUniqueInput
  }

  /**
   * PremiumProfile findFirst
   */
  export type PremiumProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumProfile
     */
    select?: PremiumProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumProfile
     */
    omit?: PremiumProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumProfileInclude<ExtArgs> | null
    /**
     * Filter, which PremiumProfile to fetch.
     */
    where?: PremiumProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumProfiles to fetch.
     */
    orderBy?: PremiumProfileOrderByWithRelationInput | PremiumProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PremiumProfiles.
     */
    cursor?: PremiumProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PremiumProfiles.
     */
    distinct?: PremiumProfileScalarFieldEnum | PremiumProfileScalarFieldEnum[]
  }

  /**
   * PremiumProfile findFirstOrThrow
   */
  export type PremiumProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumProfile
     */
    select?: PremiumProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumProfile
     */
    omit?: PremiumProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumProfileInclude<ExtArgs> | null
    /**
     * Filter, which PremiumProfile to fetch.
     */
    where?: PremiumProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumProfiles to fetch.
     */
    orderBy?: PremiumProfileOrderByWithRelationInput | PremiumProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PremiumProfiles.
     */
    cursor?: PremiumProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PremiumProfiles.
     */
    distinct?: PremiumProfileScalarFieldEnum | PremiumProfileScalarFieldEnum[]
  }

  /**
   * PremiumProfile findMany
   */
  export type PremiumProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumProfile
     */
    select?: PremiumProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumProfile
     */
    omit?: PremiumProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumProfileInclude<ExtArgs> | null
    /**
     * Filter, which PremiumProfiles to fetch.
     */
    where?: PremiumProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumProfiles to fetch.
     */
    orderBy?: PremiumProfileOrderByWithRelationInput | PremiumProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PremiumProfiles.
     */
    cursor?: PremiumProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumProfiles.
     */
    skip?: number
    distinct?: PremiumProfileScalarFieldEnum | PremiumProfileScalarFieldEnum[]
  }

  /**
   * PremiumProfile create
   */
  export type PremiumProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumProfile
     */
    select?: PremiumProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumProfile
     */
    omit?: PremiumProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a PremiumProfile.
     */
    data: XOR<PremiumProfileCreateInput, PremiumProfileUncheckedCreateInput>
  }

  /**
   * PremiumProfile createMany
   */
  export type PremiumProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PremiumProfiles.
     */
    data: PremiumProfileCreateManyInput | PremiumProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PremiumProfile createManyAndReturn
   */
  export type PremiumProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumProfile
     */
    select?: PremiumProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumProfile
     */
    omit?: PremiumProfileOmit<ExtArgs> | null
    /**
     * The data used to create many PremiumProfiles.
     */
    data: PremiumProfileCreateManyInput | PremiumProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PremiumProfile update
   */
  export type PremiumProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumProfile
     */
    select?: PremiumProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumProfile
     */
    omit?: PremiumProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a PremiumProfile.
     */
    data: XOR<PremiumProfileUpdateInput, PremiumProfileUncheckedUpdateInput>
    /**
     * Choose, which PremiumProfile to update.
     */
    where: PremiumProfileWhereUniqueInput
  }

  /**
   * PremiumProfile updateMany
   */
  export type PremiumProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PremiumProfiles.
     */
    data: XOR<PremiumProfileUpdateManyMutationInput, PremiumProfileUncheckedUpdateManyInput>
    /**
     * Filter which PremiumProfiles to update
     */
    where?: PremiumProfileWhereInput
    /**
     * Limit how many PremiumProfiles to update.
     */
    limit?: number
  }

  /**
   * PremiumProfile updateManyAndReturn
   */
  export type PremiumProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumProfile
     */
    select?: PremiumProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumProfile
     */
    omit?: PremiumProfileOmit<ExtArgs> | null
    /**
     * The data used to update PremiumProfiles.
     */
    data: XOR<PremiumProfileUpdateManyMutationInput, PremiumProfileUncheckedUpdateManyInput>
    /**
     * Filter which PremiumProfiles to update
     */
    where?: PremiumProfileWhereInput
    /**
     * Limit how many PremiumProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PremiumProfile upsert
   */
  export type PremiumProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumProfile
     */
    select?: PremiumProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumProfile
     */
    omit?: PremiumProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the PremiumProfile to update in case it exists.
     */
    where: PremiumProfileWhereUniqueInput
    /**
     * In case the PremiumProfile found by the `where` argument doesn't exist, create a new PremiumProfile with this data.
     */
    create: XOR<PremiumProfileCreateInput, PremiumProfileUncheckedCreateInput>
    /**
     * In case the PremiumProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PremiumProfileUpdateInput, PremiumProfileUncheckedUpdateInput>
  }

  /**
   * PremiumProfile delete
   */
  export type PremiumProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumProfile
     */
    select?: PremiumProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumProfile
     */
    omit?: PremiumProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumProfileInclude<ExtArgs> | null
    /**
     * Filter which PremiumProfile to delete.
     */
    where: PremiumProfileWhereUniqueInput
  }

  /**
   * PremiumProfile deleteMany
   */
  export type PremiumProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PremiumProfiles to delete
     */
    where?: PremiumProfileWhereInput
    /**
     * Limit how many PremiumProfiles to delete.
     */
    limit?: number
  }

  /**
   * PremiumProfile without action
   */
  export type PremiumProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumProfile
     */
    select?: PremiumProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumProfile
     */
    omit?: PremiumProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumProfileInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    totalLogins: number | null
  }

  export type UserSumAggregateOutputType = {
    totalLogins: number | null
  }

  export type UserMinAggregateOutputType = {
    walletAddress: string | null
    email: string | null
    username: string | null
    displayName: string | null
    avatarUrl: string | null
    bio: string | null
    location: string | null
    website: string | null
    twitterHandle: string | null
    registrationDate: Date | null
    referrerAddress: string | null
    registrationTxHash: string | null
    premiumUpgradedAt: Date | null
    lastActiveAt: Date | null
    totalLogins: number | null
    createdAt: Date | null
    updatedAt: Date | null
    status: $Enums.UserStatus | null
  }

  export type UserMaxAggregateOutputType = {
    walletAddress: string | null
    email: string | null
    username: string | null
    displayName: string | null
    avatarUrl: string | null
    bio: string | null
    location: string | null
    website: string | null
    twitterHandle: string | null
    registrationDate: Date | null
    referrerAddress: string | null
    registrationTxHash: string | null
    premiumUpgradedAt: Date | null
    lastActiveAt: Date | null
    totalLogins: number | null
    createdAt: Date | null
    updatedAt: Date | null
    status: $Enums.UserStatus | null
  }

  export type UserCountAggregateOutputType = {
    walletAddress: number
    email: number
    username: number
    displayName: number
    avatarUrl: number
    bio: number
    location: number
    website: number
    twitterHandle: number
    registrationDate: number
    referrerAddress: number
    registrationTxHash: number
    premiumUpgradedAt: number
    lastActiveAt: number
    totalLogins: number
    createdAt: number
    updatedAt: number
    status: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    totalLogins?: true
  }

  export type UserSumAggregateInputType = {
    totalLogins?: true
  }

  export type UserMinAggregateInputType = {
    walletAddress?: true
    email?: true
    username?: true
    displayName?: true
    avatarUrl?: true
    bio?: true
    location?: true
    website?: true
    twitterHandle?: true
    registrationDate?: true
    referrerAddress?: true
    registrationTxHash?: true
    premiumUpgradedAt?: true
    lastActiveAt?: true
    totalLogins?: true
    createdAt?: true
    updatedAt?: true
    status?: true
  }

  export type UserMaxAggregateInputType = {
    walletAddress?: true
    email?: true
    username?: true
    displayName?: true
    avatarUrl?: true
    bio?: true
    location?: true
    website?: true
    twitterHandle?: true
    registrationDate?: true
    referrerAddress?: true
    registrationTxHash?: true
    premiumUpgradedAt?: true
    lastActiveAt?: true
    totalLogins?: true
    createdAt?: true
    updatedAt?: true
    status?: true
  }

  export type UserCountAggregateInputType = {
    walletAddress?: true
    email?: true
    username?: true
    displayName?: true
    avatarUrl?: true
    bio?: true
    location?: true
    website?: true
    twitterHandle?: true
    registrationDate?: true
    referrerAddress?: true
    registrationTxHash?: true
    premiumUpgradedAt?: true
    lastActiveAt?: true
    totalLogins?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    walletAddress: string
    email: string | null
    username: string | null
    displayName: string | null
    avatarUrl: string | null
    bio: string | null
    location: string | null
    website: string | null
    twitterHandle: string | null
    registrationDate: Date
    referrerAddress: string | null
    registrationTxHash: string | null
    premiumUpgradedAt: Date | null
    lastActiveAt: Date
    totalLogins: number
    createdAt: Date
    updatedAt: Date
    status: $Enums.UserStatus
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    walletAddress?: boolean
    email?: boolean
    username?: boolean
    displayName?: boolean
    avatarUrl?: boolean
    bio?: boolean
    location?: boolean
    website?: boolean
    twitterHandle?: boolean
    registrationDate?: boolean
    referrerAddress?: boolean
    registrationTxHash?: boolean
    premiumUpgradedAt?: boolean
    lastActiveAt?: boolean
    totalLogins?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    adminNotes?: boolean | User$adminNotesArgs<ExtArgs>
    featureAccesses?: boolean | User$featureAccessesArgs<ExtArgs>
    premiumProfile?: boolean | User$premiumProfileArgs<ExtArgs>
    userCoins?: boolean | User$userCoinsArgs<ExtArgs>
    userNotifications?: boolean | User$userNotificationsArgs<ExtArgs>
    preferences?: boolean | User$preferencesArgs<ExtArgs>
    userQuests?: boolean | User$userQuestsArgs<ExtArgs>
    userRewards?: boolean | User$userRewardsArgs<ExtArgs>
    userStats?: boolean | User$userStatsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    walletAddress?: boolean
    email?: boolean
    username?: boolean
    displayName?: boolean
    avatarUrl?: boolean
    bio?: boolean
    location?: boolean
    website?: boolean
    twitterHandle?: boolean
    registrationDate?: boolean
    referrerAddress?: boolean
    registrationTxHash?: boolean
    premiumUpgradedAt?: boolean
    lastActiveAt?: boolean
    totalLogins?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    walletAddress?: boolean
    email?: boolean
    username?: boolean
    displayName?: boolean
    avatarUrl?: boolean
    bio?: boolean
    location?: boolean
    website?: boolean
    twitterHandle?: boolean
    registrationDate?: boolean
    referrerAddress?: boolean
    registrationTxHash?: boolean
    premiumUpgradedAt?: boolean
    lastActiveAt?: boolean
    totalLogins?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    walletAddress?: boolean
    email?: boolean
    username?: boolean
    displayName?: boolean
    avatarUrl?: boolean
    bio?: boolean
    location?: boolean
    website?: boolean
    twitterHandle?: boolean
    registrationDate?: boolean
    referrerAddress?: boolean
    registrationTxHash?: boolean
    premiumUpgradedAt?: boolean
    lastActiveAt?: boolean
    totalLogins?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"walletAddress" | "email" | "username" | "displayName" | "avatarUrl" | "bio" | "location" | "website" | "twitterHandle" | "registrationDate" | "referrerAddress" | "registrationTxHash" | "premiumUpgradedAt" | "lastActiveAt" | "totalLogins" | "createdAt" | "updatedAt" | "status", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminNotes?: boolean | User$adminNotesArgs<ExtArgs>
    featureAccesses?: boolean | User$featureAccessesArgs<ExtArgs>
    premiumProfile?: boolean | User$premiumProfileArgs<ExtArgs>
    userCoins?: boolean | User$userCoinsArgs<ExtArgs>
    userNotifications?: boolean | User$userNotificationsArgs<ExtArgs>
    preferences?: boolean | User$preferencesArgs<ExtArgs>
    userQuests?: boolean | User$userQuestsArgs<ExtArgs>
    userRewards?: boolean | User$userRewardsArgs<ExtArgs>
    userStats?: boolean | User$userStatsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      adminNotes: Prisma.$AdminNotePayload<ExtArgs>[]
      featureAccesses: Prisma.$FeatureAccessPayload<ExtArgs>[]
      premiumProfile: Prisma.$PremiumProfilePayload<ExtArgs> | null
      userCoins: Prisma.$UserCoinPayload<ExtArgs>[]
      userNotifications: Prisma.$UserNotificationPayload<ExtArgs>[]
      preferences: Prisma.$UserPreferencesPayload<ExtArgs> | null
      userQuests: Prisma.$UserQuestPayload<ExtArgs>[]
      userRewards: Prisma.$UserRewardPayload<ExtArgs>[]
      userStats: Prisma.$UserStatsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      walletAddress: string
      email: string | null
      username: string | null
      displayName: string | null
      avatarUrl: string | null
      bio: string | null
      location: string | null
      website: string | null
      twitterHandle: string | null
      registrationDate: Date
      referrerAddress: string | null
      registrationTxHash: string | null
      premiumUpgradedAt: Date | null
      lastActiveAt: Date
      totalLogins: number
      createdAt: Date
      updatedAt: Date
      status: $Enums.UserStatus
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `walletAddress`
     * const userWithWalletAddressOnly = await prisma.user.findMany({ select: { walletAddress: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `walletAddress`
     * const userWithWalletAddressOnly = await prisma.user.createManyAndReturn({
     *   select: { walletAddress: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `walletAddress`
     * const userWithWalletAddressOnly = await prisma.user.updateManyAndReturn({
     *   select: { walletAddress: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    adminNotes<T extends User$adminNotesArgs<ExtArgs> = {}>(args?: Subset<T, User$adminNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    featureAccesses<T extends User$featureAccessesArgs<ExtArgs> = {}>(args?: Subset<T, User$featureAccessesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    premiumProfile<T extends User$premiumProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$premiumProfileArgs<ExtArgs>>): Prisma__PremiumProfileClient<$Result.GetResult<Prisma.$PremiumProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    userCoins<T extends User$userCoinsArgs<ExtArgs> = {}>(args?: Subset<T, User$userCoinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCoinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userNotifications<T extends User$userNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$userNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    preferences<T extends User$preferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$preferencesArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    userQuests<T extends User$userQuestsArgs<ExtArgs> = {}>(args?: Subset<T, User$userQuestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userRewards<T extends User$userRewardsArgs<ExtArgs> = {}>(args?: Subset<T, User$userRewardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userStats<T extends User$userStatsArgs<ExtArgs> = {}>(args?: Subset<T, User$userStatsArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly walletAddress: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly displayName: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly location: FieldRef<"User", 'String'>
    readonly website: FieldRef<"User", 'String'>
    readonly twitterHandle: FieldRef<"User", 'String'>
    readonly registrationDate: FieldRef<"User", 'DateTime'>
    readonly referrerAddress: FieldRef<"User", 'String'>
    readonly registrationTxHash: FieldRef<"User", 'String'>
    readonly premiumUpgradedAt: FieldRef<"User", 'DateTime'>
    readonly lastActiveAt: FieldRef<"User", 'DateTime'>
    readonly totalLogins: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly status: FieldRef<"User", 'UserStatus'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.adminNotes
   */
  export type User$adminNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminNote
     */
    select?: AdminNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminNote
     */
    omit?: AdminNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminNoteInclude<ExtArgs> | null
    where?: AdminNoteWhereInput
    orderBy?: AdminNoteOrderByWithRelationInput | AdminNoteOrderByWithRelationInput[]
    cursor?: AdminNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminNoteScalarFieldEnum | AdminNoteScalarFieldEnum[]
  }

  /**
   * User.featureAccesses
   */
  export type User$featureAccessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureAccess
     */
    select?: FeatureAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureAccess
     */
    omit?: FeatureAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureAccessInclude<ExtArgs> | null
    where?: FeatureAccessWhereInput
    orderBy?: FeatureAccessOrderByWithRelationInput | FeatureAccessOrderByWithRelationInput[]
    cursor?: FeatureAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeatureAccessScalarFieldEnum | FeatureAccessScalarFieldEnum[]
  }

  /**
   * User.premiumProfile
   */
  export type User$premiumProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumProfile
     */
    select?: PremiumProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumProfile
     */
    omit?: PremiumProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumProfileInclude<ExtArgs> | null
    where?: PremiumProfileWhereInput
  }

  /**
   * User.userCoins
   */
  export type User$userCoinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCoin
     */
    select?: UserCoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCoin
     */
    omit?: UserCoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCoinInclude<ExtArgs> | null
    where?: UserCoinWhereInput
    orderBy?: UserCoinOrderByWithRelationInput | UserCoinOrderByWithRelationInput[]
    cursor?: UserCoinWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCoinScalarFieldEnum | UserCoinScalarFieldEnum[]
  }

  /**
   * User.userNotifications
   */
  export type User$userNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    where?: UserNotificationWhereInput
    orderBy?: UserNotificationOrderByWithRelationInput | UserNotificationOrderByWithRelationInput[]
    cursor?: UserNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserNotificationScalarFieldEnum | UserNotificationScalarFieldEnum[]
  }

  /**
   * User.preferences
   */
  export type User$preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreferences
     */
    omit?: UserPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    where?: UserPreferencesWhereInput
  }

  /**
   * User.userQuests
   */
  export type User$userQuestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuest
     */
    select?: UserQuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuest
     */
    omit?: UserQuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestInclude<ExtArgs> | null
    where?: UserQuestWhereInput
    orderBy?: UserQuestOrderByWithRelationInput | UserQuestOrderByWithRelationInput[]
    cursor?: UserQuestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuestScalarFieldEnum | UserQuestScalarFieldEnum[]
  }

  /**
   * User.userRewards
   */
  export type User$userRewardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    where?: UserRewardWhereInput
    orderBy?: UserRewardOrderByWithRelationInput | UserRewardOrderByWithRelationInput[]
    cursor?: UserRewardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRewardScalarFieldEnum | UserRewardScalarFieldEnum[]
  }

  /**
   * User.userStats
   */
  export type User$userStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStats
     */
    omit?: UserStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    where?: UserStatsWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserPreferences
   */

  export type AggregateUserPreferences = {
    _count: UserPreferencesCountAggregateOutputType | null
    _min: UserPreferencesMinAggregateOutputType | null
    _max: UserPreferencesMaxAggregateOutputType | null
  }

  export type UserPreferencesMinAggregateOutputType = {
    walletAddress: string | null
    emailNotifications: boolean | null
    pushNotifications: boolean | null
    marketingEmails: boolean | null
    privacyLevel: $Enums.PrivacyLevel | null
    language: string | null
    timezone: string | null
    autoLinkProfile: boolean | null
    showPremiumBadge: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPreferencesMaxAggregateOutputType = {
    walletAddress: string | null
    emailNotifications: boolean | null
    pushNotifications: boolean | null
    marketingEmails: boolean | null
    privacyLevel: $Enums.PrivacyLevel | null
    language: string | null
    timezone: string | null
    autoLinkProfile: boolean | null
    showPremiumBadge: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPreferencesCountAggregateOutputType = {
    walletAddress: number
    emailNotifications: number
    pushNotifications: number
    marketingEmails: number
    privacyLevel: number
    language: number
    timezone: number
    autoLinkProfile: number
    showPremiumBadge: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserPreferencesMinAggregateInputType = {
    walletAddress?: true
    emailNotifications?: true
    pushNotifications?: true
    marketingEmails?: true
    privacyLevel?: true
    language?: true
    timezone?: true
    autoLinkProfile?: true
    showPremiumBadge?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPreferencesMaxAggregateInputType = {
    walletAddress?: true
    emailNotifications?: true
    pushNotifications?: true
    marketingEmails?: true
    privacyLevel?: true
    language?: true
    timezone?: true
    autoLinkProfile?: true
    showPremiumBadge?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPreferencesCountAggregateInputType = {
    walletAddress?: true
    emailNotifications?: true
    pushNotifications?: true
    marketingEmails?: true
    privacyLevel?: true
    language?: true
    timezone?: true
    autoLinkProfile?: true
    showPremiumBadge?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserPreferencesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreferences to aggregate.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPreferences
    **/
    _count?: true | UserPreferencesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPreferencesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPreferencesMaxAggregateInputType
  }

  export type GetUserPreferencesAggregateType<T extends UserPreferencesAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPreferences]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPreferences[P]>
      : GetScalarType<T[P], AggregateUserPreferences[P]>
  }




  export type UserPreferencesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPreferencesWhereInput
    orderBy?: UserPreferencesOrderByWithAggregationInput | UserPreferencesOrderByWithAggregationInput[]
    by: UserPreferencesScalarFieldEnum[] | UserPreferencesScalarFieldEnum
    having?: UserPreferencesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPreferencesCountAggregateInputType | true
    _min?: UserPreferencesMinAggregateInputType
    _max?: UserPreferencesMaxAggregateInputType
  }

  export type UserPreferencesGroupByOutputType = {
    walletAddress: string
    emailNotifications: boolean
    pushNotifications: boolean
    marketingEmails: boolean
    privacyLevel: $Enums.PrivacyLevel
    language: string
    timezone: string
    autoLinkProfile: boolean
    showPremiumBadge: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserPreferencesCountAggregateOutputType | null
    _min: UserPreferencesMinAggregateOutputType | null
    _max: UserPreferencesMaxAggregateOutputType | null
  }

  type GetUserPreferencesGroupByPayload<T extends UserPreferencesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPreferencesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPreferencesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPreferencesGroupByOutputType[P]>
            : GetScalarType<T[P], UserPreferencesGroupByOutputType[P]>
        }
      >
    >


  export type UserPreferencesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    walletAddress?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    marketingEmails?: boolean
    privacyLevel?: boolean
    language?: boolean
    timezone?: boolean
    autoLinkProfile?: boolean
    showPremiumBadge?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreferences"]>

  export type UserPreferencesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    walletAddress?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    marketingEmails?: boolean
    privacyLevel?: boolean
    language?: boolean
    timezone?: boolean
    autoLinkProfile?: boolean
    showPremiumBadge?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreferences"]>

  export type UserPreferencesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    walletAddress?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    marketingEmails?: boolean
    privacyLevel?: boolean
    language?: boolean
    timezone?: boolean
    autoLinkProfile?: boolean
    showPremiumBadge?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreferences"]>

  export type UserPreferencesSelectScalar = {
    walletAddress?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    marketingEmails?: boolean
    privacyLevel?: boolean
    language?: boolean
    timezone?: boolean
    autoLinkProfile?: boolean
    showPremiumBadge?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserPreferencesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"walletAddress" | "emailNotifications" | "pushNotifications" | "marketingEmails" | "privacyLevel" | "language" | "timezone" | "autoLinkProfile" | "showPremiumBadge" | "createdAt" | "updatedAt", ExtArgs["result"]["userPreferences"]>
  export type UserPreferencesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserPreferencesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserPreferencesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserPreferencesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPreferences"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      walletAddress: string
      emailNotifications: boolean
      pushNotifications: boolean
      marketingEmails: boolean
      privacyLevel: $Enums.PrivacyLevel
      language: string
      timezone: string
      autoLinkProfile: boolean
      showPremiumBadge: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userPreferences"]>
    composites: {}
  }

  type UserPreferencesGetPayload<S extends boolean | null | undefined | UserPreferencesDefaultArgs> = $Result.GetResult<Prisma.$UserPreferencesPayload, S>

  type UserPreferencesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserPreferencesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserPreferencesCountAggregateInputType | true
    }

  export interface UserPreferencesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPreferences'], meta: { name: 'UserPreferences' } }
    /**
     * Find zero or one UserPreferences that matches the filter.
     * @param {UserPreferencesFindUniqueArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPreferencesFindUniqueArgs>(args: SelectSubset<T, UserPreferencesFindUniqueArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserPreferences that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserPreferencesFindUniqueOrThrowArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPreferencesFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPreferencesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesFindFirstArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPreferencesFindFirstArgs>(args?: SelectSubset<T, UserPreferencesFindFirstArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPreferences that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesFindFirstOrThrowArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPreferencesFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPreferencesFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPreferences
     * const userPreferences = await prisma.userPreferences.findMany()
     * 
     * // Get first 10 UserPreferences
     * const userPreferences = await prisma.userPreferences.findMany({ take: 10 })
     * 
     * // Only select the `walletAddress`
     * const userPreferencesWithWalletAddressOnly = await prisma.userPreferences.findMany({ select: { walletAddress: true } })
     * 
     */
    findMany<T extends UserPreferencesFindManyArgs>(args?: SelectSubset<T, UserPreferencesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserPreferences.
     * @param {UserPreferencesCreateArgs} args - Arguments to create a UserPreferences.
     * @example
     * // Create one UserPreferences
     * const UserPreferences = await prisma.userPreferences.create({
     *   data: {
     *     // ... data to create a UserPreferences
     *   }
     * })
     * 
     */
    create<T extends UserPreferencesCreateArgs>(args: SelectSubset<T, UserPreferencesCreateArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserPreferences.
     * @param {UserPreferencesCreateManyArgs} args - Arguments to create many UserPreferences.
     * @example
     * // Create many UserPreferences
     * const userPreferences = await prisma.userPreferences.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPreferencesCreateManyArgs>(args?: SelectSubset<T, UserPreferencesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPreferences and returns the data saved in the database.
     * @param {UserPreferencesCreateManyAndReturnArgs} args - Arguments to create many UserPreferences.
     * @example
     * // Create many UserPreferences
     * const userPreferences = await prisma.userPreferences.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPreferences and only return the `walletAddress`
     * const userPreferencesWithWalletAddressOnly = await prisma.userPreferences.createManyAndReturn({
     *   select: { walletAddress: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPreferencesCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPreferencesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserPreferences.
     * @param {UserPreferencesDeleteArgs} args - Arguments to delete one UserPreferences.
     * @example
     * // Delete one UserPreferences
     * const UserPreferences = await prisma.userPreferences.delete({
     *   where: {
     *     // ... filter to delete one UserPreferences
     *   }
     * })
     * 
     */
    delete<T extends UserPreferencesDeleteArgs>(args: SelectSubset<T, UserPreferencesDeleteArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserPreferences.
     * @param {UserPreferencesUpdateArgs} args - Arguments to update one UserPreferences.
     * @example
     * // Update one UserPreferences
     * const userPreferences = await prisma.userPreferences.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPreferencesUpdateArgs>(args: SelectSubset<T, UserPreferencesUpdateArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserPreferences.
     * @param {UserPreferencesDeleteManyArgs} args - Arguments to filter UserPreferences to delete.
     * @example
     * // Delete a few UserPreferences
     * const { count } = await prisma.userPreferences.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPreferencesDeleteManyArgs>(args?: SelectSubset<T, UserPreferencesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPreferences
     * const userPreferences = await prisma.userPreferences.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPreferencesUpdateManyArgs>(args: SelectSubset<T, UserPreferencesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPreferences and returns the data updated in the database.
     * @param {UserPreferencesUpdateManyAndReturnArgs} args - Arguments to update many UserPreferences.
     * @example
     * // Update many UserPreferences
     * const userPreferences = await prisma.userPreferences.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserPreferences and only return the `walletAddress`
     * const userPreferencesWithWalletAddressOnly = await prisma.userPreferences.updateManyAndReturn({
     *   select: { walletAddress: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserPreferencesUpdateManyAndReturnArgs>(args: SelectSubset<T, UserPreferencesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserPreferences.
     * @param {UserPreferencesUpsertArgs} args - Arguments to update or create a UserPreferences.
     * @example
     * // Update or create a UserPreferences
     * const userPreferences = await prisma.userPreferences.upsert({
     *   create: {
     *     // ... data to create a UserPreferences
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPreferences we want to update
     *   }
     * })
     */
    upsert<T extends UserPreferencesUpsertArgs>(args: SelectSubset<T, UserPreferencesUpsertArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesCountArgs} args - Arguments to filter UserPreferences to count.
     * @example
     * // Count the number of UserPreferences
     * const count = await prisma.userPreferences.count({
     *   where: {
     *     // ... the filter for the UserPreferences we want to count
     *   }
     * })
    **/
    count<T extends UserPreferencesCountArgs>(
      args?: Subset<T, UserPreferencesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPreferencesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPreferencesAggregateArgs>(args: Subset<T, UserPreferencesAggregateArgs>): Prisma.PrismaPromise<GetUserPreferencesAggregateType<T>>

    /**
     * Group by UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPreferencesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPreferencesGroupByArgs['orderBy'] }
        : { orderBy?: UserPreferencesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPreferencesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPreferencesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPreferences model
   */
  readonly fields: UserPreferencesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPreferences.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPreferencesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPreferences model
   */
  interface UserPreferencesFieldRefs {
    readonly walletAddress: FieldRef<"UserPreferences", 'String'>
    readonly emailNotifications: FieldRef<"UserPreferences", 'Boolean'>
    readonly pushNotifications: FieldRef<"UserPreferences", 'Boolean'>
    readonly marketingEmails: FieldRef<"UserPreferences", 'Boolean'>
    readonly privacyLevel: FieldRef<"UserPreferences", 'PrivacyLevel'>
    readonly language: FieldRef<"UserPreferences", 'String'>
    readonly timezone: FieldRef<"UserPreferences", 'String'>
    readonly autoLinkProfile: FieldRef<"UserPreferences", 'Boolean'>
    readonly showPremiumBadge: FieldRef<"UserPreferences", 'Boolean'>
    readonly createdAt: FieldRef<"UserPreferences", 'DateTime'>
    readonly updatedAt: FieldRef<"UserPreferences", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserPreferences findUnique
   */
  export type UserPreferencesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreferences
     */
    omit?: UserPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences findUniqueOrThrow
   */
  export type UserPreferencesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreferences
     */
    omit?: UserPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences findFirst
   */
  export type UserPreferencesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreferences
     */
    omit?: UserPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferencesScalarFieldEnum | UserPreferencesScalarFieldEnum[]
  }

  /**
   * UserPreferences findFirstOrThrow
   */
  export type UserPreferencesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreferences
     */
    omit?: UserPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferencesScalarFieldEnum | UserPreferencesScalarFieldEnum[]
  }

  /**
   * UserPreferences findMany
   */
  export type UserPreferencesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreferences
     */
    omit?: UserPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPreferences.
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    distinct?: UserPreferencesScalarFieldEnum | UserPreferencesScalarFieldEnum[]
  }

  /**
   * UserPreferences create
   */
  export type UserPreferencesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreferences
     */
    omit?: UserPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPreferences.
     */
    data: XOR<UserPreferencesCreateInput, UserPreferencesUncheckedCreateInput>
  }

  /**
   * UserPreferences createMany
   */
  export type UserPreferencesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPreferences.
     */
    data: UserPreferencesCreateManyInput | UserPreferencesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPreferences createManyAndReturn
   */
  export type UserPreferencesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreferences
     */
    omit?: UserPreferencesOmit<ExtArgs> | null
    /**
     * The data used to create many UserPreferences.
     */
    data: UserPreferencesCreateManyInput | UserPreferencesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPreferences update
   */
  export type UserPreferencesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreferences
     */
    omit?: UserPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPreferences.
     */
    data: XOR<UserPreferencesUpdateInput, UserPreferencesUncheckedUpdateInput>
    /**
     * Choose, which UserPreferences to update.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences updateMany
   */
  export type UserPreferencesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPreferences.
     */
    data: XOR<UserPreferencesUpdateManyMutationInput, UserPreferencesUncheckedUpdateManyInput>
    /**
     * Filter which UserPreferences to update
     */
    where?: UserPreferencesWhereInput
    /**
     * Limit how many UserPreferences to update.
     */
    limit?: number
  }

  /**
   * UserPreferences updateManyAndReturn
   */
  export type UserPreferencesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreferences
     */
    omit?: UserPreferencesOmit<ExtArgs> | null
    /**
     * The data used to update UserPreferences.
     */
    data: XOR<UserPreferencesUpdateManyMutationInput, UserPreferencesUncheckedUpdateManyInput>
    /**
     * Filter which UserPreferences to update
     */
    where?: UserPreferencesWhereInput
    /**
     * Limit how many UserPreferences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPreferences upsert
   */
  export type UserPreferencesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreferences
     */
    omit?: UserPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPreferences to update in case it exists.
     */
    where: UserPreferencesWhereUniqueInput
    /**
     * In case the UserPreferences found by the `where` argument doesn't exist, create a new UserPreferences with this data.
     */
    create: XOR<UserPreferencesCreateInput, UserPreferencesUncheckedCreateInput>
    /**
     * In case the UserPreferences was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPreferencesUpdateInput, UserPreferencesUncheckedUpdateInput>
  }

  /**
   * UserPreferences delete
   */
  export type UserPreferencesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreferences
     */
    omit?: UserPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter which UserPreferences to delete.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences deleteMany
   */
  export type UserPreferencesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreferences to delete
     */
    where?: UserPreferencesWhereInput
    /**
     * Limit how many UserPreferences to delete.
     */
    limit?: number
  }

  /**
   * UserPreferences without action
   */
  export type UserPreferencesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPreferences
     */
    omit?: UserPreferencesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
  }


  /**
   * Model UserStats
   */

  export type AggregateUserStats = {
    _count: UserStatsCountAggregateOutputType | null
    _avg: UserStatsAvgAggregateOutputType | null
    _sum: UserStatsSumAggregateOutputType | null
    _min: UserStatsMinAggregateOutputType | null
    _max: UserStatsMaxAggregateOutputType | null
  }

  export type UserStatsAvgAggregateOutputType = {
    totalPosts: number | null
    totalComments: number | null
    totalLikes: number | null
    totalFollowers: number | null
    totalFollowing: number | null
    daysAsPremium: number | null
    referralCount: number | null
    totalEarnings: Decimal | null
    questsCompleted: number | null
    questsInProgress: number | null
  }

  export type UserStatsSumAggregateOutputType = {
    totalPosts: number | null
    totalComments: number | null
    totalLikes: number | null
    totalFollowers: number | null
    totalFollowing: number | null
    daysAsPremium: number | null
    referralCount: number | null
    totalEarnings: Decimal | null
    questsCompleted: number | null
    questsInProgress: number | null
  }

  export type UserStatsMinAggregateOutputType = {
    walletAddress: string | null
    totalPosts: number | null
    totalComments: number | null
    totalLikes: number | null
    totalFollowers: number | null
    totalFollowing: number | null
    daysAsPremium: number | null
    referralCount: number | null
    totalEarnings: Decimal | null
    questsCompleted: number | null
    questsInProgress: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserStatsMaxAggregateOutputType = {
    walletAddress: string | null
    totalPosts: number | null
    totalComments: number | null
    totalLikes: number | null
    totalFollowers: number | null
    totalFollowing: number | null
    daysAsPremium: number | null
    referralCount: number | null
    totalEarnings: Decimal | null
    questsCompleted: number | null
    questsInProgress: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserStatsCountAggregateOutputType = {
    walletAddress: number
    totalPosts: number
    totalComments: number
    totalLikes: number
    totalFollowers: number
    totalFollowing: number
    daysAsPremium: number
    referralCount: number
    totalEarnings: number
    questsCompleted: number
    questsInProgress: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserStatsAvgAggregateInputType = {
    totalPosts?: true
    totalComments?: true
    totalLikes?: true
    totalFollowers?: true
    totalFollowing?: true
    daysAsPremium?: true
    referralCount?: true
    totalEarnings?: true
    questsCompleted?: true
    questsInProgress?: true
  }

  export type UserStatsSumAggregateInputType = {
    totalPosts?: true
    totalComments?: true
    totalLikes?: true
    totalFollowers?: true
    totalFollowing?: true
    daysAsPremium?: true
    referralCount?: true
    totalEarnings?: true
    questsCompleted?: true
    questsInProgress?: true
  }

  export type UserStatsMinAggregateInputType = {
    walletAddress?: true
    totalPosts?: true
    totalComments?: true
    totalLikes?: true
    totalFollowers?: true
    totalFollowing?: true
    daysAsPremium?: true
    referralCount?: true
    totalEarnings?: true
    questsCompleted?: true
    questsInProgress?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserStatsMaxAggregateInputType = {
    walletAddress?: true
    totalPosts?: true
    totalComments?: true
    totalLikes?: true
    totalFollowers?: true
    totalFollowing?: true
    daysAsPremium?: true
    referralCount?: true
    totalEarnings?: true
    questsCompleted?: true
    questsInProgress?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserStatsCountAggregateInputType = {
    walletAddress?: true
    totalPosts?: true
    totalComments?: true
    totalLikes?: true
    totalFollowers?: true
    totalFollowing?: true
    daysAsPremium?: true
    referralCount?: true
    totalEarnings?: true
    questsCompleted?: true
    questsInProgress?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStats to aggregate.
     */
    where?: UserStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStats to fetch.
     */
    orderBy?: UserStatsOrderByWithRelationInput | UserStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserStats
    **/
    _count?: true | UserStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserStatsMaxAggregateInputType
  }

  export type GetUserStatsAggregateType<T extends UserStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserStats[P]>
      : GetScalarType<T[P], AggregateUserStats[P]>
  }




  export type UserStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStatsWhereInput
    orderBy?: UserStatsOrderByWithAggregationInput | UserStatsOrderByWithAggregationInput[]
    by: UserStatsScalarFieldEnum[] | UserStatsScalarFieldEnum
    having?: UserStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserStatsCountAggregateInputType | true
    _avg?: UserStatsAvgAggregateInputType
    _sum?: UserStatsSumAggregateInputType
    _min?: UserStatsMinAggregateInputType
    _max?: UserStatsMaxAggregateInputType
  }

  export type UserStatsGroupByOutputType = {
    walletAddress: string
    totalPosts: number
    totalComments: number
    totalLikes: number
    totalFollowers: number
    totalFollowing: number
    daysAsPremium: number
    referralCount: number
    totalEarnings: Decimal
    questsCompleted: number
    questsInProgress: number
    createdAt: Date
    updatedAt: Date
    _count: UserStatsCountAggregateOutputType | null
    _avg: UserStatsAvgAggregateOutputType | null
    _sum: UserStatsSumAggregateOutputType | null
    _min: UserStatsMinAggregateOutputType | null
    _max: UserStatsMaxAggregateOutputType | null
  }

  type GetUserStatsGroupByPayload<T extends UserStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserStatsGroupByOutputType[P]>
            : GetScalarType<T[P], UserStatsGroupByOutputType[P]>
        }
      >
    >


  export type UserStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    walletAddress?: boolean
    totalPosts?: boolean
    totalComments?: boolean
    totalLikes?: boolean
    totalFollowers?: boolean
    totalFollowing?: boolean
    daysAsPremium?: boolean
    referralCount?: boolean
    totalEarnings?: boolean
    questsCompleted?: boolean
    questsInProgress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStats"]>

  export type UserStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    walletAddress?: boolean
    totalPosts?: boolean
    totalComments?: boolean
    totalLikes?: boolean
    totalFollowers?: boolean
    totalFollowing?: boolean
    daysAsPremium?: boolean
    referralCount?: boolean
    totalEarnings?: boolean
    questsCompleted?: boolean
    questsInProgress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStats"]>

  export type UserStatsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    walletAddress?: boolean
    totalPosts?: boolean
    totalComments?: boolean
    totalLikes?: boolean
    totalFollowers?: boolean
    totalFollowing?: boolean
    daysAsPremium?: boolean
    referralCount?: boolean
    totalEarnings?: boolean
    questsCompleted?: boolean
    questsInProgress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStats"]>

  export type UserStatsSelectScalar = {
    walletAddress?: boolean
    totalPosts?: boolean
    totalComments?: boolean
    totalLikes?: boolean
    totalFollowers?: boolean
    totalFollowing?: boolean
    daysAsPremium?: boolean
    referralCount?: boolean
    totalEarnings?: boolean
    questsCompleted?: boolean
    questsInProgress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserStatsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"walletAddress" | "totalPosts" | "totalComments" | "totalLikes" | "totalFollowers" | "totalFollowing" | "daysAsPremium" | "referralCount" | "totalEarnings" | "questsCompleted" | "questsInProgress" | "createdAt" | "updatedAt", ExtArgs["result"]["userStats"]>
  export type UserStatsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserStatsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserStatsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserStats"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      walletAddress: string
      totalPosts: number
      totalComments: number
      totalLikes: number
      totalFollowers: number
      totalFollowing: number
      daysAsPremium: number
      referralCount: number
      totalEarnings: Prisma.Decimal
      questsCompleted: number
      questsInProgress: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userStats"]>
    composites: {}
  }

  type UserStatsGetPayload<S extends boolean | null | undefined | UserStatsDefaultArgs> = $Result.GetResult<Prisma.$UserStatsPayload, S>

  type UserStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserStatsCountAggregateInputType | true
    }

  export interface UserStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserStats'], meta: { name: 'UserStats' } }
    /**
     * Find zero or one UserStats that matches the filter.
     * @param {UserStatsFindUniqueArgs} args - Arguments to find a UserStats
     * @example
     * // Get one UserStats
     * const userStats = await prisma.userStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserStatsFindUniqueArgs>(args: SelectSubset<T, UserStatsFindUniqueArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserStats that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserStatsFindUniqueOrThrowArgs} args - Arguments to find a UserStats
     * @example
     * // Get one UserStats
     * const userStats = await prisma.userStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, UserStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatsFindFirstArgs} args - Arguments to find a UserStats
     * @example
     * // Get one UserStats
     * const userStats = await prisma.userStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserStatsFindFirstArgs>(args?: SelectSubset<T, UserStatsFindFirstArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatsFindFirstOrThrowArgs} args - Arguments to find a UserStats
     * @example
     * // Get one UserStats
     * const userStats = await prisma.userStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, UserStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserStats
     * const userStats = await prisma.userStats.findMany()
     * 
     * // Get first 10 UserStats
     * const userStats = await prisma.userStats.findMany({ take: 10 })
     * 
     * // Only select the `walletAddress`
     * const userStatsWithWalletAddressOnly = await prisma.userStats.findMany({ select: { walletAddress: true } })
     * 
     */
    findMany<T extends UserStatsFindManyArgs>(args?: SelectSubset<T, UserStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserStats.
     * @param {UserStatsCreateArgs} args - Arguments to create a UserStats.
     * @example
     * // Create one UserStats
     * const UserStats = await prisma.userStats.create({
     *   data: {
     *     // ... data to create a UserStats
     *   }
     * })
     * 
     */
    create<T extends UserStatsCreateArgs>(args: SelectSubset<T, UserStatsCreateArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserStats.
     * @param {UserStatsCreateManyArgs} args - Arguments to create many UserStats.
     * @example
     * // Create many UserStats
     * const userStats = await prisma.userStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserStatsCreateManyArgs>(args?: SelectSubset<T, UserStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserStats and returns the data saved in the database.
     * @param {UserStatsCreateManyAndReturnArgs} args - Arguments to create many UserStats.
     * @example
     * // Create many UserStats
     * const userStats = await prisma.userStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserStats and only return the `walletAddress`
     * const userStatsWithWalletAddressOnly = await prisma.userStats.createManyAndReturn({
     *   select: { walletAddress: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, UserStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserStats.
     * @param {UserStatsDeleteArgs} args - Arguments to delete one UserStats.
     * @example
     * // Delete one UserStats
     * const UserStats = await prisma.userStats.delete({
     *   where: {
     *     // ... filter to delete one UserStats
     *   }
     * })
     * 
     */
    delete<T extends UserStatsDeleteArgs>(args: SelectSubset<T, UserStatsDeleteArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserStats.
     * @param {UserStatsUpdateArgs} args - Arguments to update one UserStats.
     * @example
     * // Update one UserStats
     * const userStats = await prisma.userStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserStatsUpdateArgs>(args: SelectSubset<T, UserStatsUpdateArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserStats.
     * @param {UserStatsDeleteManyArgs} args - Arguments to filter UserStats to delete.
     * @example
     * // Delete a few UserStats
     * const { count } = await prisma.userStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserStatsDeleteManyArgs>(args?: SelectSubset<T, UserStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserStats
     * const userStats = await prisma.userStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserStatsUpdateManyArgs>(args: SelectSubset<T, UserStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStats and returns the data updated in the database.
     * @param {UserStatsUpdateManyAndReturnArgs} args - Arguments to update many UserStats.
     * @example
     * // Update many UserStats
     * const userStats = await prisma.userStats.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserStats and only return the `walletAddress`
     * const userStatsWithWalletAddressOnly = await prisma.userStats.updateManyAndReturn({
     *   select: { walletAddress: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserStatsUpdateManyAndReturnArgs>(args: SelectSubset<T, UserStatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserStats.
     * @param {UserStatsUpsertArgs} args - Arguments to update or create a UserStats.
     * @example
     * // Update or create a UserStats
     * const userStats = await prisma.userStats.upsert({
     *   create: {
     *     // ... data to create a UserStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserStats we want to update
     *   }
     * })
     */
    upsert<T extends UserStatsUpsertArgs>(args: SelectSubset<T, UserStatsUpsertArgs<ExtArgs>>): Prisma__UserStatsClient<$Result.GetResult<Prisma.$UserStatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatsCountArgs} args - Arguments to filter UserStats to count.
     * @example
     * // Count the number of UserStats
     * const count = await prisma.userStats.count({
     *   where: {
     *     // ... the filter for the UserStats we want to count
     *   }
     * })
    **/
    count<T extends UserStatsCountArgs>(
      args?: Subset<T, UserStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserStatsAggregateArgs>(args: Subset<T, UserStatsAggregateArgs>): Prisma.PrismaPromise<GetUserStatsAggregateType<T>>

    /**
     * Group by UserStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserStatsGroupByArgs['orderBy'] }
        : { orderBy?: UserStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserStats model
   */
  readonly fields: UserStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserStats model
   */
  interface UserStatsFieldRefs {
    readonly walletAddress: FieldRef<"UserStats", 'String'>
    readonly totalPosts: FieldRef<"UserStats", 'Int'>
    readonly totalComments: FieldRef<"UserStats", 'Int'>
    readonly totalLikes: FieldRef<"UserStats", 'Int'>
    readonly totalFollowers: FieldRef<"UserStats", 'Int'>
    readonly totalFollowing: FieldRef<"UserStats", 'Int'>
    readonly daysAsPremium: FieldRef<"UserStats", 'Int'>
    readonly referralCount: FieldRef<"UserStats", 'Int'>
    readonly totalEarnings: FieldRef<"UserStats", 'Decimal'>
    readonly questsCompleted: FieldRef<"UserStats", 'Int'>
    readonly questsInProgress: FieldRef<"UserStats", 'Int'>
    readonly createdAt: FieldRef<"UserStats", 'DateTime'>
    readonly updatedAt: FieldRef<"UserStats", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserStats findUnique
   */
  export type UserStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStats
     */
    omit?: UserStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * Filter, which UserStats to fetch.
     */
    where: UserStatsWhereUniqueInput
  }

  /**
   * UserStats findUniqueOrThrow
   */
  export type UserStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStats
     */
    omit?: UserStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * Filter, which UserStats to fetch.
     */
    where: UserStatsWhereUniqueInput
  }

  /**
   * UserStats findFirst
   */
  export type UserStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStats
     */
    omit?: UserStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * Filter, which UserStats to fetch.
     */
    where?: UserStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStats to fetch.
     */
    orderBy?: UserStatsOrderByWithRelationInput | UserStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStats.
     */
    cursor?: UserStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStats.
     */
    distinct?: UserStatsScalarFieldEnum | UserStatsScalarFieldEnum[]
  }

  /**
   * UserStats findFirstOrThrow
   */
  export type UserStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStats
     */
    omit?: UserStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * Filter, which UserStats to fetch.
     */
    where?: UserStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStats to fetch.
     */
    orderBy?: UserStatsOrderByWithRelationInput | UserStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStats.
     */
    cursor?: UserStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStats.
     */
    distinct?: UserStatsScalarFieldEnum | UserStatsScalarFieldEnum[]
  }

  /**
   * UserStats findMany
   */
  export type UserStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStats
     */
    omit?: UserStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * Filter, which UserStats to fetch.
     */
    where?: UserStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStats to fetch.
     */
    orderBy?: UserStatsOrderByWithRelationInput | UserStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserStats.
     */
    cursor?: UserStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStats.
     */
    skip?: number
    distinct?: UserStatsScalarFieldEnum | UserStatsScalarFieldEnum[]
  }

  /**
   * UserStats create
   */
  export type UserStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStats
     */
    omit?: UserStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * The data needed to create a UserStats.
     */
    data: XOR<UserStatsCreateInput, UserStatsUncheckedCreateInput>
  }

  /**
   * UserStats createMany
   */
  export type UserStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserStats.
     */
    data: UserStatsCreateManyInput | UserStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserStats createManyAndReturn
   */
  export type UserStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserStats
     */
    omit?: UserStatsOmit<ExtArgs> | null
    /**
     * The data used to create many UserStats.
     */
    data: UserStatsCreateManyInput | UserStatsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStats update
   */
  export type UserStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStats
     */
    omit?: UserStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * The data needed to update a UserStats.
     */
    data: XOR<UserStatsUpdateInput, UserStatsUncheckedUpdateInput>
    /**
     * Choose, which UserStats to update.
     */
    where: UserStatsWhereUniqueInput
  }

  /**
   * UserStats updateMany
   */
  export type UserStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserStats.
     */
    data: XOR<UserStatsUpdateManyMutationInput, UserStatsUncheckedUpdateManyInput>
    /**
     * Filter which UserStats to update
     */
    where?: UserStatsWhereInput
    /**
     * Limit how many UserStats to update.
     */
    limit?: number
  }

  /**
   * UserStats updateManyAndReturn
   */
  export type UserStatsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserStats
     */
    omit?: UserStatsOmit<ExtArgs> | null
    /**
     * The data used to update UserStats.
     */
    data: XOR<UserStatsUpdateManyMutationInput, UserStatsUncheckedUpdateManyInput>
    /**
     * Filter which UserStats to update
     */
    where?: UserStatsWhereInput
    /**
     * Limit how many UserStats to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStats upsert
   */
  export type UserStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStats
     */
    omit?: UserStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * The filter to search for the UserStats to update in case it exists.
     */
    where: UserStatsWhereUniqueInput
    /**
     * In case the UserStats found by the `where` argument doesn't exist, create a new UserStats with this data.
     */
    create: XOR<UserStatsCreateInput, UserStatsUncheckedCreateInput>
    /**
     * In case the UserStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserStatsUpdateInput, UserStatsUncheckedUpdateInput>
  }

  /**
   * UserStats delete
   */
  export type UserStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStats
     */
    omit?: UserStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
    /**
     * Filter which UserStats to delete.
     */
    where: UserStatsWhereUniqueInput
  }

  /**
   * UserStats deleteMany
   */
  export type UserStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStats to delete
     */
    where?: UserStatsWhereInput
    /**
     * Limit how many UserStats to delete.
     */
    limit?: number
  }

  /**
   * UserStats without action
   */
  export type UserStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStats
     */
    select?: UserStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStats
     */
    omit?: UserStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatsInclude<ExtArgs> | null
  }


  /**
   * Model UserReward
   */

  export type AggregateUserReward = {
    _count: UserRewardCountAggregateOutputType | null
    _avg: UserRewardAvgAggregateOutputType | null
    _sum: UserRewardSumAggregateOutputType | null
    _min: UserRewardMinAggregateOutputType | null
    _max: UserRewardMaxAggregateOutputType | null
  }

  export type UserRewardAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type UserRewardSumAggregateOutputType = {
    amount: Decimal | null
  }

  export type UserRewardMinAggregateOutputType = {
    id: string | null
    walletAddress: string | null
    type: $Enums.RewardType | null
    amount: Decimal | null
    currency: string | null
    status: $Enums.RewardStatus | null
    sourceType: $Enums.RewardSourceType | null
    sourceId: string | null
    txHash: string | null
    claimedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserRewardMaxAggregateOutputType = {
    id: string | null
    walletAddress: string | null
    type: $Enums.RewardType | null
    amount: Decimal | null
    currency: string | null
    status: $Enums.RewardStatus | null
    sourceType: $Enums.RewardSourceType | null
    sourceId: string | null
    txHash: string | null
    claimedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserRewardCountAggregateOutputType = {
    id: number
    walletAddress: number
    type: number
    amount: number
    currency: number
    status: number
    sourceType: number
    sourceId: number
    sourceMetadata: number
    txHash: number
    claimedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserRewardAvgAggregateInputType = {
    amount?: true
  }

  export type UserRewardSumAggregateInputType = {
    amount?: true
  }

  export type UserRewardMinAggregateInputType = {
    id?: true
    walletAddress?: true
    type?: true
    amount?: true
    currency?: true
    status?: true
    sourceType?: true
    sourceId?: true
    txHash?: true
    claimedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserRewardMaxAggregateInputType = {
    id?: true
    walletAddress?: true
    type?: true
    amount?: true
    currency?: true
    status?: true
    sourceType?: true
    sourceId?: true
    txHash?: true
    claimedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserRewardCountAggregateInputType = {
    id?: true
    walletAddress?: true
    type?: true
    amount?: true
    currency?: true
    status?: true
    sourceType?: true
    sourceId?: true
    sourceMetadata?: true
    txHash?: true
    claimedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserRewardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserReward to aggregate.
     */
    where?: UserRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRewards to fetch.
     */
    orderBy?: UserRewardOrderByWithRelationInput | UserRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRewards
    **/
    _count?: true | UserRewardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRewardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRewardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRewardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRewardMaxAggregateInputType
  }

  export type GetUserRewardAggregateType<T extends UserRewardAggregateArgs> = {
        [P in keyof T & keyof AggregateUserReward]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserReward[P]>
      : GetScalarType<T[P], AggregateUserReward[P]>
  }




  export type UserRewardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRewardWhereInput
    orderBy?: UserRewardOrderByWithAggregationInput | UserRewardOrderByWithAggregationInput[]
    by: UserRewardScalarFieldEnum[] | UserRewardScalarFieldEnum
    having?: UserRewardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRewardCountAggregateInputType | true
    _avg?: UserRewardAvgAggregateInputType
    _sum?: UserRewardSumAggregateInputType
    _min?: UserRewardMinAggregateInputType
    _max?: UserRewardMaxAggregateInputType
  }

  export type UserRewardGroupByOutputType = {
    id: string
    walletAddress: string
    type: $Enums.RewardType
    amount: Decimal
    currency: string
    status: $Enums.RewardStatus
    sourceType: $Enums.RewardSourceType
    sourceId: string | null
    sourceMetadata: JsonValue | null
    txHash: string | null
    claimedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserRewardCountAggregateOutputType | null
    _avg: UserRewardAvgAggregateOutputType | null
    _sum: UserRewardSumAggregateOutputType | null
    _min: UserRewardMinAggregateOutputType | null
    _max: UserRewardMaxAggregateOutputType | null
  }

  type GetUserRewardGroupByPayload<T extends UserRewardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRewardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRewardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRewardGroupByOutputType[P]>
            : GetScalarType<T[P], UserRewardGroupByOutputType[P]>
        }
      >
    >


  export type UserRewardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    sourceType?: boolean
    sourceId?: boolean
    sourceMetadata?: boolean
    txHash?: boolean
    claimedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReward"]>

  export type UserRewardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    sourceType?: boolean
    sourceId?: boolean
    sourceMetadata?: boolean
    txHash?: boolean
    claimedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReward"]>

  export type UserRewardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    sourceType?: boolean
    sourceId?: boolean
    sourceMetadata?: boolean
    txHash?: boolean
    claimedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReward"]>

  export type UserRewardSelectScalar = {
    id?: boolean
    walletAddress?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    sourceType?: boolean
    sourceId?: boolean
    sourceMetadata?: boolean
    txHash?: boolean
    claimedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserRewardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "walletAddress" | "type" | "amount" | "currency" | "status" | "sourceType" | "sourceId" | "sourceMetadata" | "txHash" | "claimedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["userReward"]>
  export type UserRewardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserRewardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserRewardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserRewardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserReward"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      walletAddress: string
      type: $Enums.RewardType
      amount: Prisma.Decimal
      currency: string
      status: $Enums.RewardStatus
      sourceType: $Enums.RewardSourceType
      sourceId: string | null
      sourceMetadata: Prisma.JsonValue | null
      txHash: string | null
      claimedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userReward"]>
    composites: {}
  }

  type UserRewardGetPayload<S extends boolean | null | undefined | UserRewardDefaultArgs> = $Result.GetResult<Prisma.$UserRewardPayload, S>

  type UserRewardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserRewardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserRewardCountAggregateInputType | true
    }

  export interface UserRewardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserReward'], meta: { name: 'UserReward' } }
    /**
     * Find zero or one UserReward that matches the filter.
     * @param {UserRewardFindUniqueArgs} args - Arguments to find a UserReward
     * @example
     * // Get one UserReward
     * const userReward = await prisma.userReward.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRewardFindUniqueArgs>(args: SelectSubset<T, UserRewardFindUniqueArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserReward that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserRewardFindUniqueOrThrowArgs} args - Arguments to find a UserReward
     * @example
     * // Get one UserReward
     * const userReward = await prisma.userReward.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRewardFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRewardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserReward that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardFindFirstArgs} args - Arguments to find a UserReward
     * @example
     * // Get one UserReward
     * const userReward = await prisma.userReward.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRewardFindFirstArgs>(args?: SelectSubset<T, UserRewardFindFirstArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserReward that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardFindFirstOrThrowArgs} args - Arguments to find a UserReward
     * @example
     * // Get one UserReward
     * const userReward = await prisma.userReward.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRewardFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRewardFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserRewards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRewards
     * const userRewards = await prisma.userReward.findMany()
     * 
     * // Get first 10 UserRewards
     * const userRewards = await prisma.userReward.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRewardWithIdOnly = await prisma.userReward.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserRewardFindManyArgs>(args?: SelectSubset<T, UserRewardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserReward.
     * @param {UserRewardCreateArgs} args - Arguments to create a UserReward.
     * @example
     * // Create one UserReward
     * const UserReward = await prisma.userReward.create({
     *   data: {
     *     // ... data to create a UserReward
     *   }
     * })
     * 
     */
    create<T extends UserRewardCreateArgs>(args: SelectSubset<T, UserRewardCreateArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserRewards.
     * @param {UserRewardCreateManyArgs} args - Arguments to create many UserRewards.
     * @example
     * // Create many UserRewards
     * const userReward = await prisma.userReward.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRewardCreateManyArgs>(args?: SelectSubset<T, UserRewardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRewards and returns the data saved in the database.
     * @param {UserRewardCreateManyAndReturnArgs} args - Arguments to create many UserRewards.
     * @example
     * // Create many UserRewards
     * const userReward = await prisma.userReward.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRewards and only return the `id`
     * const userRewardWithIdOnly = await prisma.userReward.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRewardCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRewardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserReward.
     * @param {UserRewardDeleteArgs} args - Arguments to delete one UserReward.
     * @example
     * // Delete one UserReward
     * const UserReward = await prisma.userReward.delete({
     *   where: {
     *     // ... filter to delete one UserReward
     *   }
     * })
     * 
     */
    delete<T extends UserRewardDeleteArgs>(args: SelectSubset<T, UserRewardDeleteArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserReward.
     * @param {UserRewardUpdateArgs} args - Arguments to update one UserReward.
     * @example
     * // Update one UserReward
     * const userReward = await prisma.userReward.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRewardUpdateArgs>(args: SelectSubset<T, UserRewardUpdateArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserRewards.
     * @param {UserRewardDeleteManyArgs} args - Arguments to filter UserRewards to delete.
     * @example
     * // Delete a few UserRewards
     * const { count } = await prisma.userReward.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRewardDeleteManyArgs>(args?: SelectSubset<T, UserRewardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRewards
     * const userReward = await prisma.userReward.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRewardUpdateManyArgs>(args: SelectSubset<T, UserRewardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRewards and returns the data updated in the database.
     * @param {UserRewardUpdateManyAndReturnArgs} args - Arguments to update many UserRewards.
     * @example
     * // Update many UserRewards
     * const userReward = await prisma.userReward.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserRewards and only return the `id`
     * const userRewardWithIdOnly = await prisma.userReward.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserRewardUpdateManyAndReturnArgs>(args: SelectSubset<T, UserRewardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserReward.
     * @param {UserRewardUpsertArgs} args - Arguments to update or create a UserReward.
     * @example
     * // Update or create a UserReward
     * const userReward = await prisma.userReward.upsert({
     *   create: {
     *     // ... data to create a UserReward
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserReward we want to update
     *   }
     * })
     */
    upsert<T extends UserRewardUpsertArgs>(args: SelectSubset<T, UserRewardUpsertArgs<ExtArgs>>): Prisma__UserRewardClient<$Result.GetResult<Prisma.$UserRewardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserRewards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardCountArgs} args - Arguments to filter UserRewards to count.
     * @example
     * // Count the number of UserRewards
     * const count = await prisma.userReward.count({
     *   where: {
     *     // ... the filter for the UserRewards we want to count
     *   }
     * })
    **/
    count<T extends UserRewardCountArgs>(
      args?: Subset<T, UserRewardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRewardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserReward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRewardAggregateArgs>(args: Subset<T, UserRewardAggregateArgs>): Prisma.PrismaPromise<GetUserRewardAggregateType<T>>

    /**
     * Group by UserReward.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRewardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRewardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRewardGroupByArgs['orderBy'] }
        : { orderBy?: UserRewardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRewardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRewardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserReward model
   */
  readonly fields: UserRewardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserReward.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRewardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserReward model
   */
  interface UserRewardFieldRefs {
    readonly id: FieldRef<"UserReward", 'String'>
    readonly walletAddress: FieldRef<"UserReward", 'String'>
    readonly type: FieldRef<"UserReward", 'RewardType'>
    readonly amount: FieldRef<"UserReward", 'Decimal'>
    readonly currency: FieldRef<"UserReward", 'String'>
    readonly status: FieldRef<"UserReward", 'RewardStatus'>
    readonly sourceType: FieldRef<"UserReward", 'RewardSourceType'>
    readonly sourceId: FieldRef<"UserReward", 'String'>
    readonly sourceMetadata: FieldRef<"UserReward", 'Json'>
    readonly txHash: FieldRef<"UserReward", 'String'>
    readonly claimedAt: FieldRef<"UserReward", 'DateTime'>
    readonly createdAt: FieldRef<"UserReward", 'DateTime'>
    readonly updatedAt: FieldRef<"UserReward", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserReward findUnique
   */
  export type UserRewardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter, which UserReward to fetch.
     */
    where: UserRewardWhereUniqueInput
  }

  /**
   * UserReward findUniqueOrThrow
   */
  export type UserRewardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter, which UserReward to fetch.
     */
    where: UserRewardWhereUniqueInput
  }

  /**
   * UserReward findFirst
   */
  export type UserRewardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter, which UserReward to fetch.
     */
    where?: UserRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRewards to fetch.
     */
    orderBy?: UserRewardOrderByWithRelationInput | UserRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRewards.
     */
    cursor?: UserRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRewards.
     */
    distinct?: UserRewardScalarFieldEnum | UserRewardScalarFieldEnum[]
  }

  /**
   * UserReward findFirstOrThrow
   */
  export type UserRewardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter, which UserReward to fetch.
     */
    where?: UserRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRewards to fetch.
     */
    orderBy?: UserRewardOrderByWithRelationInput | UserRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRewards.
     */
    cursor?: UserRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRewards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRewards.
     */
    distinct?: UserRewardScalarFieldEnum | UserRewardScalarFieldEnum[]
  }

  /**
   * UserReward findMany
   */
  export type UserRewardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter, which UserRewards to fetch.
     */
    where?: UserRewardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRewards to fetch.
     */
    orderBy?: UserRewardOrderByWithRelationInput | UserRewardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRewards.
     */
    cursor?: UserRewardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRewards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRewards.
     */
    skip?: number
    distinct?: UserRewardScalarFieldEnum | UserRewardScalarFieldEnum[]
  }

  /**
   * UserReward create
   */
  export type UserRewardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * The data needed to create a UserReward.
     */
    data: XOR<UserRewardCreateInput, UserRewardUncheckedCreateInput>
  }

  /**
   * UserReward createMany
   */
  export type UserRewardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRewards.
     */
    data: UserRewardCreateManyInput | UserRewardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserReward createManyAndReturn
   */
  export type UserRewardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * The data used to create many UserRewards.
     */
    data: UserRewardCreateManyInput | UserRewardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserReward update
   */
  export type UserRewardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * The data needed to update a UserReward.
     */
    data: XOR<UserRewardUpdateInput, UserRewardUncheckedUpdateInput>
    /**
     * Choose, which UserReward to update.
     */
    where: UserRewardWhereUniqueInput
  }

  /**
   * UserReward updateMany
   */
  export type UserRewardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRewards.
     */
    data: XOR<UserRewardUpdateManyMutationInput, UserRewardUncheckedUpdateManyInput>
    /**
     * Filter which UserRewards to update
     */
    where?: UserRewardWhereInput
    /**
     * Limit how many UserRewards to update.
     */
    limit?: number
  }

  /**
   * UserReward updateManyAndReturn
   */
  export type UserRewardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * The data used to update UserRewards.
     */
    data: XOR<UserRewardUpdateManyMutationInput, UserRewardUncheckedUpdateManyInput>
    /**
     * Filter which UserRewards to update
     */
    where?: UserRewardWhereInput
    /**
     * Limit how many UserRewards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserReward upsert
   */
  export type UserRewardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * The filter to search for the UserReward to update in case it exists.
     */
    where: UserRewardWhereUniqueInput
    /**
     * In case the UserReward found by the `where` argument doesn't exist, create a new UserReward with this data.
     */
    create: XOR<UserRewardCreateInput, UserRewardUncheckedCreateInput>
    /**
     * In case the UserReward was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRewardUpdateInput, UserRewardUncheckedUpdateInput>
  }

  /**
   * UserReward delete
   */
  export type UserRewardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
    /**
     * Filter which UserReward to delete.
     */
    where: UserRewardWhereUniqueInput
  }

  /**
   * UserReward deleteMany
   */
  export type UserRewardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRewards to delete
     */
    where?: UserRewardWhereInput
    /**
     * Limit how many UserRewards to delete.
     */
    limit?: number
  }

  /**
   * UserReward without action
   */
  export type UserRewardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReward
     */
    select?: UserRewardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserReward
     */
    omit?: UserRewardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRewardInclude<ExtArgs> | null
  }


  /**
   * Model UserQuest
   */

  export type AggregateUserQuest = {
    _count: UserQuestCountAggregateOutputType | null
    _avg: UserQuestAvgAggregateOutputType | null
    _sum: UserQuestSumAggregateOutputType | null
    _min: UserQuestMinAggregateOutputType | null
    _max: UserQuestMaxAggregateOutputType | null
  }

  export type UserQuestAvgAggregateOutputType = {
    currentProgress: number | null
    targetProgress: number | null
    rewardAmount: Decimal | null
  }

  export type UserQuestSumAggregateOutputType = {
    currentProgress: number | null
    targetProgress: number | null
    rewardAmount: Decimal | null
  }

  export type UserQuestMinAggregateOutputType = {
    id: string | null
    walletAddress: string | null
    questId: string | null
    title: string | null
    description: string | null
    type: $Enums.QuestType | null
    status: $Enums.QuestStatus | null
    currentProgress: number | null
    targetProgress: number | null
    rewardAmount: Decimal | null
    rewardCurrency: string | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserQuestMaxAggregateOutputType = {
    id: string | null
    walletAddress: string | null
    questId: string | null
    title: string | null
    description: string | null
    type: $Enums.QuestType | null
    status: $Enums.QuestStatus | null
    currentProgress: number | null
    targetProgress: number | null
    rewardAmount: Decimal | null
    rewardCurrency: string | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserQuestCountAggregateOutputType = {
    id: number
    walletAddress: number
    questId: number
    title: number
    description: number
    type: number
    status: number
    currentProgress: number
    targetProgress: number
    rewardAmount: number
    rewardCurrency: number
    completedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserQuestAvgAggregateInputType = {
    currentProgress?: true
    targetProgress?: true
    rewardAmount?: true
  }

  export type UserQuestSumAggregateInputType = {
    currentProgress?: true
    targetProgress?: true
    rewardAmount?: true
  }

  export type UserQuestMinAggregateInputType = {
    id?: true
    walletAddress?: true
    questId?: true
    title?: true
    description?: true
    type?: true
    status?: true
    currentProgress?: true
    targetProgress?: true
    rewardAmount?: true
    rewardCurrency?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserQuestMaxAggregateInputType = {
    id?: true
    walletAddress?: true
    questId?: true
    title?: true
    description?: true
    type?: true
    status?: true
    currentProgress?: true
    targetProgress?: true
    rewardAmount?: true
    rewardCurrency?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserQuestCountAggregateInputType = {
    id?: true
    walletAddress?: true
    questId?: true
    title?: true
    description?: true
    type?: true
    status?: true
    currentProgress?: true
    targetProgress?: true
    rewardAmount?: true
    rewardCurrency?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserQuestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserQuest to aggregate.
     */
    where?: UserQuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuests to fetch.
     */
    orderBy?: UserQuestOrderByWithRelationInput | UserQuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserQuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserQuests
    **/
    _count?: true | UserQuestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserQuestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserQuestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserQuestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserQuestMaxAggregateInputType
  }

  export type GetUserQuestAggregateType<T extends UserQuestAggregateArgs> = {
        [P in keyof T & keyof AggregateUserQuest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserQuest[P]>
      : GetScalarType<T[P], AggregateUserQuest[P]>
  }




  export type UserQuestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestWhereInput
    orderBy?: UserQuestOrderByWithAggregationInput | UserQuestOrderByWithAggregationInput[]
    by: UserQuestScalarFieldEnum[] | UserQuestScalarFieldEnum
    having?: UserQuestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserQuestCountAggregateInputType | true
    _avg?: UserQuestAvgAggregateInputType
    _sum?: UserQuestSumAggregateInputType
    _min?: UserQuestMinAggregateInputType
    _max?: UserQuestMaxAggregateInputType
  }

  export type UserQuestGroupByOutputType = {
    id: string
    walletAddress: string
    questId: string
    title: string
    description: string
    type: $Enums.QuestType
    status: $Enums.QuestStatus
    currentProgress: number
    targetProgress: number
    rewardAmount: Decimal | null
    rewardCurrency: string
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserQuestCountAggregateOutputType | null
    _avg: UserQuestAvgAggregateOutputType | null
    _sum: UserQuestSumAggregateOutputType | null
    _min: UserQuestMinAggregateOutputType | null
    _max: UserQuestMaxAggregateOutputType | null
  }

  type GetUserQuestGroupByPayload<T extends UserQuestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserQuestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserQuestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserQuestGroupByOutputType[P]>
            : GetScalarType<T[P], UserQuestGroupByOutputType[P]>
        }
      >
    >


  export type UserQuestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    questId?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    currentProgress?: boolean
    targetProgress?: boolean
    rewardAmount?: boolean
    rewardCurrency?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userQuest"]>

  export type UserQuestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    questId?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    currentProgress?: boolean
    targetProgress?: boolean
    rewardAmount?: boolean
    rewardCurrency?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userQuest"]>

  export type UserQuestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    questId?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    currentProgress?: boolean
    targetProgress?: boolean
    rewardAmount?: boolean
    rewardCurrency?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userQuest"]>

  export type UserQuestSelectScalar = {
    id?: boolean
    walletAddress?: boolean
    questId?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    currentProgress?: boolean
    targetProgress?: boolean
    rewardAmount?: boolean
    rewardCurrency?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserQuestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "walletAddress" | "questId" | "title" | "description" | "type" | "status" | "currentProgress" | "targetProgress" | "rewardAmount" | "rewardCurrency" | "completedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["userQuest"]>
  export type UserQuestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserQuestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserQuestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserQuestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserQuest"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      walletAddress: string
      questId: string
      title: string
      description: string
      type: $Enums.QuestType
      status: $Enums.QuestStatus
      currentProgress: number
      targetProgress: number
      rewardAmount: Prisma.Decimal | null
      rewardCurrency: string
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userQuest"]>
    composites: {}
  }

  type UserQuestGetPayload<S extends boolean | null | undefined | UserQuestDefaultArgs> = $Result.GetResult<Prisma.$UserQuestPayload, S>

  type UserQuestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserQuestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserQuestCountAggregateInputType | true
    }

  export interface UserQuestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserQuest'], meta: { name: 'UserQuest' } }
    /**
     * Find zero or one UserQuest that matches the filter.
     * @param {UserQuestFindUniqueArgs} args - Arguments to find a UserQuest
     * @example
     * // Get one UserQuest
     * const userQuest = await prisma.userQuest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserQuestFindUniqueArgs>(args: SelectSubset<T, UserQuestFindUniqueArgs<ExtArgs>>): Prisma__UserQuestClient<$Result.GetResult<Prisma.$UserQuestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserQuest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserQuestFindUniqueOrThrowArgs} args - Arguments to find a UserQuest
     * @example
     * // Get one UserQuest
     * const userQuest = await prisma.userQuest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserQuestFindUniqueOrThrowArgs>(args: SelectSubset<T, UserQuestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserQuestClient<$Result.GetResult<Prisma.$UserQuestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserQuest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestFindFirstArgs} args - Arguments to find a UserQuest
     * @example
     * // Get one UserQuest
     * const userQuest = await prisma.userQuest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserQuestFindFirstArgs>(args?: SelectSubset<T, UserQuestFindFirstArgs<ExtArgs>>): Prisma__UserQuestClient<$Result.GetResult<Prisma.$UserQuestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserQuest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestFindFirstOrThrowArgs} args - Arguments to find a UserQuest
     * @example
     * // Get one UserQuest
     * const userQuest = await prisma.userQuest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserQuestFindFirstOrThrowArgs>(args?: SelectSubset<T, UserQuestFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserQuestClient<$Result.GetResult<Prisma.$UserQuestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserQuests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserQuests
     * const userQuests = await prisma.userQuest.findMany()
     * 
     * // Get first 10 UserQuests
     * const userQuests = await prisma.userQuest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userQuestWithIdOnly = await prisma.userQuest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserQuestFindManyArgs>(args?: SelectSubset<T, UserQuestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserQuest.
     * @param {UserQuestCreateArgs} args - Arguments to create a UserQuest.
     * @example
     * // Create one UserQuest
     * const UserQuest = await prisma.userQuest.create({
     *   data: {
     *     // ... data to create a UserQuest
     *   }
     * })
     * 
     */
    create<T extends UserQuestCreateArgs>(args: SelectSubset<T, UserQuestCreateArgs<ExtArgs>>): Prisma__UserQuestClient<$Result.GetResult<Prisma.$UserQuestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserQuests.
     * @param {UserQuestCreateManyArgs} args - Arguments to create many UserQuests.
     * @example
     * // Create many UserQuests
     * const userQuest = await prisma.userQuest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserQuestCreateManyArgs>(args?: SelectSubset<T, UserQuestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserQuests and returns the data saved in the database.
     * @param {UserQuestCreateManyAndReturnArgs} args - Arguments to create many UserQuests.
     * @example
     * // Create many UserQuests
     * const userQuest = await prisma.userQuest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserQuests and only return the `id`
     * const userQuestWithIdOnly = await prisma.userQuest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserQuestCreateManyAndReturnArgs>(args?: SelectSubset<T, UserQuestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserQuest.
     * @param {UserQuestDeleteArgs} args - Arguments to delete one UserQuest.
     * @example
     * // Delete one UserQuest
     * const UserQuest = await prisma.userQuest.delete({
     *   where: {
     *     // ... filter to delete one UserQuest
     *   }
     * })
     * 
     */
    delete<T extends UserQuestDeleteArgs>(args: SelectSubset<T, UserQuestDeleteArgs<ExtArgs>>): Prisma__UserQuestClient<$Result.GetResult<Prisma.$UserQuestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserQuest.
     * @param {UserQuestUpdateArgs} args - Arguments to update one UserQuest.
     * @example
     * // Update one UserQuest
     * const userQuest = await prisma.userQuest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserQuestUpdateArgs>(args: SelectSubset<T, UserQuestUpdateArgs<ExtArgs>>): Prisma__UserQuestClient<$Result.GetResult<Prisma.$UserQuestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserQuests.
     * @param {UserQuestDeleteManyArgs} args - Arguments to filter UserQuests to delete.
     * @example
     * // Delete a few UserQuests
     * const { count } = await prisma.userQuest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserQuestDeleteManyArgs>(args?: SelectSubset<T, UserQuestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserQuests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserQuests
     * const userQuest = await prisma.userQuest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserQuestUpdateManyArgs>(args: SelectSubset<T, UserQuestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserQuests and returns the data updated in the database.
     * @param {UserQuestUpdateManyAndReturnArgs} args - Arguments to update many UserQuests.
     * @example
     * // Update many UserQuests
     * const userQuest = await prisma.userQuest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserQuests and only return the `id`
     * const userQuestWithIdOnly = await prisma.userQuest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserQuestUpdateManyAndReturnArgs>(args: SelectSubset<T, UserQuestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserQuest.
     * @param {UserQuestUpsertArgs} args - Arguments to update or create a UserQuest.
     * @example
     * // Update or create a UserQuest
     * const userQuest = await prisma.userQuest.upsert({
     *   create: {
     *     // ... data to create a UserQuest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserQuest we want to update
     *   }
     * })
     */
    upsert<T extends UserQuestUpsertArgs>(args: SelectSubset<T, UserQuestUpsertArgs<ExtArgs>>): Prisma__UserQuestClient<$Result.GetResult<Prisma.$UserQuestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserQuests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestCountArgs} args - Arguments to filter UserQuests to count.
     * @example
     * // Count the number of UserQuests
     * const count = await prisma.userQuest.count({
     *   where: {
     *     // ... the filter for the UserQuests we want to count
     *   }
     * })
    **/
    count<T extends UserQuestCountArgs>(
      args?: Subset<T, UserQuestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserQuestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserQuest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserQuestAggregateArgs>(args: Subset<T, UserQuestAggregateArgs>): Prisma.PrismaPromise<GetUserQuestAggregateType<T>>

    /**
     * Group by UserQuest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserQuestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserQuestGroupByArgs['orderBy'] }
        : { orderBy?: UserQuestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserQuestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserQuestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserQuest model
   */
  readonly fields: UserQuestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserQuest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserQuestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserQuest model
   */
  interface UserQuestFieldRefs {
    readonly id: FieldRef<"UserQuest", 'String'>
    readonly walletAddress: FieldRef<"UserQuest", 'String'>
    readonly questId: FieldRef<"UserQuest", 'String'>
    readonly title: FieldRef<"UserQuest", 'String'>
    readonly description: FieldRef<"UserQuest", 'String'>
    readonly type: FieldRef<"UserQuest", 'QuestType'>
    readonly status: FieldRef<"UserQuest", 'QuestStatus'>
    readonly currentProgress: FieldRef<"UserQuest", 'Int'>
    readonly targetProgress: FieldRef<"UserQuest", 'Int'>
    readonly rewardAmount: FieldRef<"UserQuest", 'Decimal'>
    readonly rewardCurrency: FieldRef<"UserQuest", 'String'>
    readonly completedAt: FieldRef<"UserQuest", 'DateTime'>
    readonly createdAt: FieldRef<"UserQuest", 'DateTime'>
    readonly updatedAt: FieldRef<"UserQuest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserQuest findUnique
   */
  export type UserQuestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuest
     */
    select?: UserQuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuest
     */
    omit?: UserQuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestInclude<ExtArgs> | null
    /**
     * Filter, which UserQuest to fetch.
     */
    where: UserQuestWhereUniqueInput
  }

  /**
   * UserQuest findUniqueOrThrow
   */
  export type UserQuestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuest
     */
    select?: UserQuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuest
     */
    omit?: UserQuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestInclude<ExtArgs> | null
    /**
     * Filter, which UserQuest to fetch.
     */
    where: UserQuestWhereUniqueInput
  }

  /**
   * UserQuest findFirst
   */
  export type UserQuestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuest
     */
    select?: UserQuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuest
     */
    omit?: UserQuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestInclude<ExtArgs> | null
    /**
     * Filter, which UserQuest to fetch.
     */
    where?: UserQuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuests to fetch.
     */
    orderBy?: UserQuestOrderByWithRelationInput | UserQuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserQuests.
     */
    cursor?: UserQuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserQuests.
     */
    distinct?: UserQuestScalarFieldEnum | UserQuestScalarFieldEnum[]
  }

  /**
   * UserQuest findFirstOrThrow
   */
  export type UserQuestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuest
     */
    select?: UserQuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuest
     */
    omit?: UserQuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestInclude<ExtArgs> | null
    /**
     * Filter, which UserQuest to fetch.
     */
    where?: UserQuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuests to fetch.
     */
    orderBy?: UserQuestOrderByWithRelationInput | UserQuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserQuests.
     */
    cursor?: UserQuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserQuests.
     */
    distinct?: UserQuestScalarFieldEnum | UserQuestScalarFieldEnum[]
  }

  /**
   * UserQuest findMany
   */
  export type UserQuestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuest
     */
    select?: UserQuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuest
     */
    omit?: UserQuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestInclude<ExtArgs> | null
    /**
     * Filter, which UserQuests to fetch.
     */
    where?: UserQuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuests to fetch.
     */
    orderBy?: UserQuestOrderByWithRelationInput | UserQuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserQuests.
     */
    cursor?: UserQuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuests.
     */
    skip?: number
    distinct?: UserQuestScalarFieldEnum | UserQuestScalarFieldEnum[]
  }

  /**
   * UserQuest create
   */
  export type UserQuestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuest
     */
    select?: UserQuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuest
     */
    omit?: UserQuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestInclude<ExtArgs> | null
    /**
     * The data needed to create a UserQuest.
     */
    data: XOR<UserQuestCreateInput, UserQuestUncheckedCreateInput>
  }

  /**
   * UserQuest createMany
   */
  export type UserQuestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserQuests.
     */
    data: UserQuestCreateManyInput | UserQuestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserQuest createManyAndReturn
   */
  export type UserQuestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuest
     */
    select?: UserQuestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuest
     */
    omit?: UserQuestOmit<ExtArgs> | null
    /**
     * The data used to create many UserQuests.
     */
    data: UserQuestCreateManyInput | UserQuestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserQuest update
   */
  export type UserQuestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuest
     */
    select?: UserQuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuest
     */
    omit?: UserQuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestInclude<ExtArgs> | null
    /**
     * The data needed to update a UserQuest.
     */
    data: XOR<UserQuestUpdateInput, UserQuestUncheckedUpdateInput>
    /**
     * Choose, which UserQuest to update.
     */
    where: UserQuestWhereUniqueInput
  }

  /**
   * UserQuest updateMany
   */
  export type UserQuestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserQuests.
     */
    data: XOR<UserQuestUpdateManyMutationInput, UserQuestUncheckedUpdateManyInput>
    /**
     * Filter which UserQuests to update
     */
    where?: UserQuestWhereInput
    /**
     * Limit how many UserQuests to update.
     */
    limit?: number
  }

  /**
   * UserQuest updateManyAndReturn
   */
  export type UserQuestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuest
     */
    select?: UserQuestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuest
     */
    omit?: UserQuestOmit<ExtArgs> | null
    /**
     * The data used to update UserQuests.
     */
    data: XOR<UserQuestUpdateManyMutationInput, UserQuestUncheckedUpdateManyInput>
    /**
     * Filter which UserQuests to update
     */
    where?: UserQuestWhereInput
    /**
     * Limit how many UserQuests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserQuest upsert
   */
  export type UserQuestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuest
     */
    select?: UserQuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuest
     */
    omit?: UserQuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestInclude<ExtArgs> | null
    /**
     * The filter to search for the UserQuest to update in case it exists.
     */
    where: UserQuestWhereUniqueInput
    /**
     * In case the UserQuest found by the `where` argument doesn't exist, create a new UserQuest with this data.
     */
    create: XOR<UserQuestCreateInput, UserQuestUncheckedCreateInput>
    /**
     * In case the UserQuest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserQuestUpdateInput, UserQuestUncheckedUpdateInput>
  }

  /**
   * UserQuest delete
   */
  export type UserQuestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuest
     */
    select?: UserQuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuest
     */
    omit?: UserQuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestInclude<ExtArgs> | null
    /**
     * Filter which UserQuest to delete.
     */
    where: UserQuestWhereUniqueInput
  }

  /**
   * UserQuest deleteMany
   */
  export type UserQuestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserQuests to delete
     */
    where?: UserQuestWhereInput
    /**
     * Limit how many UserQuests to delete.
     */
    limit?: number
  }

  /**
   * UserQuest without action
   */
  export type UserQuestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuest
     */
    select?: UserQuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserQuest
     */
    omit?: UserQuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestInclude<ExtArgs> | null
  }


  /**
   * Model UserCoin
   */

  export type AggregateUserCoin = {
    _count: UserCoinCountAggregateOutputType | null
    _avg: UserCoinAvgAggregateOutputType | null
    _sum: UserCoinSumAggregateOutputType | null
    _min: UserCoinMinAggregateOutputType | null
    _max: UserCoinMaxAggregateOutputType | null
  }

  export type UserCoinAvgAggregateOutputType = {
    amount: number | null
  }

  export type UserCoinSumAggregateOutputType = {
    amount: number | null
  }

  export type UserCoinMinAggregateOutputType = {
    id: string | null
    walletAddress: string | null
    coinType: $Enums.CoinType | null
    amount: number | null
    earnedAt: Date | null
    sourceType: $Enums.CoinSourceType | null
    sourceId: string | null
    createdAt: Date | null
  }

  export type UserCoinMaxAggregateOutputType = {
    id: string | null
    walletAddress: string | null
    coinType: $Enums.CoinType | null
    amount: number | null
    earnedAt: Date | null
    sourceType: $Enums.CoinSourceType | null
    sourceId: string | null
    createdAt: Date | null
  }

  export type UserCoinCountAggregateOutputType = {
    id: number
    walletAddress: number
    coinType: number
    amount: number
    earnedAt: number
    sourceType: number
    sourceId: number
    sourceMetadata: number
    createdAt: number
    _all: number
  }


  export type UserCoinAvgAggregateInputType = {
    amount?: true
  }

  export type UserCoinSumAggregateInputType = {
    amount?: true
  }

  export type UserCoinMinAggregateInputType = {
    id?: true
    walletAddress?: true
    coinType?: true
    amount?: true
    earnedAt?: true
    sourceType?: true
    sourceId?: true
    createdAt?: true
  }

  export type UserCoinMaxAggregateInputType = {
    id?: true
    walletAddress?: true
    coinType?: true
    amount?: true
    earnedAt?: true
    sourceType?: true
    sourceId?: true
    createdAt?: true
  }

  export type UserCoinCountAggregateInputType = {
    id?: true
    walletAddress?: true
    coinType?: true
    amount?: true
    earnedAt?: true
    sourceType?: true
    sourceId?: true
    sourceMetadata?: true
    createdAt?: true
    _all?: true
  }

  export type UserCoinAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCoin to aggregate.
     */
    where?: UserCoinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCoins to fetch.
     */
    orderBy?: UserCoinOrderByWithRelationInput | UserCoinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserCoinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCoins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCoins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserCoins
    **/
    _count?: true | UserCoinCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserCoinAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserCoinSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserCoinMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserCoinMaxAggregateInputType
  }

  export type GetUserCoinAggregateType<T extends UserCoinAggregateArgs> = {
        [P in keyof T & keyof AggregateUserCoin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserCoin[P]>
      : GetScalarType<T[P], AggregateUserCoin[P]>
  }




  export type UserCoinGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCoinWhereInput
    orderBy?: UserCoinOrderByWithAggregationInput | UserCoinOrderByWithAggregationInput[]
    by: UserCoinScalarFieldEnum[] | UserCoinScalarFieldEnum
    having?: UserCoinScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCoinCountAggregateInputType | true
    _avg?: UserCoinAvgAggregateInputType
    _sum?: UserCoinSumAggregateInputType
    _min?: UserCoinMinAggregateInputType
    _max?: UserCoinMaxAggregateInputType
  }

  export type UserCoinGroupByOutputType = {
    id: string
    walletAddress: string
    coinType: $Enums.CoinType
    amount: number
    earnedAt: Date
    sourceType: $Enums.CoinSourceType
    sourceId: string | null
    sourceMetadata: JsonValue | null
    createdAt: Date
    _count: UserCoinCountAggregateOutputType | null
    _avg: UserCoinAvgAggregateOutputType | null
    _sum: UserCoinSumAggregateOutputType | null
    _min: UserCoinMinAggregateOutputType | null
    _max: UserCoinMaxAggregateOutputType | null
  }

  type GetUserCoinGroupByPayload<T extends UserCoinGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserCoinGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserCoinGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserCoinGroupByOutputType[P]>
            : GetScalarType<T[P], UserCoinGroupByOutputType[P]>
        }
      >
    >


  export type UserCoinSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    coinType?: boolean
    amount?: boolean
    earnedAt?: boolean
    sourceType?: boolean
    sourceId?: boolean
    sourceMetadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCoin"]>

  export type UserCoinSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    coinType?: boolean
    amount?: boolean
    earnedAt?: boolean
    sourceType?: boolean
    sourceId?: boolean
    sourceMetadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCoin"]>

  export type UserCoinSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    coinType?: boolean
    amount?: boolean
    earnedAt?: boolean
    sourceType?: boolean
    sourceId?: boolean
    sourceMetadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCoin"]>

  export type UserCoinSelectScalar = {
    id?: boolean
    walletAddress?: boolean
    coinType?: boolean
    amount?: boolean
    earnedAt?: boolean
    sourceType?: boolean
    sourceId?: boolean
    sourceMetadata?: boolean
    createdAt?: boolean
  }

  export type UserCoinOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "walletAddress" | "coinType" | "amount" | "earnedAt" | "sourceType" | "sourceId" | "sourceMetadata" | "createdAt", ExtArgs["result"]["userCoin"]>
  export type UserCoinInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserCoinIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserCoinIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserCoinPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserCoin"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      walletAddress: string
      coinType: $Enums.CoinType
      amount: number
      earnedAt: Date
      sourceType: $Enums.CoinSourceType
      sourceId: string | null
      sourceMetadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["userCoin"]>
    composites: {}
  }

  type UserCoinGetPayload<S extends boolean | null | undefined | UserCoinDefaultArgs> = $Result.GetResult<Prisma.$UserCoinPayload, S>

  type UserCoinCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserCoinFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCoinCountAggregateInputType | true
    }

  export interface UserCoinDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserCoin'], meta: { name: 'UserCoin' } }
    /**
     * Find zero or one UserCoin that matches the filter.
     * @param {UserCoinFindUniqueArgs} args - Arguments to find a UserCoin
     * @example
     * // Get one UserCoin
     * const userCoin = await prisma.userCoin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserCoinFindUniqueArgs>(args: SelectSubset<T, UserCoinFindUniqueArgs<ExtArgs>>): Prisma__UserCoinClient<$Result.GetResult<Prisma.$UserCoinPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserCoin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserCoinFindUniqueOrThrowArgs} args - Arguments to find a UserCoin
     * @example
     * // Get one UserCoin
     * const userCoin = await prisma.userCoin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserCoinFindUniqueOrThrowArgs>(args: SelectSubset<T, UserCoinFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserCoinClient<$Result.GetResult<Prisma.$UserCoinPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserCoin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCoinFindFirstArgs} args - Arguments to find a UserCoin
     * @example
     * // Get one UserCoin
     * const userCoin = await prisma.userCoin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserCoinFindFirstArgs>(args?: SelectSubset<T, UserCoinFindFirstArgs<ExtArgs>>): Prisma__UserCoinClient<$Result.GetResult<Prisma.$UserCoinPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserCoin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCoinFindFirstOrThrowArgs} args - Arguments to find a UserCoin
     * @example
     * // Get one UserCoin
     * const userCoin = await prisma.userCoin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserCoinFindFirstOrThrowArgs>(args?: SelectSubset<T, UserCoinFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserCoinClient<$Result.GetResult<Prisma.$UserCoinPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserCoins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCoinFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserCoins
     * const userCoins = await prisma.userCoin.findMany()
     * 
     * // Get first 10 UserCoins
     * const userCoins = await prisma.userCoin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userCoinWithIdOnly = await prisma.userCoin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserCoinFindManyArgs>(args?: SelectSubset<T, UserCoinFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCoinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserCoin.
     * @param {UserCoinCreateArgs} args - Arguments to create a UserCoin.
     * @example
     * // Create one UserCoin
     * const UserCoin = await prisma.userCoin.create({
     *   data: {
     *     // ... data to create a UserCoin
     *   }
     * })
     * 
     */
    create<T extends UserCoinCreateArgs>(args: SelectSubset<T, UserCoinCreateArgs<ExtArgs>>): Prisma__UserCoinClient<$Result.GetResult<Prisma.$UserCoinPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserCoins.
     * @param {UserCoinCreateManyArgs} args - Arguments to create many UserCoins.
     * @example
     * // Create many UserCoins
     * const userCoin = await prisma.userCoin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCoinCreateManyArgs>(args?: SelectSubset<T, UserCoinCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserCoins and returns the data saved in the database.
     * @param {UserCoinCreateManyAndReturnArgs} args - Arguments to create many UserCoins.
     * @example
     * // Create many UserCoins
     * const userCoin = await prisma.userCoin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserCoins and only return the `id`
     * const userCoinWithIdOnly = await prisma.userCoin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCoinCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCoinCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCoinPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserCoin.
     * @param {UserCoinDeleteArgs} args - Arguments to delete one UserCoin.
     * @example
     * // Delete one UserCoin
     * const UserCoin = await prisma.userCoin.delete({
     *   where: {
     *     // ... filter to delete one UserCoin
     *   }
     * })
     * 
     */
    delete<T extends UserCoinDeleteArgs>(args: SelectSubset<T, UserCoinDeleteArgs<ExtArgs>>): Prisma__UserCoinClient<$Result.GetResult<Prisma.$UserCoinPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserCoin.
     * @param {UserCoinUpdateArgs} args - Arguments to update one UserCoin.
     * @example
     * // Update one UserCoin
     * const userCoin = await prisma.userCoin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserCoinUpdateArgs>(args: SelectSubset<T, UserCoinUpdateArgs<ExtArgs>>): Prisma__UserCoinClient<$Result.GetResult<Prisma.$UserCoinPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserCoins.
     * @param {UserCoinDeleteManyArgs} args - Arguments to filter UserCoins to delete.
     * @example
     * // Delete a few UserCoins
     * const { count } = await prisma.userCoin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserCoinDeleteManyArgs>(args?: SelectSubset<T, UserCoinDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCoins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCoinUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserCoins
     * const userCoin = await prisma.userCoin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserCoinUpdateManyArgs>(args: SelectSubset<T, UserCoinUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCoins and returns the data updated in the database.
     * @param {UserCoinUpdateManyAndReturnArgs} args - Arguments to update many UserCoins.
     * @example
     * // Update many UserCoins
     * const userCoin = await prisma.userCoin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserCoins and only return the `id`
     * const userCoinWithIdOnly = await prisma.userCoin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserCoinUpdateManyAndReturnArgs>(args: SelectSubset<T, UserCoinUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCoinPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserCoin.
     * @param {UserCoinUpsertArgs} args - Arguments to update or create a UserCoin.
     * @example
     * // Update or create a UserCoin
     * const userCoin = await prisma.userCoin.upsert({
     *   create: {
     *     // ... data to create a UserCoin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserCoin we want to update
     *   }
     * })
     */
    upsert<T extends UserCoinUpsertArgs>(args: SelectSubset<T, UserCoinUpsertArgs<ExtArgs>>): Prisma__UserCoinClient<$Result.GetResult<Prisma.$UserCoinPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserCoins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCoinCountArgs} args - Arguments to filter UserCoins to count.
     * @example
     * // Count the number of UserCoins
     * const count = await prisma.userCoin.count({
     *   where: {
     *     // ... the filter for the UserCoins we want to count
     *   }
     * })
    **/
    count<T extends UserCoinCountArgs>(
      args?: Subset<T, UserCoinCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCoinCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserCoin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCoinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserCoinAggregateArgs>(args: Subset<T, UserCoinAggregateArgs>): Prisma.PrismaPromise<GetUserCoinAggregateType<T>>

    /**
     * Group by UserCoin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCoinGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserCoinGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserCoinGroupByArgs['orderBy'] }
        : { orderBy?: UserCoinGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserCoinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCoinGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserCoin model
   */
  readonly fields: UserCoinFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserCoin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserCoinClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserCoin model
   */
  interface UserCoinFieldRefs {
    readonly id: FieldRef<"UserCoin", 'String'>
    readonly walletAddress: FieldRef<"UserCoin", 'String'>
    readonly coinType: FieldRef<"UserCoin", 'CoinType'>
    readonly amount: FieldRef<"UserCoin", 'Int'>
    readonly earnedAt: FieldRef<"UserCoin", 'DateTime'>
    readonly sourceType: FieldRef<"UserCoin", 'CoinSourceType'>
    readonly sourceId: FieldRef<"UserCoin", 'String'>
    readonly sourceMetadata: FieldRef<"UserCoin", 'Json'>
    readonly createdAt: FieldRef<"UserCoin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserCoin findUnique
   */
  export type UserCoinFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCoin
     */
    select?: UserCoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCoin
     */
    omit?: UserCoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCoinInclude<ExtArgs> | null
    /**
     * Filter, which UserCoin to fetch.
     */
    where: UserCoinWhereUniqueInput
  }

  /**
   * UserCoin findUniqueOrThrow
   */
  export type UserCoinFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCoin
     */
    select?: UserCoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCoin
     */
    omit?: UserCoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCoinInclude<ExtArgs> | null
    /**
     * Filter, which UserCoin to fetch.
     */
    where: UserCoinWhereUniqueInput
  }

  /**
   * UserCoin findFirst
   */
  export type UserCoinFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCoin
     */
    select?: UserCoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCoin
     */
    omit?: UserCoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCoinInclude<ExtArgs> | null
    /**
     * Filter, which UserCoin to fetch.
     */
    where?: UserCoinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCoins to fetch.
     */
    orderBy?: UserCoinOrderByWithRelationInput | UserCoinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCoins.
     */
    cursor?: UserCoinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCoins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCoins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCoins.
     */
    distinct?: UserCoinScalarFieldEnum | UserCoinScalarFieldEnum[]
  }

  /**
   * UserCoin findFirstOrThrow
   */
  export type UserCoinFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCoin
     */
    select?: UserCoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCoin
     */
    omit?: UserCoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCoinInclude<ExtArgs> | null
    /**
     * Filter, which UserCoin to fetch.
     */
    where?: UserCoinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCoins to fetch.
     */
    orderBy?: UserCoinOrderByWithRelationInput | UserCoinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCoins.
     */
    cursor?: UserCoinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCoins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCoins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCoins.
     */
    distinct?: UserCoinScalarFieldEnum | UserCoinScalarFieldEnum[]
  }

  /**
   * UserCoin findMany
   */
  export type UserCoinFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCoin
     */
    select?: UserCoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCoin
     */
    omit?: UserCoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCoinInclude<ExtArgs> | null
    /**
     * Filter, which UserCoins to fetch.
     */
    where?: UserCoinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCoins to fetch.
     */
    orderBy?: UserCoinOrderByWithRelationInput | UserCoinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserCoins.
     */
    cursor?: UserCoinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCoins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCoins.
     */
    skip?: number
    distinct?: UserCoinScalarFieldEnum | UserCoinScalarFieldEnum[]
  }

  /**
   * UserCoin create
   */
  export type UserCoinCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCoin
     */
    select?: UserCoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCoin
     */
    omit?: UserCoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCoinInclude<ExtArgs> | null
    /**
     * The data needed to create a UserCoin.
     */
    data: XOR<UserCoinCreateInput, UserCoinUncheckedCreateInput>
  }

  /**
   * UserCoin createMany
   */
  export type UserCoinCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserCoins.
     */
    data: UserCoinCreateManyInput | UserCoinCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserCoin createManyAndReturn
   */
  export type UserCoinCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCoin
     */
    select?: UserCoinSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserCoin
     */
    omit?: UserCoinOmit<ExtArgs> | null
    /**
     * The data used to create many UserCoins.
     */
    data: UserCoinCreateManyInput | UserCoinCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCoinIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCoin update
   */
  export type UserCoinUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCoin
     */
    select?: UserCoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCoin
     */
    omit?: UserCoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCoinInclude<ExtArgs> | null
    /**
     * The data needed to update a UserCoin.
     */
    data: XOR<UserCoinUpdateInput, UserCoinUncheckedUpdateInput>
    /**
     * Choose, which UserCoin to update.
     */
    where: UserCoinWhereUniqueInput
  }

  /**
   * UserCoin updateMany
   */
  export type UserCoinUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserCoins.
     */
    data: XOR<UserCoinUpdateManyMutationInput, UserCoinUncheckedUpdateManyInput>
    /**
     * Filter which UserCoins to update
     */
    where?: UserCoinWhereInput
    /**
     * Limit how many UserCoins to update.
     */
    limit?: number
  }

  /**
   * UserCoin updateManyAndReturn
   */
  export type UserCoinUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCoin
     */
    select?: UserCoinSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserCoin
     */
    omit?: UserCoinOmit<ExtArgs> | null
    /**
     * The data used to update UserCoins.
     */
    data: XOR<UserCoinUpdateManyMutationInput, UserCoinUncheckedUpdateManyInput>
    /**
     * Filter which UserCoins to update
     */
    where?: UserCoinWhereInput
    /**
     * Limit how many UserCoins to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCoinIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCoin upsert
   */
  export type UserCoinUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCoin
     */
    select?: UserCoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCoin
     */
    omit?: UserCoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCoinInclude<ExtArgs> | null
    /**
     * The filter to search for the UserCoin to update in case it exists.
     */
    where: UserCoinWhereUniqueInput
    /**
     * In case the UserCoin found by the `where` argument doesn't exist, create a new UserCoin with this data.
     */
    create: XOR<UserCoinCreateInput, UserCoinUncheckedCreateInput>
    /**
     * In case the UserCoin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserCoinUpdateInput, UserCoinUncheckedUpdateInput>
  }

  /**
   * UserCoin delete
   */
  export type UserCoinDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCoin
     */
    select?: UserCoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCoin
     */
    omit?: UserCoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCoinInclude<ExtArgs> | null
    /**
     * Filter which UserCoin to delete.
     */
    where: UserCoinWhereUniqueInput
  }

  /**
   * UserCoin deleteMany
   */
  export type UserCoinDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCoins to delete
     */
    where?: UserCoinWhereInput
    /**
     * Limit how many UserCoins to delete.
     */
    limit?: number
  }

  /**
   * UserCoin without action
   */
  export type UserCoinDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCoin
     */
    select?: UserCoinSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserCoin
     */
    omit?: UserCoinOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCoinInclude<ExtArgs> | null
  }


  /**
   * Model UserNotification
   */

  export type AggregateUserNotification = {
    _count: UserNotificationCountAggregateOutputType | null
    _min: UserNotificationMinAggregateOutputType | null
    _max: UserNotificationMaxAggregateOutputType | null
  }

  export type UserNotificationMinAggregateOutputType = {
    id: string | null
    walletAddress: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    priority: $Enums.NotificationPriority | null
    isRead: boolean | null
    readAt: Date | null
    actionUrl: string | null
    createdAt: Date | null
  }

  export type UserNotificationMaxAggregateOutputType = {
    id: string | null
    walletAddress: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    priority: $Enums.NotificationPriority | null
    isRead: boolean | null
    readAt: Date | null
    actionUrl: string | null
    createdAt: Date | null
  }

  export type UserNotificationCountAggregateOutputType = {
    id: number
    walletAddress: number
    type: number
    title: number
    message: number
    priority: number
    isRead: number
    readAt: number
    actionUrl: number
    actionMetadata: number
    createdAt: number
    _all: number
  }


  export type UserNotificationMinAggregateInputType = {
    id?: true
    walletAddress?: true
    type?: true
    title?: true
    message?: true
    priority?: true
    isRead?: true
    readAt?: true
    actionUrl?: true
    createdAt?: true
  }

  export type UserNotificationMaxAggregateInputType = {
    id?: true
    walletAddress?: true
    type?: true
    title?: true
    message?: true
    priority?: true
    isRead?: true
    readAt?: true
    actionUrl?: true
    createdAt?: true
  }

  export type UserNotificationCountAggregateInputType = {
    id?: true
    walletAddress?: true
    type?: true
    title?: true
    message?: true
    priority?: true
    isRead?: true
    readAt?: true
    actionUrl?: true
    actionMetadata?: true
    createdAt?: true
    _all?: true
  }

  export type UserNotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserNotification to aggregate.
     */
    where?: UserNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNotifications to fetch.
     */
    orderBy?: UserNotificationOrderByWithRelationInput | UserNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserNotifications
    **/
    _count?: true | UserNotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserNotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserNotificationMaxAggregateInputType
  }

  export type GetUserNotificationAggregateType<T extends UserNotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateUserNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserNotification[P]>
      : GetScalarType<T[P], AggregateUserNotification[P]>
  }




  export type UserNotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserNotificationWhereInput
    orderBy?: UserNotificationOrderByWithAggregationInput | UserNotificationOrderByWithAggregationInput[]
    by: UserNotificationScalarFieldEnum[] | UserNotificationScalarFieldEnum
    having?: UserNotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserNotificationCountAggregateInputType | true
    _min?: UserNotificationMinAggregateInputType
    _max?: UserNotificationMaxAggregateInputType
  }

  export type UserNotificationGroupByOutputType = {
    id: string
    walletAddress: string
    type: $Enums.NotificationType
    title: string
    message: string
    priority: $Enums.NotificationPriority
    isRead: boolean
    readAt: Date | null
    actionUrl: string | null
    actionMetadata: JsonValue | null
    createdAt: Date
    _count: UserNotificationCountAggregateOutputType | null
    _min: UserNotificationMinAggregateOutputType | null
    _max: UserNotificationMaxAggregateOutputType | null
  }

  type GetUserNotificationGroupByPayload<T extends UserNotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserNotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserNotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserNotificationGroupByOutputType[P]>
            : GetScalarType<T[P], UserNotificationGroupByOutputType[P]>
        }
      >
    >


  export type UserNotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    priority?: boolean
    isRead?: boolean
    readAt?: boolean
    actionUrl?: boolean
    actionMetadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userNotification"]>

  export type UserNotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    priority?: boolean
    isRead?: boolean
    readAt?: boolean
    actionUrl?: boolean
    actionMetadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userNotification"]>

  export type UserNotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    priority?: boolean
    isRead?: boolean
    readAt?: boolean
    actionUrl?: boolean
    actionMetadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userNotification"]>

  export type UserNotificationSelectScalar = {
    id?: boolean
    walletAddress?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    priority?: boolean
    isRead?: boolean
    readAt?: boolean
    actionUrl?: boolean
    actionMetadata?: boolean
    createdAt?: boolean
  }

  export type UserNotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "walletAddress" | "type" | "title" | "message" | "priority" | "isRead" | "readAt" | "actionUrl" | "actionMetadata" | "createdAt", ExtArgs["result"]["userNotification"]>
  export type UserNotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserNotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserNotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserNotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserNotification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      walletAddress: string
      type: $Enums.NotificationType
      title: string
      message: string
      priority: $Enums.NotificationPriority
      isRead: boolean
      readAt: Date | null
      actionUrl: string | null
      actionMetadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["userNotification"]>
    composites: {}
  }

  type UserNotificationGetPayload<S extends boolean | null | undefined | UserNotificationDefaultArgs> = $Result.GetResult<Prisma.$UserNotificationPayload, S>

  type UserNotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserNotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserNotificationCountAggregateInputType | true
    }

  export interface UserNotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserNotification'], meta: { name: 'UserNotification' } }
    /**
     * Find zero or one UserNotification that matches the filter.
     * @param {UserNotificationFindUniqueArgs} args - Arguments to find a UserNotification
     * @example
     * // Get one UserNotification
     * const userNotification = await prisma.userNotification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserNotificationFindUniqueArgs>(args: SelectSubset<T, UserNotificationFindUniqueArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserNotification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserNotificationFindUniqueOrThrowArgs} args - Arguments to find a UserNotification
     * @example
     * // Get one UserNotification
     * const userNotification = await prisma.userNotification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserNotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, UserNotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserNotification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationFindFirstArgs} args - Arguments to find a UserNotification
     * @example
     * // Get one UserNotification
     * const userNotification = await prisma.userNotification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserNotificationFindFirstArgs>(args?: SelectSubset<T, UserNotificationFindFirstArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserNotification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationFindFirstOrThrowArgs} args - Arguments to find a UserNotification
     * @example
     * // Get one UserNotification
     * const userNotification = await prisma.userNotification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserNotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, UserNotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserNotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserNotifications
     * const userNotifications = await prisma.userNotification.findMany()
     * 
     * // Get first 10 UserNotifications
     * const userNotifications = await prisma.userNotification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userNotificationWithIdOnly = await prisma.userNotification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserNotificationFindManyArgs>(args?: SelectSubset<T, UserNotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserNotification.
     * @param {UserNotificationCreateArgs} args - Arguments to create a UserNotification.
     * @example
     * // Create one UserNotification
     * const UserNotification = await prisma.userNotification.create({
     *   data: {
     *     // ... data to create a UserNotification
     *   }
     * })
     * 
     */
    create<T extends UserNotificationCreateArgs>(args: SelectSubset<T, UserNotificationCreateArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserNotifications.
     * @param {UserNotificationCreateManyArgs} args - Arguments to create many UserNotifications.
     * @example
     * // Create many UserNotifications
     * const userNotification = await prisma.userNotification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserNotificationCreateManyArgs>(args?: SelectSubset<T, UserNotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserNotifications and returns the data saved in the database.
     * @param {UserNotificationCreateManyAndReturnArgs} args - Arguments to create many UserNotifications.
     * @example
     * // Create many UserNotifications
     * const userNotification = await prisma.userNotification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserNotifications and only return the `id`
     * const userNotificationWithIdOnly = await prisma.userNotification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserNotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, UserNotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserNotification.
     * @param {UserNotificationDeleteArgs} args - Arguments to delete one UserNotification.
     * @example
     * // Delete one UserNotification
     * const UserNotification = await prisma.userNotification.delete({
     *   where: {
     *     // ... filter to delete one UserNotification
     *   }
     * })
     * 
     */
    delete<T extends UserNotificationDeleteArgs>(args: SelectSubset<T, UserNotificationDeleteArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserNotification.
     * @param {UserNotificationUpdateArgs} args - Arguments to update one UserNotification.
     * @example
     * // Update one UserNotification
     * const userNotification = await prisma.userNotification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserNotificationUpdateArgs>(args: SelectSubset<T, UserNotificationUpdateArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserNotifications.
     * @param {UserNotificationDeleteManyArgs} args - Arguments to filter UserNotifications to delete.
     * @example
     * // Delete a few UserNotifications
     * const { count } = await prisma.userNotification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserNotificationDeleteManyArgs>(args?: SelectSubset<T, UserNotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserNotifications
     * const userNotification = await prisma.userNotification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserNotificationUpdateManyArgs>(args: SelectSubset<T, UserNotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserNotifications and returns the data updated in the database.
     * @param {UserNotificationUpdateManyAndReturnArgs} args - Arguments to update many UserNotifications.
     * @example
     * // Update many UserNotifications
     * const userNotification = await prisma.userNotification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserNotifications and only return the `id`
     * const userNotificationWithIdOnly = await prisma.userNotification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserNotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, UserNotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserNotification.
     * @param {UserNotificationUpsertArgs} args - Arguments to update or create a UserNotification.
     * @example
     * // Update or create a UserNotification
     * const userNotification = await prisma.userNotification.upsert({
     *   create: {
     *     // ... data to create a UserNotification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserNotification we want to update
     *   }
     * })
     */
    upsert<T extends UserNotificationUpsertArgs>(args: SelectSubset<T, UserNotificationUpsertArgs<ExtArgs>>): Prisma__UserNotificationClient<$Result.GetResult<Prisma.$UserNotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationCountArgs} args - Arguments to filter UserNotifications to count.
     * @example
     * // Count the number of UserNotifications
     * const count = await prisma.userNotification.count({
     *   where: {
     *     // ... the filter for the UserNotifications we want to count
     *   }
     * })
    **/
    count<T extends UserNotificationCountArgs>(
      args?: Subset<T, UserNotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserNotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserNotificationAggregateArgs>(args: Subset<T, UserNotificationAggregateArgs>): Prisma.PrismaPromise<GetUserNotificationAggregateType<T>>

    /**
     * Group by UserNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserNotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserNotificationGroupByArgs['orderBy'] }
        : { orderBy?: UserNotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserNotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserNotification model
   */
  readonly fields: UserNotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserNotification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserNotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserNotification model
   */
  interface UserNotificationFieldRefs {
    readonly id: FieldRef<"UserNotification", 'String'>
    readonly walletAddress: FieldRef<"UserNotification", 'String'>
    readonly type: FieldRef<"UserNotification", 'NotificationType'>
    readonly title: FieldRef<"UserNotification", 'String'>
    readonly message: FieldRef<"UserNotification", 'String'>
    readonly priority: FieldRef<"UserNotification", 'NotificationPriority'>
    readonly isRead: FieldRef<"UserNotification", 'Boolean'>
    readonly readAt: FieldRef<"UserNotification", 'DateTime'>
    readonly actionUrl: FieldRef<"UserNotification", 'String'>
    readonly actionMetadata: FieldRef<"UserNotification", 'Json'>
    readonly createdAt: FieldRef<"UserNotification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserNotification findUnique
   */
  export type UserNotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * Filter, which UserNotification to fetch.
     */
    where: UserNotificationWhereUniqueInput
  }

  /**
   * UserNotification findUniqueOrThrow
   */
  export type UserNotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * Filter, which UserNotification to fetch.
     */
    where: UserNotificationWhereUniqueInput
  }

  /**
   * UserNotification findFirst
   */
  export type UserNotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * Filter, which UserNotification to fetch.
     */
    where?: UserNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNotifications to fetch.
     */
    orderBy?: UserNotificationOrderByWithRelationInput | UserNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserNotifications.
     */
    cursor?: UserNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserNotifications.
     */
    distinct?: UserNotificationScalarFieldEnum | UserNotificationScalarFieldEnum[]
  }

  /**
   * UserNotification findFirstOrThrow
   */
  export type UserNotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * Filter, which UserNotification to fetch.
     */
    where?: UserNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNotifications to fetch.
     */
    orderBy?: UserNotificationOrderByWithRelationInput | UserNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserNotifications.
     */
    cursor?: UserNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserNotifications.
     */
    distinct?: UserNotificationScalarFieldEnum | UserNotificationScalarFieldEnum[]
  }

  /**
   * UserNotification findMany
   */
  export type UserNotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * Filter, which UserNotifications to fetch.
     */
    where?: UserNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNotifications to fetch.
     */
    orderBy?: UserNotificationOrderByWithRelationInput | UserNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserNotifications.
     */
    cursor?: UserNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNotifications.
     */
    skip?: number
    distinct?: UserNotificationScalarFieldEnum | UserNotificationScalarFieldEnum[]
  }

  /**
   * UserNotification create
   */
  export type UserNotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a UserNotification.
     */
    data: XOR<UserNotificationCreateInput, UserNotificationUncheckedCreateInput>
  }

  /**
   * UserNotification createMany
   */
  export type UserNotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserNotifications.
     */
    data: UserNotificationCreateManyInput | UserNotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserNotification createManyAndReturn
   */
  export type UserNotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * The data used to create many UserNotifications.
     */
    data: UserNotificationCreateManyInput | UserNotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserNotification update
   */
  export type UserNotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a UserNotification.
     */
    data: XOR<UserNotificationUpdateInput, UserNotificationUncheckedUpdateInput>
    /**
     * Choose, which UserNotification to update.
     */
    where: UserNotificationWhereUniqueInput
  }

  /**
   * UserNotification updateMany
   */
  export type UserNotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserNotifications.
     */
    data: XOR<UserNotificationUpdateManyMutationInput, UserNotificationUncheckedUpdateManyInput>
    /**
     * Filter which UserNotifications to update
     */
    where?: UserNotificationWhereInput
    /**
     * Limit how many UserNotifications to update.
     */
    limit?: number
  }

  /**
   * UserNotification updateManyAndReturn
   */
  export type UserNotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * The data used to update UserNotifications.
     */
    data: XOR<UserNotificationUpdateManyMutationInput, UserNotificationUncheckedUpdateManyInput>
    /**
     * Filter which UserNotifications to update
     */
    where?: UserNotificationWhereInput
    /**
     * Limit how many UserNotifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserNotification upsert
   */
  export type UserNotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the UserNotification to update in case it exists.
     */
    where: UserNotificationWhereUniqueInput
    /**
     * In case the UserNotification found by the `where` argument doesn't exist, create a new UserNotification with this data.
     */
    create: XOR<UserNotificationCreateInput, UserNotificationUncheckedCreateInput>
    /**
     * In case the UserNotification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserNotificationUpdateInput, UserNotificationUncheckedUpdateInput>
  }

  /**
   * UserNotification delete
   */
  export type UserNotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
    /**
     * Filter which UserNotification to delete.
     */
    where: UserNotificationWhereUniqueInput
  }

  /**
   * UserNotification deleteMany
   */
  export type UserNotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserNotifications to delete
     */
    where?: UserNotificationWhereInput
    /**
     * Limit how many UserNotifications to delete.
     */
    limit?: number
  }

  /**
   * UserNotification without action
   */
  export type UserNotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNotification
     */
    select?: UserNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserNotification
     */
    omit?: UserNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNotificationInclude<ExtArgs> | null
  }


  /**
   * Model AdminUser
   */

  export type AggregateAdminUser = {
    _count: AdminUserCountAggregateOutputType | null
    _min: AdminUserMinAggregateOutputType | null
    _max: AdminUserMaxAggregateOutputType | null
  }

  export type AdminUserMinAggregateOutputType = {
    id: string | null
    walletAddress: string | null
    email: string | null
    username: string | null
    displayName: string | null
    role: $Enums.AdminRole | null
    isActive: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminUserMaxAggregateOutputType = {
    id: string | null
    walletAddress: string | null
    email: string | null
    username: string | null
    displayName: string | null
    role: $Enums.AdminRole | null
    isActive: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminUserCountAggregateOutputType = {
    id: number
    walletAddress: number
    email: number
    username: number
    displayName: number
    role: number
    isActive: number
    lastLoginAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AdminUserMinAggregateInputType = {
    id?: true
    walletAddress?: true
    email?: true
    username?: true
    displayName?: true
    role?: true
    isActive?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminUserMaxAggregateInputType = {
    id?: true
    walletAddress?: true
    email?: true
    username?: true
    displayName?: true
    role?: true
    isActive?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminUserCountAggregateInputType = {
    id?: true
    walletAddress?: true
    email?: true
    username?: true
    displayName?: true
    role?: true
    isActive?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AdminUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminUser to aggregate.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminUsers
    **/
    _count?: true | AdminUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminUserMaxAggregateInputType
  }

  export type GetAdminUserAggregateType<T extends AdminUserAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminUser[P]>
      : GetScalarType<T[P], AggregateAdminUser[P]>
  }




  export type AdminUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminUserWhereInput
    orderBy?: AdminUserOrderByWithAggregationInput | AdminUserOrderByWithAggregationInput[]
    by: AdminUserScalarFieldEnum[] | AdminUserScalarFieldEnum
    having?: AdminUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminUserCountAggregateInputType | true
    _min?: AdminUserMinAggregateInputType
    _max?: AdminUserMaxAggregateInputType
  }

  export type AdminUserGroupByOutputType = {
    id: string
    walletAddress: string
    email: string
    username: string
    displayName: string | null
    role: $Enums.AdminRole
    isActive: boolean
    lastLoginAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: AdminUserCountAggregateOutputType | null
    _min: AdminUserMinAggregateOutputType | null
    _max: AdminUserMaxAggregateOutputType | null
  }

  type GetAdminUserGroupByPayload<T extends AdminUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminUserGroupByOutputType[P]>
            : GetScalarType<T[P], AdminUserGroupByOutputType[P]>
        }
      >
    >


  export type AdminUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    email?: boolean
    username?: boolean
    displayName?: boolean
    role?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminActions?: boolean | AdminUser$adminActionsArgs<ExtArgs>
    adminNotes?: boolean | AdminUser$adminNotesArgs<ExtArgs>
    permissions?: boolean | AdminUser$permissionsArgs<ExtArgs>
    _count?: boolean | AdminUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminUser"]>

  export type AdminUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    email?: boolean
    username?: boolean
    displayName?: boolean
    role?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["adminUser"]>

  export type AdminUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    email?: boolean
    username?: boolean
    displayName?: boolean
    role?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["adminUser"]>

  export type AdminUserSelectScalar = {
    id?: boolean
    walletAddress?: boolean
    email?: boolean
    username?: boolean
    displayName?: boolean
    role?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AdminUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "walletAddress" | "email" | "username" | "displayName" | "role" | "isActive" | "lastLoginAt" | "createdAt" | "updatedAt", ExtArgs["result"]["adminUser"]>
  export type AdminUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminActions?: boolean | AdminUser$adminActionsArgs<ExtArgs>
    adminNotes?: boolean | AdminUser$adminNotesArgs<ExtArgs>
    permissions?: boolean | AdminUser$permissionsArgs<ExtArgs>
    _count?: boolean | AdminUserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AdminUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AdminUserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AdminUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminUser"
    objects: {
      adminActions: Prisma.$AdminActionPayload<ExtArgs>[]
      adminNotes: Prisma.$AdminNotePayload<ExtArgs>[]
      permissions: Prisma.$AdminPermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      walletAddress: string
      email: string
      username: string
      displayName: string | null
      role: $Enums.AdminRole
      isActive: boolean
      lastLoginAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["adminUser"]>
    composites: {}
  }

  type AdminUserGetPayload<S extends boolean | null | undefined | AdminUserDefaultArgs> = $Result.GetResult<Prisma.$AdminUserPayload, S>

  type AdminUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminUserCountAggregateInputType | true
    }

  export interface AdminUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminUser'], meta: { name: 'AdminUser' } }
    /**
     * Find zero or one AdminUser that matches the filter.
     * @param {AdminUserFindUniqueArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminUserFindUniqueArgs>(args: SelectSubset<T, AdminUserFindUniqueArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminUserFindUniqueOrThrowArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminUserFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserFindFirstArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminUserFindFirstArgs>(args?: SelectSubset<T, AdminUserFindFirstArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserFindFirstOrThrowArgs} args - Arguments to find a AdminUser
     * @example
     * // Get one AdminUser
     * const adminUser = await prisma.adminUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminUserFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminUsers
     * const adminUsers = await prisma.adminUser.findMany()
     * 
     * // Get first 10 AdminUsers
     * const adminUsers = await prisma.adminUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminUserWithIdOnly = await prisma.adminUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminUserFindManyArgs>(args?: SelectSubset<T, AdminUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminUser.
     * @param {AdminUserCreateArgs} args - Arguments to create a AdminUser.
     * @example
     * // Create one AdminUser
     * const AdminUser = await prisma.adminUser.create({
     *   data: {
     *     // ... data to create a AdminUser
     *   }
     * })
     * 
     */
    create<T extends AdminUserCreateArgs>(args: SelectSubset<T, AdminUserCreateArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminUsers.
     * @param {AdminUserCreateManyArgs} args - Arguments to create many AdminUsers.
     * @example
     * // Create many AdminUsers
     * const adminUser = await prisma.adminUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminUserCreateManyArgs>(args?: SelectSubset<T, AdminUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminUsers and returns the data saved in the database.
     * @param {AdminUserCreateManyAndReturnArgs} args - Arguments to create many AdminUsers.
     * @example
     * // Create many AdminUsers
     * const adminUser = await prisma.adminUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminUsers and only return the `id`
     * const adminUserWithIdOnly = await prisma.adminUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminUserCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AdminUser.
     * @param {AdminUserDeleteArgs} args - Arguments to delete one AdminUser.
     * @example
     * // Delete one AdminUser
     * const AdminUser = await prisma.adminUser.delete({
     *   where: {
     *     // ... filter to delete one AdminUser
     *   }
     * })
     * 
     */
    delete<T extends AdminUserDeleteArgs>(args: SelectSubset<T, AdminUserDeleteArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminUser.
     * @param {AdminUserUpdateArgs} args - Arguments to update one AdminUser.
     * @example
     * // Update one AdminUser
     * const adminUser = await prisma.adminUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUserUpdateArgs>(args: SelectSubset<T, AdminUserUpdateArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminUsers.
     * @param {AdminUserDeleteManyArgs} args - Arguments to filter AdminUsers to delete.
     * @example
     * // Delete a few AdminUsers
     * const { count } = await prisma.adminUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminUserDeleteManyArgs>(args?: SelectSubset<T, AdminUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminUsers
     * const adminUser = await prisma.adminUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUserUpdateManyArgs>(args: SelectSubset<T, AdminUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminUsers and returns the data updated in the database.
     * @param {AdminUserUpdateManyAndReturnArgs} args - Arguments to update many AdminUsers.
     * @example
     * // Update many AdminUsers
     * const adminUser = await prisma.adminUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AdminUsers and only return the `id`
     * const adminUserWithIdOnly = await prisma.adminUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUserUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AdminUser.
     * @param {AdminUserUpsertArgs} args - Arguments to update or create a AdminUser.
     * @example
     * // Update or create a AdminUser
     * const adminUser = await prisma.adminUser.upsert({
     *   create: {
     *     // ... data to create a AdminUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminUser we want to update
     *   }
     * })
     */
    upsert<T extends AdminUserUpsertArgs>(args: SelectSubset<T, AdminUserUpsertArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserCountArgs} args - Arguments to filter AdminUsers to count.
     * @example
     * // Count the number of AdminUsers
     * const count = await prisma.adminUser.count({
     *   where: {
     *     // ... the filter for the AdminUsers we want to count
     *   }
     * })
    **/
    count<T extends AdminUserCountArgs>(
      args?: Subset<T, AdminUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminUserAggregateArgs>(args: Subset<T, AdminUserAggregateArgs>): Prisma.PrismaPromise<GetAdminUserAggregateType<T>>

    /**
     * Group by AdminUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminUserGroupByArgs['orderBy'] }
        : { orderBy?: AdminUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminUser model
   */
  readonly fields: AdminUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    adminActions<T extends AdminUser$adminActionsArgs<ExtArgs> = {}>(args?: Subset<T, AdminUser$adminActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    adminNotes<T extends AdminUser$adminNotesArgs<ExtArgs> = {}>(args?: Subset<T, AdminUser$adminNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    permissions<T extends AdminUser$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, AdminUser$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminUser model
   */
  interface AdminUserFieldRefs {
    readonly id: FieldRef<"AdminUser", 'String'>
    readonly walletAddress: FieldRef<"AdminUser", 'String'>
    readonly email: FieldRef<"AdminUser", 'String'>
    readonly username: FieldRef<"AdminUser", 'String'>
    readonly displayName: FieldRef<"AdminUser", 'String'>
    readonly role: FieldRef<"AdminUser", 'AdminRole'>
    readonly isActive: FieldRef<"AdminUser", 'Boolean'>
    readonly lastLoginAt: FieldRef<"AdminUser", 'DateTime'>
    readonly createdAt: FieldRef<"AdminUser", 'DateTime'>
    readonly updatedAt: FieldRef<"AdminUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AdminUser findUnique
   */
  export type AdminUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where: AdminUserWhereUniqueInput
  }

  /**
   * AdminUser findUniqueOrThrow
   */
  export type AdminUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where: AdminUserWhereUniqueInput
  }

  /**
   * AdminUser findFirst
   */
  export type AdminUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminUsers.
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminUsers.
     */
    distinct?: AdminUserScalarFieldEnum | AdminUserScalarFieldEnum[]
  }

  /**
   * AdminUser findFirstOrThrow
   */
  export type AdminUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter, which AdminUser to fetch.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminUsers.
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminUsers.
     */
    distinct?: AdminUserScalarFieldEnum | AdminUserScalarFieldEnum[]
  }

  /**
   * AdminUser findMany
   */
  export type AdminUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter, which AdminUsers to fetch.
     */
    where?: AdminUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminUsers to fetch.
     */
    orderBy?: AdminUserOrderByWithRelationInput | AdminUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminUsers.
     */
    cursor?: AdminUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminUsers.
     */
    skip?: number
    distinct?: AdminUserScalarFieldEnum | AdminUserScalarFieldEnum[]
  }

  /**
   * AdminUser create
   */
  export type AdminUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminUser.
     */
    data: XOR<AdminUserCreateInput, AdminUserUncheckedCreateInput>
  }

  /**
   * AdminUser createMany
   */
  export type AdminUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminUsers.
     */
    data: AdminUserCreateManyInput | AdminUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminUser createManyAndReturn
   */
  export type AdminUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * The data used to create many AdminUsers.
     */
    data: AdminUserCreateManyInput | AdminUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminUser update
   */
  export type AdminUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminUser.
     */
    data: XOR<AdminUserUpdateInput, AdminUserUncheckedUpdateInput>
    /**
     * Choose, which AdminUser to update.
     */
    where: AdminUserWhereUniqueInput
  }

  /**
   * AdminUser updateMany
   */
  export type AdminUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminUsers.
     */
    data: XOR<AdminUserUpdateManyMutationInput, AdminUserUncheckedUpdateManyInput>
    /**
     * Filter which AdminUsers to update
     */
    where?: AdminUserWhereInput
    /**
     * Limit how many AdminUsers to update.
     */
    limit?: number
  }

  /**
   * AdminUser updateManyAndReturn
   */
  export type AdminUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * The data used to update AdminUsers.
     */
    data: XOR<AdminUserUpdateManyMutationInput, AdminUserUncheckedUpdateManyInput>
    /**
     * Filter which AdminUsers to update
     */
    where?: AdminUserWhereInput
    /**
     * Limit how many AdminUsers to update.
     */
    limit?: number
  }

  /**
   * AdminUser upsert
   */
  export type AdminUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminUser to update in case it exists.
     */
    where: AdminUserWhereUniqueInput
    /**
     * In case the AdminUser found by the `where` argument doesn't exist, create a new AdminUser with this data.
     */
    create: XOR<AdminUserCreateInput, AdminUserUncheckedCreateInput>
    /**
     * In case the AdminUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUserUpdateInput, AdminUserUncheckedUpdateInput>
  }

  /**
   * AdminUser delete
   */
  export type AdminUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
    /**
     * Filter which AdminUser to delete.
     */
    where: AdminUserWhereUniqueInput
  }

  /**
   * AdminUser deleteMany
   */
  export type AdminUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminUsers to delete
     */
    where?: AdminUserWhereInput
    /**
     * Limit how many AdminUsers to delete.
     */
    limit?: number
  }

  /**
   * AdminUser.adminActions
   */
  export type AdminUser$adminActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    where?: AdminActionWhereInput
    orderBy?: AdminActionOrderByWithRelationInput | AdminActionOrderByWithRelationInput[]
    cursor?: AdminActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminActionScalarFieldEnum | AdminActionScalarFieldEnum[]
  }

  /**
   * AdminUser.adminNotes
   */
  export type AdminUser$adminNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminNote
     */
    select?: AdminNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminNote
     */
    omit?: AdminNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminNoteInclude<ExtArgs> | null
    where?: AdminNoteWhereInput
    orderBy?: AdminNoteOrderByWithRelationInput | AdminNoteOrderByWithRelationInput[]
    cursor?: AdminNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminNoteScalarFieldEnum | AdminNoteScalarFieldEnum[]
  }

  /**
   * AdminUser.permissions
   */
  export type AdminUser$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminPermission
     */
    select?: AdminPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminPermission
     */
    omit?: AdminPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminPermissionInclude<ExtArgs> | null
    where?: AdminPermissionWhereInput
    orderBy?: AdminPermissionOrderByWithRelationInput | AdminPermissionOrderByWithRelationInput[]
    cursor?: AdminPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminPermissionScalarFieldEnum | AdminPermissionScalarFieldEnum[]
  }

  /**
   * AdminUser without action
   */
  export type AdminUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminUser
     */
    select?: AdminUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminUser
     */
    omit?: AdminUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminUserInclude<ExtArgs> | null
  }


  /**
   * Model AdminPermission
   */

  export type AggregateAdminPermission = {
    _count: AdminPermissionCountAggregateOutputType | null
    _min: AdminPermissionMinAggregateOutputType | null
    _max: AdminPermissionMaxAggregateOutputType | null
  }

  export type AdminPermissionMinAggregateOutputType = {
    id: string | null
    adminUserId: string | null
    permission: string | null
    grantedAt: Date | null
    grantedBy: string | null
  }

  export type AdminPermissionMaxAggregateOutputType = {
    id: string | null
    adminUserId: string | null
    permission: string | null
    grantedAt: Date | null
    grantedBy: string | null
  }

  export type AdminPermissionCountAggregateOutputType = {
    id: number
    adminUserId: number
    permission: number
    grantedAt: number
    grantedBy: number
    _all: number
  }


  export type AdminPermissionMinAggregateInputType = {
    id?: true
    adminUserId?: true
    permission?: true
    grantedAt?: true
    grantedBy?: true
  }

  export type AdminPermissionMaxAggregateInputType = {
    id?: true
    adminUserId?: true
    permission?: true
    grantedAt?: true
    grantedBy?: true
  }

  export type AdminPermissionCountAggregateInputType = {
    id?: true
    adminUserId?: true
    permission?: true
    grantedAt?: true
    grantedBy?: true
    _all?: true
  }

  export type AdminPermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminPermission to aggregate.
     */
    where?: AdminPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminPermissions to fetch.
     */
    orderBy?: AdminPermissionOrderByWithRelationInput | AdminPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminPermissions
    **/
    _count?: true | AdminPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminPermissionMaxAggregateInputType
  }

  export type GetAdminPermissionAggregateType<T extends AdminPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminPermission[P]>
      : GetScalarType<T[P], AggregateAdminPermission[P]>
  }




  export type AdminPermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminPermissionWhereInput
    orderBy?: AdminPermissionOrderByWithAggregationInput | AdminPermissionOrderByWithAggregationInput[]
    by: AdminPermissionScalarFieldEnum[] | AdminPermissionScalarFieldEnum
    having?: AdminPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminPermissionCountAggregateInputType | true
    _min?: AdminPermissionMinAggregateInputType
    _max?: AdminPermissionMaxAggregateInputType
  }

  export type AdminPermissionGroupByOutputType = {
    id: string
    adminUserId: string
    permission: string
    grantedAt: Date
    grantedBy: string
    _count: AdminPermissionCountAggregateOutputType | null
    _min: AdminPermissionMinAggregateOutputType | null
    _max: AdminPermissionMaxAggregateOutputType | null
  }

  type GetAdminPermissionGroupByPayload<T extends AdminPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], AdminPermissionGroupByOutputType[P]>
        }
      >
    >


  export type AdminPermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminUserId?: boolean
    permission?: boolean
    grantedAt?: boolean
    grantedBy?: boolean
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminPermission"]>

  export type AdminPermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminUserId?: boolean
    permission?: boolean
    grantedAt?: boolean
    grantedBy?: boolean
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminPermission"]>

  export type AdminPermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminUserId?: boolean
    permission?: boolean
    grantedAt?: boolean
    grantedBy?: boolean
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminPermission"]>

  export type AdminPermissionSelectScalar = {
    id?: boolean
    adminUserId?: boolean
    permission?: boolean
    grantedAt?: boolean
    grantedBy?: boolean
  }

  export type AdminPermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "adminUserId" | "permission" | "grantedAt" | "grantedBy", ExtArgs["result"]["adminPermission"]>
  export type AdminPermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
  }
  export type AdminPermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
  }
  export type AdminPermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
  }

  export type $AdminPermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminPermission"
    objects: {
      adminUser: Prisma.$AdminUserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      adminUserId: string
      permission: string
      grantedAt: Date
      grantedBy: string
    }, ExtArgs["result"]["adminPermission"]>
    composites: {}
  }

  type AdminPermissionGetPayload<S extends boolean | null | undefined | AdminPermissionDefaultArgs> = $Result.GetResult<Prisma.$AdminPermissionPayload, S>

  type AdminPermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminPermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminPermissionCountAggregateInputType | true
    }

  export interface AdminPermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminPermission'], meta: { name: 'AdminPermission' } }
    /**
     * Find zero or one AdminPermission that matches the filter.
     * @param {AdminPermissionFindUniqueArgs} args - Arguments to find a AdminPermission
     * @example
     * // Get one AdminPermission
     * const adminPermission = await prisma.adminPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminPermissionFindUniqueArgs>(args: SelectSubset<T, AdminPermissionFindUniqueArgs<ExtArgs>>): Prisma__AdminPermissionClient<$Result.GetResult<Prisma.$AdminPermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminPermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminPermissionFindUniqueOrThrowArgs} args - Arguments to find a AdminPermission
     * @example
     * // Get one AdminPermission
     * const adminPermission = await prisma.adminPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminPermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminPermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminPermissionClient<$Result.GetResult<Prisma.$AdminPermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminPermissionFindFirstArgs} args - Arguments to find a AdminPermission
     * @example
     * // Get one AdminPermission
     * const adminPermission = await prisma.adminPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminPermissionFindFirstArgs>(args?: SelectSubset<T, AdminPermissionFindFirstArgs<ExtArgs>>): Prisma__AdminPermissionClient<$Result.GetResult<Prisma.$AdminPermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminPermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminPermissionFindFirstOrThrowArgs} args - Arguments to find a AdminPermission
     * @example
     * // Get one AdminPermission
     * const adminPermission = await prisma.adminPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminPermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminPermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminPermissionClient<$Result.GetResult<Prisma.$AdminPermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminPermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminPermissions
     * const adminPermissions = await prisma.adminPermission.findMany()
     * 
     * // Get first 10 AdminPermissions
     * const adminPermissions = await prisma.adminPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminPermissionWithIdOnly = await prisma.adminPermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminPermissionFindManyArgs>(args?: SelectSubset<T, AdminPermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminPermission.
     * @param {AdminPermissionCreateArgs} args - Arguments to create a AdminPermission.
     * @example
     * // Create one AdminPermission
     * const AdminPermission = await prisma.adminPermission.create({
     *   data: {
     *     // ... data to create a AdminPermission
     *   }
     * })
     * 
     */
    create<T extends AdminPermissionCreateArgs>(args: SelectSubset<T, AdminPermissionCreateArgs<ExtArgs>>): Prisma__AdminPermissionClient<$Result.GetResult<Prisma.$AdminPermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminPermissions.
     * @param {AdminPermissionCreateManyArgs} args - Arguments to create many AdminPermissions.
     * @example
     * // Create many AdminPermissions
     * const adminPermission = await prisma.adminPermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminPermissionCreateManyArgs>(args?: SelectSubset<T, AdminPermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminPermissions and returns the data saved in the database.
     * @param {AdminPermissionCreateManyAndReturnArgs} args - Arguments to create many AdminPermissions.
     * @example
     * // Create many AdminPermissions
     * const adminPermission = await prisma.adminPermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminPermissions and only return the `id`
     * const adminPermissionWithIdOnly = await prisma.adminPermission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminPermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminPermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AdminPermission.
     * @param {AdminPermissionDeleteArgs} args - Arguments to delete one AdminPermission.
     * @example
     * // Delete one AdminPermission
     * const AdminPermission = await prisma.adminPermission.delete({
     *   where: {
     *     // ... filter to delete one AdminPermission
     *   }
     * })
     * 
     */
    delete<T extends AdminPermissionDeleteArgs>(args: SelectSubset<T, AdminPermissionDeleteArgs<ExtArgs>>): Prisma__AdminPermissionClient<$Result.GetResult<Prisma.$AdminPermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminPermission.
     * @param {AdminPermissionUpdateArgs} args - Arguments to update one AdminPermission.
     * @example
     * // Update one AdminPermission
     * const adminPermission = await prisma.adminPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminPermissionUpdateArgs>(args: SelectSubset<T, AdminPermissionUpdateArgs<ExtArgs>>): Prisma__AdminPermissionClient<$Result.GetResult<Prisma.$AdminPermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminPermissions.
     * @param {AdminPermissionDeleteManyArgs} args - Arguments to filter AdminPermissions to delete.
     * @example
     * // Delete a few AdminPermissions
     * const { count } = await prisma.adminPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminPermissionDeleteManyArgs>(args?: SelectSubset<T, AdminPermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminPermissions
     * const adminPermission = await prisma.adminPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminPermissionUpdateManyArgs>(args: SelectSubset<T, AdminPermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminPermissions and returns the data updated in the database.
     * @param {AdminPermissionUpdateManyAndReturnArgs} args - Arguments to update many AdminPermissions.
     * @example
     * // Update many AdminPermissions
     * const adminPermission = await prisma.adminPermission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AdminPermissions and only return the `id`
     * const adminPermissionWithIdOnly = await prisma.adminPermission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminPermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminPermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AdminPermission.
     * @param {AdminPermissionUpsertArgs} args - Arguments to update or create a AdminPermission.
     * @example
     * // Update or create a AdminPermission
     * const adminPermission = await prisma.adminPermission.upsert({
     *   create: {
     *     // ... data to create a AdminPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminPermission we want to update
     *   }
     * })
     */
    upsert<T extends AdminPermissionUpsertArgs>(args: SelectSubset<T, AdminPermissionUpsertArgs<ExtArgs>>): Prisma__AdminPermissionClient<$Result.GetResult<Prisma.$AdminPermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminPermissionCountArgs} args - Arguments to filter AdminPermissions to count.
     * @example
     * // Count the number of AdminPermissions
     * const count = await prisma.adminPermission.count({
     *   where: {
     *     // ... the filter for the AdminPermissions we want to count
     *   }
     * })
    **/
    count<T extends AdminPermissionCountArgs>(
      args?: Subset<T, AdminPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminPermissionAggregateArgs>(args: Subset<T, AdminPermissionAggregateArgs>): Prisma.PrismaPromise<GetAdminPermissionAggregateType<T>>

    /**
     * Group by AdminPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminPermissionGroupByArgs['orderBy'] }
        : { orderBy?: AdminPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminPermission model
   */
  readonly fields: AdminPermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminPermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    adminUser<T extends AdminUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminUserDefaultArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminPermission model
   */
  interface AdminPermissionFieldRefs {
    readonly id: FieldRef<"AdminPermission", 'String'>
    readonly adminUserId: FieldRef<"AdminPermission", 'String'>
    readonly permission: FieldRef<"AdminPermission", 'String'>
    readonly grantedAt: FieldRef<"AdminPermission", 'DateTime'>
    readonly grantedBy: FieldRef<"AdminPermission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AdminPermission findUnique
   */
  export type AdminPermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminPermission
     */
    select?: AdminPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminPermission
     */
    omit?: AdminPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminPermissionInclude<ExtArgs> | null
    /**
     * Filter, which AdminPermission to fetch.
     */
    where: AdminPermissionWhereUniqueInput
  }

  /**
   * AdminPermission findUniqueOrThrow
   */
  export type AdminPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminPermission
     */
    select?: AdminPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminPermission
     */
    omit?: AdminPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminPermissionInclude<ExtArgs> | null
    /**
     * Filter, which AdminPermission to fetch.
     */
    where: AdminPermissionWhereUniqueInput
  }

  /**
   * AdminPermission findFirst
   */
  export type AdminPermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminPermission
     */
    select?: AdminPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminPermission
     */
    omit?: AdminPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminPermissionInclude<ExtArgs> | null
    /**
     * Filter, which AdminPermission to fetch.
     */
    where?: AdminPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminPermissions to fetch.
     */
    orderBy?: AdminPermissionOrderByWithRelationInput | AdminPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminPermissions.
     */
    cursor?: AdminPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminPermissions.
     */
    distinct?: AdminPermissionScalarFieldEnum | AdminPermissionScalarFieldEnum[]
  }

  /**
   * AdminPermission findFirstOrThrow
   */
  export type AdminPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminPermission
     */
    select?: AdminPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminPermission
     */
    omit?: AdminPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminPermissionInclude<ExtArgs> | null
    /**
     * Filter, which AdminPermission to fetch.
     */
    where?: AdminPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminPermissions to fetch.
     */
    orderBy?: AdminPermissionOrderByWithRelationInput | AdminPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminPermissions.
     */
    cursor?: AdminPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminPermissions.
     */
    distinct?: AdminPermissionScalarFieldEnum | AdminPermissionScalarFieldEnum[]
  }

  /**
   * AdminPermission findMany
   */
  export type AdminPermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminPermission
     */
    select?: AdminPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminPermission
     */
    omit?: AdminPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminPermissionInclude<ExtArgs> | null
    /**
     * Filter, which AdminPermissions to fetch.
     */
    where?: AdminPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminPermissions to fetch.
     */
    orderBy?: AdminPermissionOrderByWithRelationInput | AdminPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminPermissions.
     */
    cursor?: AdminPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminPermissions.
     */
    skip?: number
    distinct?: AdminPermissionScalarFieldEnum | AdminPermissionScalarFieldEnum[]
  }

  /**
   * AdminPermission create
   */
  export type AdminPermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminPermission
     */
    select?: AdminPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminPermission
     */
    omit?: AdminPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminPermission.
     */
    data: XOR<AdminPermissionCreateInput, AdminPermissionUncheckedCreateInput>
  }

  /**
   * AdminPermission createMany
   */
  export type AdminPermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminPermissions.
     */
    data: AdminPermissionCreateManyInput | AdminPermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminPermission createManyAndReturn
   */
  export type AdminPermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminPermission
     */
    select?: AdminPermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminPermission
     */
    omit?: AdminPermissionOmit<ExtArgs> | null
    /**
     * The data used to create many AdminPermissions.
     */
    data: AdminPermissionCreateManyInput | AdminPermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminPermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminPermission update
   */
  export type AdminPermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminPermission
     */
    select?: AdminPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminPermission
     */
    omit?: AdminPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminPermission.
     */
    data: XOR<AdminPermissionUpdateInput, AdminPermissionUncheckedUpdateInput>
    /**
     * Choose, which AdminPermission to update.
     */
    where: AdminPermissionWhereUniqueInput
  }

  /**
   * AdminPermission updateMany
   */
  export type AdminPermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminPermissions.
     */
    data: XOR<AdminPermissionUpdateManyMutationInput, AdminPermissionUncheckedUpdateManyInput>
    /**
     * Filter which AdminPermissions to update
     */
    where?: AdminPermissionWhereInput
    /**
     * Limit how many AdminPermissions to update.
     */
    limit?: number
  }

  /**
   * AdminPermission updateManyAndReturn
   */
  export type AdminPermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminPermission
     */
    select?: AdminPermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminPermission
     */
    omit?: AdminPermissionOmit<ExtArgs> | null
    /**
     * The data used to update AdminPermissions.
     */
    data: XOR<AdminPermissionUpdateManyMutationInput, AdminPermissionUncheckedUpdateManyInput>
    /**
     * Filter which AdminPermissions to update
     */
    where?: AdminPermissionWhereInput
    /**
     * Limit how many AdminPermissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminPermissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminPermission upsert
   */
  export type AdminPermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminPermission
     */
    select?: AdminPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminPermission
     */
    omit?: AdminPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminPermission to update in case it exists.
     */
    where: AdminPermissionWhereUniqueInput
    /**
     * In case the AdminPermission found by the `where` argument doesn't exist, create a new AdminPermission with this data.
     */
    create: XOR<AdminPermissionCreateInput, AdminPermissionUncheckedCreateInput>
    /**
     * In case the AdminPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminPermissionUpdateInput, AdminPermissionUncheckedUpdateInput>
  }

  /**
   * AdminPermission delete
   */
  export type AdminPermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminPermission
     */
    select?: AdminPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminPermission
     */
    omit?: AdminPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminPermissionInclude<ExtArgs> | null
    /**
     * Filter which AdminPermission to delete.
     */
    where: AdminPermissionWhereUniqueInput
  }

  /**
   * AdminPermission deleteMany
   */
  export type AdminPermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminPermissions to delete
     */
    where?: AdminPermissionWhereInput
    /**
     * Limit how many AdminPermissions to delete.
     */
    limit?: number
  }

  /**
   * AdminPermission without action
   */
  export type AdminPermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminPermission
     */
    select?: AdminPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminPermission
     */
    omit?: AdminPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminPermissionInclude<ExtArgs> | null
  }


  /**
   * Model AdminAction
   */

  export type AggregateAdminAction = {
    _count: AdminActionCountAggregateOutputType | null
    _min: AdminActionMinAggregateOutputType | null
    _max: AdminActionMaxAggregateOutputType | null
  }

  export type AdminActionMinAggregateOutputType = {
    id: string | null
    adminUserId: string | null
    actionType: $Enums.AdminActionType | null
    targetWallet: string | null
    targetProfileId: string | null
    reason: string | null
    status: $Enums.AdminActionStatus | null
    errorMessage: string | null
    createdAt: Date | null
    completedAt: Date | null
  }

  export type AdminActionMaxAggregateOutputType = {
    id: string | null
    adminUserId: string | null
    actionType: $Enums.AdminActionType | null
    targetWallet: string | null
    targetProfileId: string | null
    reason: string | null
    status: $Enums.AdminActionStatus | null
    errorMessage: string | null
    createdAt: Date | null
    completedAt: Date | null
  }

  export type AdminActionCountAggregateOutputType = {
    id: number
    adminUserId: number
    actionType: number
    targetWallet: number
    targetProfileId: number
    reason: number
    metadata: number
    status: number
    result: number
    errorMessage: number
    createdAt: number
    completedAt: number
    _all: number
  }


  export type AdminActionMinAggregateInputType = {
    id?: true
    adminUserId?: true
    actionType?: true
    targetWallet?: true
    targetProfileId?: true
    reason?: true
    status?: true
    errorMessage?: true
    createdAt?: true
    completedAt?: true
  }

  export type AdminActionMaxAggregateInputType = {
    id?: true
    adminUserId?: true
    actionType?: true
    targetWallet?: true
    targetProfileId?: true
    reason?: true
    status?: true
    errorMessage?: true
    createdAt?: true
    completedAt?: true
  }

  export type AdminActionCountAggregateInputType = {
    id?: true
    adminUserId?: true
    actionType?: true
    targetWallet?: true
    targetProfileId?: true
    reason?: true
    metadata?: true
    status?: true
    result?: true
    errorMessage?: true
    createdAt?: true
    completedAt?: true
    _all?: true
  }

  export type AdminActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminAction to aggregate.
     */
    where?: AdminActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActions to fetch.
     */
    orderBy?: AdminActionOrderByWithRelationInput | AdminActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminActions
    **/
    _count?: true | AdminActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminActionMaxAggregateInputType
  }

  export type GetAdminActionAggregateType<T extends AdminActionAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminAction[P]>
      : GetScalarType<T[P], AggregateAdminAction[P]>
  }




  export type AdminActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminActionWhereInput
    orderBy?: AdminActionOrderByWithAggregationInput | AdminActionOrderByWithAggregationInput[]
    by: AdminActionScalarFieldEnum[] | AdminActionScalarFieldEnum
    having?: AdminActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminActionCountAggregateInputType | true
    _min?: AdminActionMinAggregateInputType
    _max?: AdminActionMaxAggregateInputType
  }

  export type AdminActionGroupByOutputType = {
    id: string
    adminUserId: string
    actionType: $Enums.AdminActionType
    targetWallet: string
    targetProfileId: string | null
    reason: string
    metadata: JsonValue | null
    status: $Enums.AdminActionStatus
    result: JsonValue | null
    errorMessage: string | null
    createdAt: Date
    completedAt: Date | null
    _count: AdminActionCountAggregateOutputType | null
    _min: AdminActionMinAggregateOutputType | null
    _max: AdminActionMaxAggregateOutputType | null
  }

  type GetAdminActionGroupByPayload<T extends AdminActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminActionGroupByOutputType[P]>
            : GetScalarType<T[P], AdminActionGroupByOutputType[P]>
        }
      >
    >


  export type AdminActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminUserId?: boolean
    actionType?: boolean
    targetWallet?: boolean
    targetProfileId?: boolean
    reason?: boolean
    metadata?: boolean
    status?: boolean
    result?: boolean
    errorMessage?: boolean
    createdAt?: boolean
    completedAt?: boolean
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminAction"]>

  export type AdminActionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminUserId?: boolean
    actionType?: boolean
    targetWallet?: boolean
    targetProfileId?: boolean
    reason?: boolean
    metadata?: boolean
    status?: boolean
    result?: boolean
    errorMessage?: boolean
    createdAt?: boolean
    completedAt?: boolean
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminAction"]>

  export type AdminActionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminUserId?: boolean
    actionType?: boolean
    targetWallet?: boolean
    targetProfileId?: boolean
    reason?: boolean
    metadata?: boolean
    status?: boolean
    result?: boolean
    errorMessage?: boolean
    createdAt?: boolean
    completedAt?: boolean
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminAction"]>

  export type AdminActionSelectScalar = {
    id?: boolean
    adminUserId?: boolean
    actionType?: boolean
    targetWallet?: boolean
    targetProfileId?: boolean
    reason?: boolean
    metadata?: boolean
    status?: boolean
    result?: boolean
    errorMessage?: boolean
    createdAt?: boolean
    completedAt?: boolean
  }

  export type AdminActionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "adminUserId" | "actionType" | "targetWallet" | "targetProfileId" | "reason" | "metadata" | "status" | "result" | "errorMessage" | "createdAt" | "completedAt", ExtArgs["result"]["adminAction"]>
  export type AdminActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
  }
  export type AdminActionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
  }
  export type AdminActionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
  }

  export type $AdminActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminAction"
    objects: {
      adminUser: Prisma.$AdminUserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      adminUserId: string
      actionType: $Enums.AdminActionType
      targetWallet: string
      targetProfileId: string | null
      reason: string
      metadata: Prisma.JsonValue | null
      status: $Enums.AdminActionStatus
      result: Prisma.JsonValue | null
      errorMessage: string | null
      createdAt: Date
      completedAt: Date | null
    }, ExtArgs["result"]["adminAction"]>
    composites: {}
  }

  type AdminActionGetPayload<S extends boolean | null | undefined | AdminActionDefaultArgs> = $Result.GetResult<Prisma.$AdminActionPayload, S>

  type AdminActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminActionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminActionCountAggregateInputType | true
    }

  export interface AdminActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminAction'], meta: { name: 'AdminAction' } }
    /**
     * Find zero or one AdminAction that matches the filter.
     * @param {AdminActionFindUniqueArgs} args - Arguments to find a AdminAction
     * @example
     * // Get one AdminAction
     * const adminAction = await prisma.adminAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminActionFindUniqueArgs>(args: SelectSubset<T, AdminActionFindUniqueArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminAction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminActionFindUniqueOrThrowArgs} args - Arguments to find a AdminAction
     * @example
     * // Get one AdminAction
     * const adminAction = await prisma.adminAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminActionFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionFindFirstArgs} args - Arguments to find a AdminAction
     * @example
     * // Get one AdminAction
     * const adminAction = await prisma.adminAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminActionFindFirstArgs>(args?: SelectSubset<T, AdminActionFindFirstArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionFindFirstOrThrowArgs} args - Arguments to find a AdminAction
     * @example
     * // Get one AdminAction
     * const adminAction = await prisma.adminAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminActionFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminActions
     * const adminActions = await prisma.adminAction.findMany()
     * 
     * // Get first 10 AdminActions
     * const adminActions = await prisma.adminAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminActionWithIdOnly = await prisma.adminAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminActionFindManyArgs>(args?: SelectSubset<T, AdminActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminAction.
     * @param {AdminActionCreateArgs} args - Arguments to create a AdminAction.
     * @example
     * // Create one AdminAction
     * const AdminAction = await prisma.adminAction.create({
     *   data: {
     *     // ... data to create a AdminAction
     *   }
     * })
     * 
     */
    create<T extends AdminActionCreateArgs>(args: SelectSubset<T, AdminActionCreateArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminActions.
     * @param {AdminActionCreateManyArgs} args - Arguments to create many AdminActions.
     * @example
     * // Create many AdminActions
     * const adminAction = await prisma.adminAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminActionCreateManyArgs>(args?: SelectSubset<T, AdminActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminActions and returns the data saved in the database.
     * @param {AdminActionCreateManyAndReturnArgs} args - Arguments to create many AdminActions.
     * @example
     * // Create many AdminActions
     * const adminAction = await prisma.adminAction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminActions and only return the `id`
     * const adminActionWithIdOnly = await prisma.adminAction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminActionCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AdminAction.
     * @param {AdminActionDeleteArgs} args - Arguments to delete one AdminAction.
     * @example
     * // Delete one AdminAction
     * const AdminAction = await prisma.adminAction.delete({
     *   where: {
     *     // ... filter to delete one AdminAction
     *   }
     * })
     * 
     */
    delete<T extends AdminActionDeleteArgs>(args: SelectSubset<T, AdminActionDeleteArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminAction.
     * @param {AdminActionUpdateArgs} args - Arguments to update one AdminAction.
     * @example
     * // Update one AdminAction
     * const adminAction = await prisma.adminAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminActionUpdateArgs>(args: SelectSubset<T, AdminActionUpdateArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminActions.
     * @param {AdminActionDeleteManyArgs} args - Arguments to filter AdminActions to delete.
     * @example
     * // Delete a few AdminActions
     * const { count } = await prisma.adminAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminActionDeleteManyArgs>(args?: SelectSubset<T, AdminActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminActions
     * const adminAction = await prisma.adminAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminActionUpdateManyArgs>(args: SelectSubset<T, AdminActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminActions and returns the data updated in the database.
     * @param {AdminActionUpdateManyAndReturnArgs} args - Arguments to update many AdminActions.
     * @example
     * // Update many AdminActions
     * const adminAction = await prisma.adminAction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AdminActions and only return the `id`
     * const adminActionWithIdOnly = await prisma.adminAction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminActionUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminActionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AdminAction.
     * @param {AdminActionUpsertArgs} args - Arguments to update or create a AdminAction.
     * @example
     * // Update or create a AdminAction
     * const adminAction = await prisma.adminAction.upsert({
     *   create: {
     *     // ... data to create a AdminAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminAction we want to update
     *   }
     * })
     */
    upsert<T extends AdminActionUpsertArgs>(args: SelectSubset<T, AdminActionUpsertArgs<ExtArgs>>): Prisma__AdminActionClient<$Result.GetResult<Prisma.$AdminActionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionCountArgs} args - Arguments to filter AdminActions to count.
     * @example
     * // Count the number of AdminActions
     * const count = await prisma.adminAction.count({
     *   where: {
     *     // ... the filter for the AdminActions we want to count
     *   }
     * })
    **/
    count<T extends AdminActionCountArgs>(
      args?: Subset<T, AdminActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminActionAggregateArgs>(args: Subset<T, AdminActionAggregateArgs>): Prisma.PrismaPromise<GetAdminActionAggregateType<T>>

    /**
     * Group by AdminAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminActionGroupByArgs['orderBy'] }
        : { orderBy?: AdminActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminAction model
   */
  readonly fields: AdminActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    adminUser<T extends AdminUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminUserDefaultArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminAction model
   */
  interface AdminActionFieldRefs {
    readonly id: FieldRef<"AdminAction", 'String'>
    readonly adminUserId: FieldRef<"AdminAction", 'String'>
    readonly actionType: FieldRef<"AdminAction", 'AdminActionType'>
    readonly targetWallet: FieldRef<"AdminAction", 'String'>
    readonly targetProfileId: FieldRef<"AdminAction", 'String'>
    readonly reason: FieldRef<"AdminAction", 'String'>
    readonly metadata: FieldRef<"AdminAction", 'Json'>
    readonly status: FieldRef<"AdminAction", 'AdminActionStatus'>
    readonly result: FieldRef<"AdminAction", 'Json'>
    readonly errorMessage: FieldRef<"AdminAction", 'String'>
    readonly createdAt: FieldRef<"AdminAction", 'DateTime'>
    readonly completedAt: FieldRef<"AdminAction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AdminAction findUnique
   */
  export type AdminActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter, which AdminAction to fetch.
     */
    where: AdminActionWhereUniqueInput
  }

  /**
   * AdminAction findUniqueOrThrow
   */
  export type AdminActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter, which AdminAction to fetch.
     */
    where: AdminActionWhereUniqueInput
  }

  /**
   * AdminAction findFirst
   */
  export type AdminActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter, which AdminAction to fetch.
     */
    where?: AdminActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActions to fetch.
     */
    orderBy?: AdminActionOrderByWithRelationInput | AdminActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminActions.
     */
    cursor?: AdminActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminActions.
     */
    distinct?: AdminActionScalarFieldEnum | AdminActionScalarFieldEnum[]
  }

  /**
   * AdminAction findFirstOrThrow
   */
  export type AdminActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter, which AdminAction to fetch.
     */
    where?: AdminActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActions to fetch.
     */
    orderBy?: AdminActionOrderByWithRelationInput | AdminActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminActions.
     */
    cursor?: AdminActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminActions.
     */
    distinct?: AdminActionScalarFieldEnum | AdminActionScalarFieldEnum[]
  }

  /**
   * AdminAction findMany
   */
  export type AdminActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter, which AdminActions to fetch.
     */
    where?: AdminActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminActions to fetch.
     */
    orderBy?: AdminActionOrderByWithRelationInput | AdminActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminActions.
     */
    cursor?: AdminActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminActions.
     */
    skip?: number
    distinct?: AdminActionScalarFieldEnum | AdminActionScalarFieldEnum[]
  }

  /**
   * AdminAction create
   */
  export type AdminActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminAction.
     */
    data: XOR<AdminActionCreateInput, AdminActionUncheckedCreateInput>
  }

  /**
   * AdminAction createMany
   */
  export type AdminActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminActions.
     */
    data: AdminActionCreateManyInput | AdminActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminAction createManyAndReturn
   */
  export type AdminActionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * The data used to create many AdminActions.
     */
    data: AdminActionCreateManyInput | AdminActionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminAction update
   */
  export type AdminActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminAction.
     */
    data: XOR<AdminActionUpdateInput, AdminActionUncheckedUpdateInput>
    /**
     * Choose, which AdminAction to update.
     */
    where: AdminActionWhereUniqueInput
  }

  /**
   * AdminAction updateMany
   */
  export type AdminActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminActions.
     */
    data: XOR<AdminActionUpdateManyMutationInput, AdminActionUncheckedUpdateManyInput>
    /**
     * Filter which AdminActions to update
     */
    where?: AdminActionWhereInput
    /**
     * Limit how many AdminActions to update.
     */
    limit?: number
  }

  /**
   * AdminAction updateManyAndReturn
   */
  export type AdminActionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * The data used to update AdminActions.
     */
    data: XOR<AdminActionUpdateManyMutationInput, AdminActionUncheckedUpdateManyInput>
    /**
     * Filter which AdminActions to update
     */
    where?: AdminActionWhereInput
    /**
     * Limit how many AdminActions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminAction upsert
   */
  export type AdminActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminAction to update in case it exists.
     */
    where: AdminActionWhereUniqueInput
    /**
     * In case the AdminAction found by the `where` argument doesn't exist, create a new AdminAction with this data.
     */
    create: XOR<AdminActionCreateInput, AdminActionUncheckedCreateInput>
    /**
     * In case the AdminAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminActionUpdateInput, AdminActionUncheckedUpdateInput>
  }

  /**
   * AdminAction delete
   */
  export type AdminActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
    /**
     * Filter which AdminAction to delete.
     */
    where: AdminActionWhereUniqueInput
  }

  /**
   * AdminAction deleteMany
   */
  export type AdminActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminActions to delete
     */
    where?: AdminActionWhereInput
    /**
     * Limit how many AdminActions to delete.
     */
    limit?: number
  }

  /**
   * AdminAction without action
   */
  export type AdminActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminAction
     */
    select?: AdminActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminAction
     */
    omit?: AdminActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminActionInclude<ExtArgs> | null
  }


  /**
   * Model AdminNote
   */

  export type AggregateAdminNote = {
    _count: AdminNoteCountAggregateOutputType | null
    _min: AdminNoteMinAggregateOutputType | null
    _max: AdminNoteMaxAggregateOutputType | null
  }

  export type AdminNoteMinAggregateOutputType = {
    id: string | null
    adminUserId: string | null
    walletAddress: string | null
    note: string | null
    isPrivate: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminNoteMaxAggregateOutputType = {
    id: string | null
    adminUserId: string | null
    walletAddress: string | null
    note: string | null
    isPrivate: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminNoteCountAggregateOutputType = {
    id: number
    adminUserId: number
    walletAddress: number
    note: number
    isPrivate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AdminNoteMinAggregateInputType = {
    id?: true
    adminUserId?: true
    walletAddress?: true
    note?: true
    isPrivate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminNoteMaxAggregateInputType = {
    id?: true
    adminUserId?: true
    walletAddress?: true
    note?: true
    isPrivate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminNoteCountAggregateInputType = {
    id?: true
    adminUserId?: true
    walletAddress?: true
    note?: true
    isPrivate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AdminNoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminNote to aggregate.
     */
    where?: AdminNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminNotes to fetch.
     */
    orderBy?: AdminNoteOrderByWithRelationInput | AdminNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminNotes
    **/
    _count?: true | AdminNoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminNoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminNoteMaxAggregateInputType
  }

  export type GetAdminNoteAggregateType<T extends AdminNoteAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminNote[P]>
      : GetScalarType<T[P], AggregateAdminNote[P]>
  }




  export type AdminNoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminNoteWhereInput
    orderBy?: AdminNoteOrderByWithAggregationInput | AdminNoteOrderByWithAggregationInput[]
    by: AdminNoteScalarFieldEnum[] | AdminNoteScalarFieldEnum
    having?: AdminNoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminNoteCountAggregateInputType | true
    _min?: AdminNoteMinAggregateInputType
    _max?: AdminNoteMaxAggregateInputType
  }

  export type AdminNoteGroupByOutputType = {
    id: string
    adminUserId: string
    walletAddress: string
    note: string
    isPrivate: boolean
    createdAt: Date
    updatedAt: Date
    _count: AdminNoteCountAggregateOutputType | null
    _min: AdminNoteMinAggregateOutputType | null
    _max: AdminNoteMaxAggregateOutputType | null
  }

  type GetAdminNoteGroupByPayload<T extends AdminNoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminNoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminNoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminNoteGroupByOutputType[P]>
            : GetScalarType<T[P], AdminNoteGroupByOutputType[P]>
        }
      >
    >


  export type AdminNoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminUserId?: boolean
    walletAddress?: boolean
    note?: boolean
    isPrivate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminNote"]>

  export type AdminNoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminUserId?: boolean
    walletAddress?: boolean
    note?: boolean
    isPrivate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminNote"]>

  export type AdminNoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminUserId?: boolean
    walletAddress?: boolean
    note?: boolean
    isPrivate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminNote"]>

  export type AdminNoteSelectScalar = {
    id?: boolean
    adminUserId?: boolean
    walletAddress?: boolean
    note?: boolean
    isPrivate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AdminNoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "adminUserId" | "walletAddress" | "note" | "isPrivate" | "createdAt" | "updatedAt", ExtArgs["result"]["adminNote"]>
  export type AdminNoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdminNoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdminNoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminUser?: boolean | AdminUserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AdminNotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminNote"
    objects: {
      adminUser: Prisma.$AdminUserPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      adminUserId: string
      walletAddress: string
      note: string
      isPrivate: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["adminNote"]>
    composites: {}
  }

  type AdminNoteGetPayload<S extends boolean | null | undefined | AdminNoteDefaultArgs> = $Result.GetResult<Prisma.$AdminNotePayload, S>

  type AdminNoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminNoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminNoteCountAggregateInputType | true
    }

  export interface AdminNoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminNote'], meta: { name: 'AdminNote' } }
    /**
     * Find zero or one AdminNote that matches the filter.
     * @param {AdminNoteFindUniqueArgs} args - Arguments to find a AdminNote
     * @example
     * // Get one AdminNote
     * const adminNote = await prisma.adminNote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminNoteFindUniqueArgs>(args: SelectSubset<T, AdminNoteFindUniqueArgs<ExtArgs>>): Prisma__AdminNoteClient<$Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminNote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminNoteFindUniqueOrThrowArgs} args - Arguments to find a AdminNote
     * @example
     * // Get one AdminNote
     * const adminNote = await prisma.adminNote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminNoteFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminNoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminNoteClient<$Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminNote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminNoteFindFirstArgs} args - Arguments to find a AdminNote
     * @example
     * // Get one AdminNote
     * const adminNote = await prisma.adminNote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminNoteFindFirstArgs>(args?: SelectSubset<T, AdminNoteFindFirstArgs<ExtArgs>>): Prisma__AdminNoteClient<$Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminNote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminNoteFindFirstOrThrowArgs} args - Arguments to find a AdminNote
     * @example
     * // Get one AdminNote
     * const adminNote = await prisma.adminNote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminNoteFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminNoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminNoteClient<$Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminNoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminNotes
     * const adminNotes = await prisma.adminNote.findMany()
     * 
     * // Get first 10 AdminNotes
     * const adminNotes = await prisma.adminNote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminNoteWithIdOnly = await prisma.adminNote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminNoteFindManyArgs>(args?: SelectSubset<T, AdminNoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminNote.
     * @param {AdminNoteCreateArgs} args - Arguments to create a AdminNote.
     * @example
     * // Create one AdminNote
     * const AdminNote = await prisma.adminNote.create({
     *   data: {
     *     // ... data to create a AdminNote
     *   }
     * })
     * 
     */
    create<T extends AdminNoteCreateArgs>(args: SelectSubset<T, AdminNoteCreateArgs<ExtArgs>>): Prisma__AdminNoteClient<$Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminNotes.
     * @param {AdminNoteCreateManyArgs} args - Arguments to create many AdminNotes.
     * @example
     * // Create many AdminNotes
     * const adminNote = await prisma.adminNote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminNoteCreateManyArgs>(args?: SelectSubset<T, AdminNoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminNotes and returns the data saved in the database.
     * @param {AdminNoteCreateManyAndReturnArgs} args - Arguments to create many AdminNotes.
     * @example
     * // Create many AdminNotes
     * const adminNote = await prisma.adminNote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminNotes and only return the `id`
     * const adminNoteWithIdOnly = await prisma.adminNote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminNoteCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminNoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AdminNote.
     * @param {AdminNoteDeleteArgs} args - Arguments to delete one AdminNote.
     * @example
     * // Delete one AdminNote
     * const AdminNote = await prisma.adminNote.delete({
     *   where: {
     *     // ... filter to delete one AdminNote
     *   }
     * })
     * 
     */
    delete<T extends AdminNoteDeleteArgs>(args: SelectSubset<T, AdminNoteDeleteArgs<ExtArgs>>): Prisma__AdminNoteClient<$Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminNote.
     * @param {AdminNoteUpdateArgs} args - Arguments to update one AdminNote.
     * @example
     * // Update one AdminNote
     * const adminNote = await prisma.adminNote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminNoteUpdateArgs>(args: SelectSubset<T, AdminNoteUpdateArgs<ExtArgs>>): Prisma__AdminNoteClient<$Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminNotes.
     * @param {AdminNoteDeleteManyArgs} args - Arguments to filter AdminNotes to delete.
     * @example
     * // Delete a few AdminNotes
     * const { count } = await prisma.adminNote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminNoteDeleteManyArgs>(args?: SelectSubset<T, AdminNoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminNoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminNotes
     * const adminNote = await prisma.adminNote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminNoteUpdateManyArgs>(args: SelectSubset<T, AdminNoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminNotes and returns the data updated in the database.
     * @param {AdminNoteUpdateManyAndReturnArgs} args - Arguments to update many AdminNotes.
     * @example
     * // Update many AdminNotes
     * const adminNote = await prisma.adminNote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AdminNotes and only return the `id`
     * const adminNoteWithIdOnly = await prisma.adminNote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminNoteUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminNoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AdminNote.
     * @param {AdminNoteUpsertArgs} args - Arguments to update or create a AdminNote.
     * @example
     * // Update or create a AdminNote
     * const adminNote = await prisma.adminNote.upsert({
     *   create: {
     *     // ... data to create a AdminNote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminNote we want to update
     *   }
     * })
     */
    upsert<T extends AdminNoteUpsertArgs>(args: SelectSubset<T, AdminNoteUpsertArgs<ExtArgs>>): Prisma__AdminNoteClient<$Result.GetResult<Prisma.$AdminNotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminNoteCountArgs} args - Arguments to filter AdminNotes to count.
     * @example
     * // Count the number of AdminNotes
     * const count = await prisma.adminNote.count({
     *   where: {
     *     // ... the filter for the AdminNotes we want to count
     *   }
     * })
    **/
    count<T extends AdminNoteCountArgs>(
      args?: Subset<T, AdminNoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminNoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminNoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminNoteAggregateArgs>(args: Subset<T, AdminNoteAggregateArgs>): Prisma.PrismaPromise<GetAdminNoteAggregateType<T>>

    /**
     * Group by AdminNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminNoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminNoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminNoteGroupByArgs['orderBy'] }
        : { orderBy?: AdminNoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminNoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminNote model
   */
  readonly fields: AdminNoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminNote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminNoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    adminUser<T extends AdminUserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminUserDefaultArgs<ExtArgs>>): Prisma__AdminUserClient<$Result.GetResult<Prisma.$AdminUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminNote model
   */
  interface AdminNoteFieldRefs {
    readonly id: FieldRef<"AdminNote", 'String'>
    readonly adminUserId: FieldRef<"AdminNote", 'String'>
    readonly walletAddress: FieldRef<"AdminNote", 'String'>
    readonly note: FieldRef<"AdminNote", 'String'>
    readonly isPrivate: FieldRef<"AdminNote", 'Boolean'>
    readonly createdAt: FieldRef<"AdminNote", 'DateTime'>
    readonly updatedAt: FieldRef<"AdminNote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AdminNote findUnique
   */
  export type AdminNoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminNote
     */
    select?: AdminNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminNote
     */
    omit?: AdminNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminNoteInclude<ExtArgs> | null
    /**
     * Filter, which AdminNote to fetch.
     */
    where: AdminNoteWhereUniqueInput
  }

  /**
   * AdminNote findUniqueOrThrow
   */
  export type AdminNoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminNote
     */
    select?: AdminNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminNote
     */
    omit?: AdminNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminNoteInclude<ExtArgs> | null
    /**
     * Filter, which AdminNote to fetch.
     */
    where: AdminNoteWhereUniqueInput
  }

  /**
   * AdminNote findFirst
   */
  export type AdminNoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminNote
     */
    select?: AdminNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminNote
     */
    omit?: AdminNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminNoteInclude<ExtArgs> | null
    /**
     * Filter, which AdminNote to fetch.
     */
    where?: AdminNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminNotes to fetch.
     */
    orderBy?: AdminNoteOrderByWithRelationInput | AdminNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminNotes.
     */
    cursor?: AdminNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminNotes.
     */
    distinct?: AdminNoteScalarFieldEnum | AdminNoteScalarFieldEnum[]
  }

  /**
   * AdminNote findFirstOrThrow
   */
  export type AdminNoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminNote
     */
    select?: AdminNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminNote
     */
    omit?: AdminNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminNoteInclude<ExtArgs> | null
    /**
     * Filter, which AdminNote to fetch.
     */
    where?: AdminNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminNotes to fetch.
     */
    orderBy?: AdminNoteOrderByWithRelationInput | AdminNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminNotes.
     */
    cursor?: AdminNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminNotes.
     */
    distinct?: AdminNoteScalarFieldEnum | AdminNoteScalarFieldEnum[]
  }

  /**
   * AdminNote findMany
   */
  export type AdminNoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminNote
     */
    select?: AdminNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminNote
     */
    omit?: AdminNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminNoteInclude<ExtArgs> | null
    /**
     * Filter, which AdminNotes to fetch.
     */
    where?: AdminNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminNotes to fetch.
     */
    orderBy?: AdminNoteOrderByWithRelationInput | AdminNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminNotes.
     */
    cursor?: AdminNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminNotes.
     */
    skip?: number
    distinct?: AdminNoteScalarFieldEnum | AdminNoteScalarFieldEnum[]
  }

  /**
   * AdminNote create
   */
  export type AdminNoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminNote
     */
    select?: AdminNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminNote
     */
    omit?: AdminNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminNoteInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminNote.
     */
    data: XOR<AdminNoteCreateInput, AdminNoteUncheckedCreateInput>
  }

  /**
   * AdminNote createMany
   */
  export type AdminNoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminNotes.
     */
    data: AdminNoteCreateManyInput | AdminNoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminNote createManyAndReturn
   */
  export type AdminNoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminNote
     */
    select?: AdminNoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminNote
     */
    omit?: AdminNoteOmit<ExtArgs> | null
    /**
     * The data used to create many AdminNotes.
     */
    data: AdminNoteCreateManyInput | AdminNoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminNoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminNote update
   */
  export type AdminNoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminNote
     */
    select?: AdminNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminNote
     */
    omit?: AdminNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminNoteInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminNote.
     */
    data: XOR<AdminNoteUpdateInput, AdminNoteUncheckedUpdateInput>
    /**
     * Choose, which AdminNote to update.
     */
    where: AdminNoteWhereUniqueInput
  }

  /**
   * AdminNote updateMany
   */
  export type AdminNoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminNotes.
     */
    data: XOR<AdminNoteUpdateManyMutationInput, AdminNoteUncheckedUpdateManyInput>
    /**
     * Filter which AdminNotes to update
     */
    where?: AdminNoteWhereInput
    /**
     * Limit how many AdminNotes to update.
     */
    limit?: number
  }

  /**
   * AdminNote updateManyAndReturn
   */
  export type AdminNoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminNote
     */
    select?: AdminNoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminNote
     */
    omit?: AdminNoteOmit<ExtArgs> | null
    /**
     * The data used to update AdminNotes.
     */
    data: XOR<AdminNoteUpdateManyMutationInput, AdminNoteUncheckedUpdateManyInput>
    /**
     * Filter which AdminNotes to update
     */
    where?: AdminNoteWhereInput
    /**
     * Limit how many AdminNotes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminNoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminNote upsert
   */
  export type AdminNoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminNote
     */
    select?: AdminNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminNote
     */
    omit?: AdminNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminNoteInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminNote to update in case it exists.
     */
    where: AdminNoteWhereUniqueInput
    /**
     * In case the AdminNote found by the `where` argument doesn't exist, create a new AdminNote with this data.
     */
    create: XOR<AdminNoteCreateInput, AdminNoteUncheckedCreateInput>
    /**
     * In case the AdminNote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminNoteUpdateInput, AdminNoteUncheckedUpdateInput>
  }

  /**
   * AdminNote delete
   */
  export type AdminNoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminNote
     */
    select?: AdminNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminNote
     */
    omit?: AdminNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminNoteInclude<ExtArgs> | null
    /**
     * Filter which AdminNote to delete.
     */
    where: AdminNoteWhereUniqueInput
  }

  /**
   * AdminNote deleteMany
   */
  export type AdminNoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminNotes to delete
     */
    where?: AdminNoteWhereInput
    /**
     * Limit how many AdminNotes to delete.
     */
    limit?: number
  }

  /**
   * AdminNote without action
   */
  export type AdminNoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminNote
     */
    select?: AdminNoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminNote
     */
    omit?: AdminNoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminNoteInclude<ExtArgs> | null
  }


  /**
   * Model Feature
   */

  export type AggregateFeature = {
    _count: FeatureCountAggregateOutputType | null
    _min: FeatureMinAggregateOutputType | null
    _max: FeatureMaxAggregateOutputType | null
  }

  export type FeatureMinAggregateOutputType = {
    id: string | null
    featureId: string | null
    name: string | null
    description: string | null
    category: string | null
    standardAccess: boolean | null
    premiumAccess: boolean | null
    adminOverride: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeatureMaxAggregateOutputType = {
    id: string | null
    featureId: string | null
    name: string | null
    description: string | null
    category: string | null
    standardAccess: boolean | null
    premiumAccess: boolean | null
    adminOverride: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeatureCountAggregateOutputType = {
    id: number
    featureId: number
    name: number
    description: number
    category: number
    standardAccess: number
    premiumAccess: number
    adminOverride: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FeatureMinAggregateInputType = {
    id?: true
    featureId?: true
    name?: true
    description?: true
    category?: true
    standardAccess?: true
    premiumAccess?: true
    adminOverride?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeatureMaxAggregateInputType = {
    id?: true
    featureId?: true
    name?: true
    description?: true
    category?: true
    standardAccess?: true
    premiumAccess?: true
    adminOverride?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeatureCountAggregateInputType = {
    id?: true
    featureId?: true
    name?: true
    description?: true
    category?: true
    standardAccess?: true
    premiumAccess?: true
    adminOverride?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FeatureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feature to aggregate.
     */
    where?: FeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Features to fetch.
     */
    orderBy?: FeatureOrderByWithRelationInput | FeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Features.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Features
    **/
    _count?: true | FeatureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeatureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeatureMaxAggregateInputType
  }

  export type GetFeatureAggregateType<T extends FeatureAggregateArgs> = {
        [P in keyof T & keyof AggregateFeature]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeature[P]>
      : GetScalarType<T[P], AggregateFeature[P]>
  }




  export type FeatureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureWhereInput
    orderBy?: FeatureOrderByWithAggregationInput | FeatureOrderByWithAggregationInput[]
    by: FeatureScalarFieldEnum[] | FeatureScalarFieldEnum
    having?: FeatureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeatureCountAggregateInputType | true
    _min?: FeatureMinAggregateInputType
    _max?: FeatureMaxAggregateInputType
  }

  export type FeatureGroupByOutputType = {
    id: string
    featureId: string
    name: string
    description: string
    category: string
    standardAccess: boolean
    premiumAccess: boolean
    adminOverride: boolean
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: FeatureCountAggregateOutputType | null
    _min: FeatureMinAggregateOutputType | null
    _max: FeatureMaxAggregateOutputType | null
  }

  type GetFeatureGroupByPayload<T extends FeatureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeatureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeatureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeatureGroupByOutputType[P]>
            : GetScalarType<T[P], FeatureGroupByOutputType[P]>
        }
      >
    >


  export type FeatureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    featureId?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    standardAccess?: boolean
    premiumAccess?: boolean
    adminOverride?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    featureAccesses?: boolean | Feature$featureAccessesArgs<ExtArgs>
    _count?: boolean | FeatureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feature"]>

  export type FeatureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    featureId?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    standardAccess?: boolean
    premiumAccess?: boolean
    adminOverride?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["feature"]>

  export type FeatureSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    featureId?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    standardAccess?: boolean
    premiumAccess?: boolean
    adminOverride?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["feature"]>

  export type FeatureSelectScalar = {
    id?: boolean
    featureId?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    standardAccess?: boolean
    premiumAccess?: boolean
    adminOverride?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FeatureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "featureId" | "name" | "description" | "category" | "standardAccess" | "premiumAccess" | "adminOverride" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["feature"]>
  export type FeatureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    featureAccesses?: boolean | Feature$featureAccessesArgs<ExtArgs>
    _count?: boolean | FeatureCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FeatureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FeatureIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FeaturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feature"
    objects: {
      featureAccesses: Prisma.$FeatureAccessPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      featureId: string
      name: string
      description: string
      category: string
      standardAccess: boolean
      premiumAccess: boolean
      adminOverride: boolean
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["feature"]>
    composites: {}
  }

  type FeatureGetPayload<S extends boolean | null | undefined | FeatureDefaultArgs> = $Result.GetResult<Prisma.$FeaturePayload, S>

  type FeatureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeatureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeatureCountAggregateInputType | true
    }

  export interface FeatureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feature'], meta: { name: 'Feature' } }
    /**
     * Find zero or one Feature that matches the filter.
     * @param {FeatureFindUniqueArgs} args - Arguments to find a Feature
     * @example
     * // Get one Feature
     * const feature = await prisma.feature.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeatureFindUniqueArgs>(args: SelectSubset<T, FeatureFindUniqueArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Feature that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeatureFindUniqueOrThrowArgs} args - Arguments to find a Feature
     * @example
     * // Get one Feature
     * const feature = await prisma.feature.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeatureFindUniqueOrThrowArgs>(args: SelectSubset<T, FeatureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feature that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureFindFirstArgs} args - Arguments to find a Feature
     * @example
     * // Get one Feature
     * const feature = await prisma.feature.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeatureFindFirstArgs>(args?: SelectSubset<T, FeatureFindFirstArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feature that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureFindFirstOrThrowArgs} args - Arguments to find a Feature
     * @example
     * // Get one Feature
     * const feature = await prisma.feature.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeatureFindFirstOrThrowArgs>(args?: SelectSubset<T, FeatureFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Features that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Features
     * const features = await prisma.feature.findMany()
     * 
     * // Get first 10 Features
     * const features = await prisma.feature.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const featureWithIdOnly = await prisma.feature.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeatureFindManyArgs>(args?: SelectSubset<T, FeatureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Feature.
     * @param {FeatureCreateArgs} args - Arguments to create a Feature.
     * @example
     * // Create one Feature
     * const Feature = await prisma.feature.create({
     *   data: {
     *     // ... data to create a Feature
     *   }
     * })
     * 
     */
    create<T extends FeatureCreateArgs>(args: SelectSubset<T, FeatureCreateArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Features.
     * @param {FeatureCreateManyArgs} args - Arguments to create many Features.
     * @example
     * // Create many Features
     * const feature = await prisma.feature.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeatureCreateManyArgs>(args?: SelectSubset<T, FeatureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Features and returns the data saved in the database.
     * @param {FeatureCreateManyAndReturnArgs} args - Arguments to create many Features.
     * @example
     * // Create many Features
     * const feature = await prisma.feature.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Features and only return the `id`
     * const featureWithIdOnly = await prisma.feature.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeatureCreateManyAndReturnArgs>(args?: SelectSubset<T, FeatureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Feature.
     * @param {FeatureDeleteArgs} args - Arguments to delete one Feature.
     * @example
     * // Delete one Feature
     * const Feature = await prisma.feature.delete({
     *   where: {
     *     // ... filter to delete one Feature
     *   }
     * })
     * 
     */
    delete<T extends FeatureDeleteArgs>(args: SelectSubset<T, FeatureDeleteArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Feature.
     * @param {FeatureUpdateArgs} args - Arguments to update one Feature.
     * @example
     * // Update one Feature
     * const feature = await prisma.feature.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeatureUpdateArgs>(args: SelectSubset<T, FeatureUpdateArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Features.
     * @param {FeatureDeleteManyArgs} args - Arguments to filter Features to delete.
     * @example
     * // Delete a few Features
     * const { count } = await prisma.feature.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeatureDeleteManyArgs>(args?: SelectSubset<T, FeatureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Features.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Features
     * const feature = await prisma.feature.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeatureUpdateManyArgs>(args: SelectSubset<T, FeatureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Features and returns the data updated in the database.
     * @param {FeatureUpdateManyAndReturnArgs} args - Arguments to update many Features.
     * @example
     * // Update many Features
     * const feature = await prisma.feature.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Features and only return the `id`
     * const featureWithIdOnly = await prisma.feature.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeatureUpdateManyAndReturnArgs>(args: SelectSubset<T, FeatureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Feature.
     * @param {FeatureUpsertArgs} args - Arguments to update or create a Feature.
     * @example
     * // Update or create a Feature
     * const feature = await prisma.feature.upsert({
     *   create: {
     *     // ... data to create a Feature
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feature we want to update
     *   }
     * })
     */
    upsert<T extends FeatureUpsertArgs>(args: SelectSubset<T, FeatureUpsertArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Features.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureCountArgs} args - Arguments to filter Features to count.
     * @example
     * // Count the number of Features
     * const count = await prisma.feature.count({
     *   where: {
     *     // ... the filter for the Features we want to count
     *   }
     * })
    **/
    count<T extends FeatureCountArgs>(
      args?: Subset<T, FeatureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeatureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeatureAggregateArgs>(args: Subset<T, FeatureAggregateArgs>): Prisma.PrismaPromise<GetFeatureAggregateType<T>>

    /**
     * Group by Feature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeatureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeatureGroupByArgs['orderBy'] }
        : { orderBy?: FeatureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeatureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeatureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feature model
   */
  readonly fields: FeatureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feature.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeatureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    featureAccesses<T extends Feature$featureAccessesArgs<ExtArgs> = {}>(args?: Subset<T, Feature$featureAccessesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feature model
   */
  interface FeatureFieldRefs {
    readonly id: FieldRef<"Feature", 'String'>
    readonly featureId: FieldRef<"Feature", 'String'>
    readonly name: FieldRef<"Feature", 'String'>
    readonly description: FieldRef<"Feature", 'String'>
    readonly category: FieldRef<"Feature", 'String'>
    readonly standardAccess: FieldRef<"Feature", 'Boolean'>
    readonly premiumAccess: FieldRef<"Feature", 'Boolean'>
    readonly adminOverride: FieldRef<"Feature", 'Boolean'>
    readonly isActive: FieldRef<"Feature", 'Boolean'>
    readonly createdAt: FieldRef<"Feature", 'DateTime'>
    readonly updatedAt: FieldRef<"Feature", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Feature findUnique
   */
  export type FeatureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * Filter, which Feature to fetch.
     */
    where: FeatureWhereUniqueInput
  }

  /**
   * Feature findUniqueOrThrow
   */
  export type FeatureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * Filter, which Feature to fetch.
     */
    where: FeatureWhereUniqueInput
  }

  /**
   * Feature findFirst
   */
  export type FeatureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * Filter, which Feature to fetch.
     */
    where?: FeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Features to fetch.
     */
    orderBy?: FeatureOrderByWithRelationInput | FeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Features.
     */
    cursor?: FeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Features.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Features.
     */
    distinct?: FeatureScalarFieldEnum | FeatureScalarFieldEnum[]
  }

  /**
   * Feature findFirstOrThrow
   */
  export type FeatureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * Filter, which Feature to fetch.
     */
    where?: FeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Features to fetch.
     */
    orderBy?: FeatureOrderByWithRelationInput | FeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Features.
     */
    cursor?: FeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Features.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Features.
     */
    distinct?: FeatureScalarFieldEnum | FeatureScalarFieldEnum[]
  }

  /**
   * Feature findMany
   */
  export type FeatureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * Filter, which Features to fetch.
     */
    where?: FeatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Features to fetch.
     */
    orderBy?: FeatureOrderByWithRelationInput | FeatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Features.
     */
    cursor?: FeatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Features from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Features.
     */
    skip?: number
    distinct?: FeatureScalarFieldEnum | FeatureScalarFieldEnum[]
  }

  /**
   * Feature create
   */
  export type FeatureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * The data needed to create a Feature.
     */
    data: XOR<FeatureCreateInput, FeatureUncheckedCreateInput>
  }

  /**
   * Feature createMany
   */
  export type FeatureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Features.
     */
    data: FeatureCreateManyInput | FeatureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feature createManyAndReturn
   */
  export type FeatureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * The data used to create many Features.
     */
    data: FeatureCreateManyInput | FeatureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feature update
   */
  export type FeatureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * The data needed to update a Feature.
     */
    data: XOR<FeatureUpdateInput, FeatureUncheckedUpdateInput>
    /**
     * Choose, which Feature to update.
     */
    where: FeatureWhereUniqueInput
  }

  /**
   * Feature updateMany
   */
  export type FeatureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Features.
     */
    data: XOR<FeatureUpdateManyMutationInput, FeatureUncheckedUpdateManyInput>
    /**
     * Filter which Features to update
     */
    where?: FeatureWhereInput
    /**
     * Limit how many Features to update.
     */
    limit?: number
  }

  /**
   * Feature updateManyAndReturn
   */
  export type FeatureUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * The data used to update Features.
     */
    data: XOR<FeatureUpdateManyMutationInput, FeatureUncheckedUpdateManyInput>
    /**
     * Filter which Features to update
     */
    where?: FeatureWhereInput
    /**
     * Limit how many Features to update.
     */
    limit?: number
  }

  /**
   * Feature upsert
   */
  export type FeatureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * The filter to search for the Feature to update in case it exists.
     */
    where: FeatureWhereUniqueInput
    /**
     * In case the Feature found by the `where` argument doesn't exist, create a new Feature with this data.
     */
    create: XOR<FeatureCreateInput, FeatureUncheckedCreateInput>
    /**
     * In case the Feature was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeatureUpdateInput, FeatureUncheckedUpdateInput>
  }

  /**
   * Feature delete
   */
  export type FeatureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
    /**
     * Filter which Feature to delete.
     */
    where: FeatureWhereUniqueInput
  }

  /**
   * Feature deleteMany
   */
  export type FeatureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Features to delete
     */
    where?: FeatureWhereInput
    /**
     * Limit how many Features to delete.
     */
    limit?: number
  }

  /**
   * Feature.featureAccesses
   */
  export type Feature$featureAccessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureAccess
     */
    select?: FeatureAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureAccess
     */
    omit?: FeatureAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureAccessInclude<ExtArgs> | null
    where?: FeatureAccessWhereInput
    orderBy?: FeatureAccessOrderByWithRelationInput | FeatureAccessOrderByWithRelationInput[]
    cursor?: FeatureAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeatureAccessScalarFieldEnum | FeatureAccessScalarFieldEnum[]
  }

  /**
   * Feature without action
   */
  export type FeatureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feature
     */
    select?: FeatureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feature
     */
    omit?: FeatureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureInclude<ExtArgs> | null
  }


  /**
   * Model FeatureAccess
   */

  export type AggregateFeatureAccess = {
    _count: FeatureAccessCountAggregateOutputType | null
    _min: FeatureAccessMinAggregateOutputType | null
    _max: FeatureAccessMaxAggregateOutputType | null
  }

  export type FeatureAccessMinAggregateOutputType = {
    id: string | null
    featureId: string | null
    walletAddress: string | null
    grantedBy: string | null
    grantedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
  }

  export type FeatureAccessMaxAggregateOutputType = {
    id: string | null
    featureId: string | null
    walletAddress: string | null
    grantedBy: string | null
    grantedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
  }

  export type FeatureAccessCountAggregateOutputType = {
    id: number
    featureId: number
    walletAddress: number
    grantedBy: number
    grantedAt: number
    expiresAt: number
    isActive: number
    _all: number
  }


  export type FeatureAccessMinAggregateInputType = {
    id?: true
    featureId?: true
    walletAddress?: true
    grantedBy?: true
    grantedAt?: true
    expiresAt?: true
    isActive?: true
  }

  export type FeatureAccessMaxAggregateInputType = {
    id?: true
    featureId?: true
    walletAddress?: true
    grantedBy?: true
    grantedAt?: true
    expiresAt?: true
    isActive?: true
  }

  export type FeatureAccessCountAggregateInputType = {
    id?: true
    featureId?: true
    walletAddress?: true
    grantedBy?: true
    grantedAt?: true
    expiresAt?: true
    isActive?: true
    _all?: true
  }

  export type FeatureAccessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeatureAccess to aggregate.
     */
    where?: FeatureAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureAccesses to fetch.
     */
    orderBy?: FeatureAccessOrderByWithRelationInput | FeatureAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeatureAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeatureAccesses
    **/
    _count?: true | FeatureAccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeatureAccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeatureAccessMaxAggregateInputType
  }

  export type GetFeatureAccessAggregateType<T extends FeatureAccessAggregateArgs> = {
        [P in keyof T & keyof AggregateFeatureAccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeatureAccess[P]>
      : GetScalarType<T[P], AggregateFeatureAccess[P]>
  }




  export type FeatureAccessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureAccessWhereInput
    orderBy?: FeatureAccessOrderByWithAggregationInput | FeatureAccessOrderByWithAggregationInput[]
    by: FeatureAccessScalarFieldEnum[] | FeatureAccessScalarFieldEnum
    having?: FeatureAccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeatureAccessCountAggregateInputType | true
    _min?: FeatureAccessMinAggregateInputType
    _max?: FeatureAccessMaxAggregateInputType
  }

  export type FeatureAccessGroupByOutputType = {
    id: string
    featureId: string
    walletAddress: string
    grantedBy: string | null
    grantedAt: Date
    expiresAt: Date | null
    isActive: boolean
    _count: FeatureAccessCountAggregateOutputType | null
    _min: FeatureAccessMinAggregateOutputType | null
    _max: FeatureAccessMaxAggregateOutputType | null
  }

  type GetFeatureAccessGroupByPayload<T extends FeatureAccessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeatureAccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeatureAccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeatureAccessGroupByOutputType[P]>
            : GetScalarType<T[P], FeatureAccessGroupByOutputType[P]>
        }
      >
    >


  export type FeatureAccessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    featureId?: boolean
    walletAddress?: boolean
    grantedBy?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    feature?: boolean | FeatureDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["featureAccess"]>

  export type FeatureAccessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    featureId?: boolean
    walletAddress?: boolean
    grantedBy?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    feature?: boolean | FeatureDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["featureAccess"]>

  export type FeatureAccessSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    featureId?: boolean
    walletAddress?: boolean
    grantedBy?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    feature?: boolean | FeatureDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["featureAccess"]>

  export type FeatureAccessSelectScalar = {
    id?: boolean
    featureId?: boolean
    walletAddress?: boolean
    grantedBy?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
  }

  export type FeatureAccessOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "featureId" | "walletAddress" | "grantedBy" | "grantedAt" | "expiresAt" | "isActive", ExtArgs["result"]["featureAccess"]>
  export type FeatureAccessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feature?: boolean | FeatureDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FeatureAccessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feature?: boolean | FeatureDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FeatureAccessIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feature?: boolean | FeatureDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FeatureAccessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeatureAccess"
    objects: {
      feature: Prisma.$FeaturePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      featureId: string
      walletAddress: string
      grantedBy: string | null
      grantedAt: Date
      expiresAt: Date | null
      isActive: boolean
    }, ExtArgs["result"]["featureAccess"]>
    composites: {}
  }

  type FeatureAccessGetPayload<S extends boolean | null | undefined | FeatureAccessDefaultArgs> = $Result.GetResult<Prisma.$FeatureAccessPayload, S>

  type FeatureAccessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeatureAccessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeatureAccessCountAggregateInputType | true
    }

  export interface FeatureAccessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeatureAccess'], meta: { name: 'FeatureAccess' } }
    /**
     * Find zero or one FeatureAccess that matches the filter.
     * @param {FeatureAccessFindUniqueArgs} args - Arguments to find a FeatureAccess
     * @example
     * // Get one FeatureAccess
     * const featureAccess = await prisma.featureAccess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeatureAccessFindUniqueArgs>(args: SelectSubset<T, FeatureAccessFindUniqueArgs<ExtArgs>>): Prisma__FeatureAccessClient<$Result.GetResult<Prisma.$FeatureAccessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FeatureAccess that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeatureAccessFindUniqueOrThrowArgs} args - Arguments to find a FeatureAccess
     * @example
     * // Get one FeatureAccess
     * const featureAccess = await prisma.featureAccess.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeatureAccessFindUniqueOrThrowArgs>(args: SelectSubset<T, FeatureAccessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeatureAccessClient<$Result.GetResult<Prisma.$FeatureAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeatureAccess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureAccessFindFirstArgs} args - Arguments to find a FeatureAccess
     * @example
     * // Get one FeatureAccess
     * const featureAccess = await prisma.featureAccess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeatureAccessFindFirstArgs>(args?: SelectSubset<T, FeatureAccessFindFirstArgs<ExtArgs>>): Prisma__FeatureAccessClient<$Result.GetResult<Prisma.$FeatureAccessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeatureAccess that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureAccessFindFirstOrThrowArgs} args - Arguments to find a FeatureAccess
     * @example
     * // Get one FeatureAccess
     * const featureAccess = await prisma.featureAccess.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeatureAccessFindFirstOrThrowArgs>(args?: SelectSubset<T, FeatureAccessFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeatureAccessClient<$Result.GetResult<Prisma.$FeatureAccessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FeatureAccesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureAccessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeatureAccesses
     * const featureAccesses = await prisma.featureAccess.findMany()
     * 
     * // Get first 10 FeatureAccesses
     * const featureAccesses = await prisma.featureAccess.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const featureAccessWithIdOnly = await prisma.featureAccess.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeatureAccessFindManyArgs>(args?: SelectSubset<T, FeatureAccessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FeatureAccess.
     * @param {FeatureAccessCreateArgs} args - Arguments to create a FeatureAccess.
     * @example
     * // Create one FeatureAccess
     * const FeatureAccess = await prisma.featureAccess.create({
     *   data: {
     *     // ... data to create a FeatureAccess
     *   }
     * })
     * 
     */
    create<T extends FeatureAccessCreateArgs>(args: SelectSubset<T, FeatureAccessCreateArgs<ExtArgs>>): Prisma__FeatureAccessClient<$Result.GetResult<Prisma.$FeatureAccessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FeatureAccesses.
     * @param {FeatureAccessCreateManyArgs} args - Arguments to create many FeatureAccesses.
     * @example
     * // Create many FeatureAccesses
     * const featureAccess = await prisma.featureAccess.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeatureAccessCreateManyArgs>(args?: SelectSubset<T, FeatureAccessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FeatureAccesses and returns the data saved in the database.
     * @param {FeatureAccessCreateManyAndReturnArgs} args - Arguments to create many FeatureAccesses.
     * @example
     * // Create many FeatureAccesses
     * const featureAccess = await prisma.featureAccess.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FeatureAccesses and only return the `id`
     * const featureAccessWithIdOnly = await prisma.featureAccess.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeatureAccessCreateManyAndReturnArgs>(args?: SelectSubset<T, FeatureAccessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureAccessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FeatureAccess.
     * @param {FeatureAccessDeleteArgs} args - Arguments to delete one FeatureAccess.
     * @example
     * // Delete one FeatureAccess
     * const FeatureAccess = await prisma.featureAccess.delete({
     *   where: {
     *     // ... filter to delete one FeatureAccess
     *   }
     * })
     * 
     */
    delete<T extends FeatureAccessDeleteArgs>(args: SelectSubset<T, FeatureAccessDeleteArgs<ExtArgs>>): Prisma__FeatureAccessClient<$Result.GetResult<Prisma.$FeatureAccessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FeatureAccess.
     * @param {FeatureAccessUpdateArgs} args - Arguments to update one FeatureAccess.
     * @example
     * // Update one FeatureAccess
     * const featureAccess = await prisma.featureAccess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeatureAccessUpdateArgs>(args: SelectSubset<T, FeatureAccessUpdateArgs<ExtArgs>>): Prisma__FeatureAccessClient<$Result.GetResult<Prisma.$FeatureAccessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FeatureAccesses.
     * @param {FeatureAccessDeleteManyArgs} args - Arguments to filter FeatureAccesses to delete.
     * @example
     * // Delete a few FeatureAccesses
     * const { count } = await prisma.featureAccess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeatureAccessDeleteManyArgs>(args?: SelectSubset<T, FeatureAccessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeatureAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureAccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeatureAccesses
     * const featureAccess = await prisma.featureAccess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeatureAccessUpdateManyArgs>(args: SelectSubset<T, FeatureAccessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeatureAccesses and returns the data updated in the database.
     * @param {FeatureAccessUpdateManyAndReturnArgs} args - Arguments to update many FeatureAccesses.
     * @example
     * // Update many FeatureAccesses
     * const featureAccess = await prisma.featureAccess.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FeatureAccesses and only return the `id`
     * const featureAccessWithIdOnly = await prisma.featureAccess.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeatureAccessUpdateManyAndReturnArgs>(args: SelectSubset<T, FeatureAccessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureAccessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FeatureAccess.
     * @param {FeatureAccessUpsertArgs} args - Arguments to update or create a FeatureAccess.
     * @example
     * // Update or create a FeatureAccess
     * const featureAccess = await prisma.featureAccess.upsert({
     *   create: {
     *     // ... data to create a FeatureAccess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeatureAccess we want to update
     *   }
     * })
     */
    upsert<T extends FeatureAccessUpsertArgs>(args: SelectSubset<T, FeatureAccessUpsertArgs<ExtArgs>>): Prisma__FeatureAccessClient<$Result.GetResult<Prisma.$FeatureAccessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FeatureAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureAccessCountArgs} args - Arguments to filter FeatureAccesses to count.
     * @example
     * // Count the number of FeatureAccesses
     * const count = await prisma.featureAccess.count({
     *   where: {
     *     // ... the filter for the FeatureAccesses we want to count
     *   }
     * })
    **/
    count<T extends FeatureAccessCountArgs>(
      args?: Subset<T, FeatureAccessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeatureAccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeatureAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeatureAccessAggregateArgs>(args: Subset<T, FeatureAccessAggregateArgs>): Prisma.PrismaPromise<GetFeatureAccessAggregateType<T>>

    /**
     * Group by FeatureAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureAccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeatureAccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeatureAccessGroupByArgs['orderBy'] }
        : { orderBy?: FeatureAccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeatureAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeatureAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeatureAccess model
   */
  readonly fields: FeatureAccessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeatureAccess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeatureAccessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feature<T extends FeatureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FeatureDefaultArgs<ExtArgs>>): Prisma__FeatureClient<$Result.GetResult<Prisma.$FeaturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeatureAccess model
   */
  interface FeatureAccessFieldRefs {
    readonly id: FieldRef<"FeatureAccess", 'String'>
    readonly featureId: FieldRef<"FeatureAccess", 'String'>
    readonly walletAddress: FieldRef<"FeatureAccess", 'String'>
    readonly grantedBy: FieldRef<"FeatureAccess", 'String'>
    readonly grantedAt: FieldRef<"FeatureAccess", 'DateTime'>
    readonly expiresAt: FieldRef<"FeatureAccess", 'DateTime'>
    readonly isActive: FieldRef<"FeatureAccess", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * FeatureAccess findUnique
   */
  export type FeatureAccessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureAccess
     */
    select?: FeatureAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureAccess
     */
    omit?: FeatureAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureAccessInclude<ExtArgs> | null
    /**
     * Filter, which FeatureAccess to fetch.
     */
    where: FeatureAccessWhereUniqueInput
  }

  /**
   * FeatureAccess findUniqueOrThrow
   */
  export type FeatureAccessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureAccess
     */
    select?: FeatureAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureAccess
     */
    omit?: FeatureAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureAccessInclude<ExtArgs> | null
    /**
     * Filter, which FeatureAccess to fetch.
     */
    where: FeatureAccessWhereUniqueInput
  }

  /**
   * FeatureAccess findFirst
   */
  export type FeatureAccessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureAccess
     */
    select?: FeatureAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureAccess
     */
    omit?: FeatureAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureAccessInclude<ExtArgs> | null
    /**
     * Filter, which FeatureAccess to fetch.
     */
    where?: FeatureAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureAccesses to fetch.
     */
    orderBy?: FeatureAccessOrderByWithRelationInput | FeatureAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeatureAccesses.
     */
    cursor?: FeatureAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeatureAccesses.
     */
    distinct?: FeatureAccessScalarFieldEnum | FeatureAccessScalarFieldEnum[]
  }

  /**
   * FeatureAccess findFirstOrThrow
   */
  export type FeatureAccessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureAccess
     */
    select?: FeatureAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureAccess
     */
    omit?: FeatureAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureAccessInclude<ExtArgs> | null
    /**
     * Filter, which FeatureAccess to fetch.
     */
    where?: FeatureAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureAccesses to fetch.
     */
    orderBy?: FeatureAccessOrderByWithRelationInput | FeatureAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeatureAccesses.
     */
    cursor?: FeatureAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeatureAccesses.
     */
    distinct?: FeatureAccessScalarFieldEnum | FeatureAccessScalarFieldEnum[]
  }

  /**
   * FeatureAccess findMany
   */
  export type FeatureAccessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureAccess
     */
    select?: FeatureAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureAccess
     */
    omit?: FeatureAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureAccessInclude<ExtArgs> | null
    /**
     * Filter, which FeatureAccesses to fetch.
     */
    where?: FeatureAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureAccesses to fetch.
     */
    orderBy?: FeatureAccessOrderByWithRelationInput | FeatureAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeatureAccesses.
     */
    cursor?: FeatureAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureAccesses.
     */
    skip?: number
    distinct?: FeatureAccessScalarFieldEnum | FeatureAccessScalarFieldEnum[]
  }

  /**
   * FeatureAccess create
   */
  export type FeatureAccessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureAccess
     */
    select?: FeatureAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureAccess
     */
    omit?: FeatureAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureAccessInclude<ExtArgs> | null
    /**
     * The data needed to create a FeatureAccess.
     */
    data: XOR<FeatureAccessCreateInput, FeatureAccessUncheckedCreateInput>
  }

  /**
   * FeatureAccess createMany
   */
  export type FeatureAccessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeatureAccesses.
     */
    data: FeatureAccessCreateManyInput | FeatureAccessCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeatureAccess createManyAndReturn
   */
  export type FeatureAccessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureAccess
     */
    select?: FeatureAccessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureAccess
     */
    omit?: FeatureAccessOmit<ExtArgs> | null
    /**
     * The data used to create many FeatureAccesses.
     */
    data: FeatureAccessCreateManyInput | FeatureAccessCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureAccessIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeatureAccess update
   */
  export type FeatureAccessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureAccess
     */
    select?: FeatureAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureAccess
     */
    omit?: FeatureAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureAccessInclude<ExtArgs> | null
    /**
     * The data needed to update a FeatureAccess.
     */
    data: XOR<FeatureAccessUpdateInput, FeatureAccessUncheckedUpdateInput>
    /**
     * Choose, which FeatureAccess to update.
     */
    where: FeatureAccessWhereUniqueInput
  }

  /**
   * FeatureAccess updateMany
   */
  export type FeatureAccessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeatureAccesses.
     */
    data: XOR<FeatureAccessUpdateManyMutationInput, FeatureAccessUncheckedUpdateManyInput>
    /**
     * Filter which FeatureAccesses to update
     */
    where?: FeatureAccessWhereInput
    /**
     * Limit how many FeatureAccesses to update.
     */
    limit?: number
  }

  /**
   * FeatureAccess updateManyAndReturn
   */
  export type FeatureAccessUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureAccess
     */
    select?: FeatureAccessSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureAccess
     */
    omit?: FeatureAccessOmit<ExtArgs> | null
    /**
     * The data used to update FeatureAccesses.
     */
    data: XOR<FeatureAccessUpdateManyMutationInput, FeatureAccessUncheckedUpdateManyInput>
    /**
     * Filter which FeatureAccesses to update
     */
    where?: FeatureAccessWhereInput
    /**
     * Limit how many FeatureAccesses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureAccessIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeatureAccess upsert
   */
  export type FeatureAccessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureAccess
     */
    select?: FeatureAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureAccess
     */
    omit?: FeatureAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureAccessInclude<ExtArgs> | null
    /**
     * The filter to search for the FeatureAccess to update in case it exists.
     */
    where: FeatureAccessWhereUniqueInput
    /**
     * In case the FeatureAccess found by the `where` argument doesn't exist, create a new FeatureAccess with this data.
     */
    create: XOR<FeatureAccessCreateInput, FeatureAccessUncheckedCreateInput>
    /**
     * In case the FeatureAccess was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeatureAccessUpdateInput, FeatureAccessUncheckedUpdateInput>
  }

  /**
   * FeatureAccess delete
   */
  export type FeatureAccessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureAccess
     */
    select?: FeatureAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureAccess
     */
    omit?: FeatureAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureAccessInclude<ExtArgs> | null
    /**
     * Filter which FeatureAccess to delete.
     */
    where: FeatureAccessWhereUniqueInput
  }

  /**
   * FeatureAccess deleteMany
   */
  export type FeatureAccessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeatureAccesses to delete
     */
    where?: FeatureAccessWhereInput
    /**
     * Limit how many FeatureAccesses to delete.
     */
    limit?: number
  }

  /**
   * FeatureAccess without action
   */
  export type FeatureAccessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureAccess
     */
    select?: FeatureAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeatureAccess
     */
    omit?: FeatureAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureAccessInclude<ExtArgs> | null
  }


  /**
   * Model Game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    width: number | null
    height: number | null
  }

  export type GameSumAggregateOutputType = {
    width: number | null
    height: number | null
  }

  export type GameMinAggregateOutputType = {
    id: string | null
    title: string | null
    slug: string | null
    description: string | null
    instructions: string | null
    packageUrl: string | null
    entryFilePath: string | null
    iconUrl: string | null
    coverImageUrl: string | null
    width: number | null
    height: number | null
    orientation: $Enums.GameOrientation | null
    developerName: string | null
    version: string | null
    status: $Enums.GameStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameMaxAggregateOutputType = {
    id: string | null
    title: string | null
    slug: string | null
    description: string | null
    instructions: string | null
    packageUrl: string | null
    entryFilePath: string | null
    iconUrl: string | null
    coverImageUrl: string | null
    width: number | null
    height: number | null
    orientation: $Enums.GameOrientation | null
    developerName: string | null
    version: string | null
    status: $Enums.GameStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    title: number
    slug: number
    description: number
    instructions: number
    packageUrl: number
    entryFilePath: number
    iconUrl: number
    coverImageUrl: number
    width: number
    height: number
    orientation: number
    developerName: number
    version: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    width?: true
    height?: true
  }

  export type GameSumAggregateInputType = {
    width?: true
    height?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    instructions?: true
    packageUrl?: true
    entryFilePath?: true
    iconUrl?: true
    coverImageUrl?: true
    width?: true
    height?: true
    orientation?: true
    developerName?: true
    version?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    instructions?: true
    packageUrl?: true
    entryFilePath?: true
    iconUrl?: true
    coverImageUrl?: true
    width?: true
    height?: true
    orientation?: true
    developerName?: true
    version?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    instructions?: true
    packageUrl?: true
    entryFilePath?: true
    iconUrl?: true
    coverImageUrl?: true
    width?: true
    height?: true
    orientation?: true
    developerName?: true
    version?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: GameOrderByWithAggregationInput | GameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: string
    title: string
    slug: string
    description: string
    instructions: string | null
    packageUrl: string
    entryFilePath: string
    iconUrl: string
    coverImageUrl: string
    width: number
    height: number
    orientation: $Enums.GameOrientation
    developerName: string | null
    version: string | null
    status: $Enums.GameStatus
    createdAt: Date
    updatedAt: Date
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    instructions?: boolean
    packageUrl?: boolean
    entryFilePath?: boolean
    iconUrl?: boolean
    coverImageUrl?: boolean
    width?: boolean
    height?: boolean
    orientation?: boolean
    developerName?: boolean
    version?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    GameScreenshot?: boolean | Game$GameScreenshotArgs<ExtArgs>
    categories?: boolean | Game$categoriesArgs<ExtArgs>
    GameTag?: boolean | Game$GameTagArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    instructions?: boolean
    packageUrl?: boolean
    entryFilePath?: boolean
    iconUrl?: boolean
    coverImageUrl?: boolean
    width?: boolean
    height?: boolean
    orientation?: boolean
    developerName?: boolean
    version?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["game"]>

  export type GameSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    instructions?: boolean
    packageUrl?: boolean
    entryFilePath?: boolean
    iconUrl?: boolean
    coverImageUrl?: boolean
    width?: boolean
    height?: boolean
    orientation?: boolean
    developerName?: boolean
    version?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    instructions?: boolean
    packageUrl?: boolean
    entryFilePath?: boolean
    iconUrl?: boolean
    coverImageUrl?: boolean
    width?: boolean
    height?: boolean
    orientation?: boolean
    developerName?: boolean
    version?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GameOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "slug" | "description" | "instructions" | "packageUrl" | "entryFilePath" | "iconUrl" | "coverImageUrl" | "width" | "height" | "orientation" | "developerName" | "version" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["game"]>
  export type GameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    GameScreenshot?: boolean | Game$GameScreenshotArgs<ExtArgs>
    categories?: boolean | Game$categoriesArgs<ExtArgs>
    GameTag?: boolean | Game$GameTagArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GameIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Game"
    objects: {
      GameScreenshot: Prisma.$GameScreenshotPayload<ExtArgs>[]
      categories: Prisma.$GameCategoryPayload<ExtArgs>[]
      GameTag: Prisma.$GameTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      slug: string
      description: string
      instructions: string | null
      packageUrl: string
      entryFilePath: string
      iconUrl: string
      coverImageUrl: string
      width: number
      height: number
      orientation: $Enums.GameOrientation
      developerName: string | null
      version: string | null
      status: $Enums.GameStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = $Result.GetResult<Prisma.$GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameFindUniqueArgs>(args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameFindFirstArgs>(args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameFindManyArgs>(args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends GameCreateArgs>(args: SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Games.
     * @param {GameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCreateManyArgs>(args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends GameDeleteArgs>(args: SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameUpdateArgs>(args: SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameDeleteManyArgs>(args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameUpdateManyArgs>(args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games and returns the data updated in the database.
     * @param {GameUpdateManyAndReturnArgs} args - Arguments to update many Games.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameUpdateManyAndReturnArgs>(args: SelectSubset<T, GameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends GameUpsertArgs>(args: SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game model
   */
  readonly fields: GameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    GameScreenshot<T extends Game$GameScreenshotArgs<ExtArgs> = {}>(args?: Subset<T, Game$GameScreenshotArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameScreenshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categories<T extends Game$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Game$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    GameTag<T extends Game$GameTagArgs<ExtArgs> = {}>(args?: Subset<T, Game$GameTagArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Game model
   */
  interface GameFieldRefs {
    readonly id: FieldRef<"Game", 'String'>
    readonly title: FieldRef<"Game", 'String'>
    readonly slug: FieldRef<"Game", 'String'>
    readonly description: FieldRef<"Game", 'String'>
    readonly instructions: FieldRef<"Game", 'String'>
    readonly packageUrl: FieldRef<"Game", 'String'>
    readonly entryFilePath: FieldRef<"Game", 'String'>
    readonly iconUrl: FieldRef<"Game", 'String'>
    readonly coverImageUrl: FieldRef<"Game", 'String'>
    readonly width: FieldRef<"Game", 'Int'>
    readonly height: FieldRef<"Game", 'Int'>
    readonly orientation: FieldRef<"Game", 'GameOrientation'>
    readonly developerName: FieldRef<"Game", 'String'>
    readonly version: FieldRef<"Game", 'String'>
    readonly status: FieldRef<"Game", 'GameStatus'>
    readonly createdAt: FieldRef<"Game", 'DateTime'>
    readonly updatedAt: FieldRef<"Game", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findFirst
   */
  export type GameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }

  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game createManyAndReturn
   */
  export type GameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
  }

  /**
   * Game updateManyAndReturn
   */
  export type GameUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
  }

  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }

  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to delete.
     */
    limit?: number
  }

  /**
   * Game.GameScreenshot
   */
  export type Game$GameScreenshotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameScreenshot
     */
    select?: GameScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameScreenshot
     */
    omit?: GameScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameScreenshotInclude<ExtArgs> | null
    where?: GameScreenshotWhereInput
    orderBy?: GameScreenshotOrderByWithRelationInput | GameScreenshotOrderByWithRelationInput[]
    cursor?: GameScreenshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScreenshotScalarFieldEnum | GameScreenshotScalarFieldEnum[]
  }

  /**
   * Game.categories
   */
  export type Game$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCategory
     */
    select?: GameCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameCategory
     */
    omit?: GameCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameCategoryInclude<ExtArgs> | null
    where?: GameCategoryWhereInput
    orderBy?: GameCategoryOrderByWithRelationInput | GameCategoryOrderByWithRelationInput[]
    cursor?: GameCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameCategoryScalarFieldEnum | GameCategoryScalarFieldEnum[]
  }

  /**
   * Game.GameTag
   */
  export type Game$GameTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTag
     */
    select?: GameTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTag
     */
    omit?: GameTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTagInclude<ExtArgs> | null
    where?: GameTagWhereInput
    orderBy?: GameTagOrderByWithRelationInput | GameTagOrderByWithRelationInput[]
    cursor?: GameTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameTagScalarFieldEnum | GameTagScalarFieldEnum[]
  }

  /**
   * Game without action
   */
  export type GameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
  }


  /**
   * Model GameCategory
   */

  export type AggregateGameCategory = {
    _count: GameCategoryCountAggregateOutputType | null
    _min: GameCategoryMinAggregateOutputType | null
    _max: GameCategoryMaxAggregateOutputType | null
  }

  export type GameCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    color: string | null
    description: string | null
    icon: string | null
    metaDescription: string | null
    slug: string | null
  }

  export type GameCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    color: string | null
    description: string | null
    icon: string | null
    metaDescription: string | null
    slug: string | null
  }

  export type GameCategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    color: number
    description: number
    icon: number
    metaDescription: number
    slug: number
    _all: number
  }


  export type GameCategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    color?: true
    description?: true
    icon?: true
    metaDescription?: true
    slug?: true
  }

  export type GameCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    color?: true
    description?: true
    icon?: true
    metaDescription?: true
    slug?: true
  }

  export type GameCategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    color?: true
    description?: true
    icon?: true
    metaDescription?: true
    slug?: true
    _all?: true
  }

  export type GameCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameCategory to aggregate.
     */
    where?: GameCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameCategories to fetch.
     */
    orderBy?: GameCategoryOrderByWithRelationInput | GameCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameCategories
    **/
    _count?: true | GameCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameCategoryMaxAggregateInputType
  }

  export type GetGameCategoryAggregateType<T extends GameCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateGameCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameCategory[P]>
      : GetScalarType<T[P], AggregateGameCategory[P]>
  }




  export type GameCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameCategoryWhereInput
    orderBy?: GameCategoryOrderByWithAggregationInput | GameCategoryOrderByWithAggregationInput[]
    by: GameCategoryScalarFieldEnum[] | GameCategoryScalarFieldEnum
    having?: GameCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCategoryCountAggregateInputType | true
    _min?: GameCategoryMinAggregateInputType
    _max?: GameCategoryMaxAggregateInputType
  }

  export type GameCategoryGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    color: string | null
    description: string | null
    icon: string | null
    metaDescription: string | null
    slug: string | null
    _count: GameCategoryCountAggregateOutputType | null
    _min: GameCategoryMinAggregateOutputType | null
    _max: GameCategoryMaxAggregateOutputType | null
  }

  type GetGameCategoryGroupByPayload<T extends GameCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], GameCategoryGroupByOutputType[P]>
        }
      >
    >


  export type GameCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    color?: boolean
    description?: boolean
    icon?: boolean
    metaDescription?: boolean
    slug?: boolean
    games?: boolean | GameCategory$gamesArgs<ExtArgs>
    _count?: boolean | GameCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameCategory"]>

  export type GameCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    color?: boolean
    description?: boolean
    icon?: boolean
    metaDescription?: boolean
    slug?: boolean
  }, ExtArgs["result"]["gameCategory"]>

  export type GameCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    color?: boolean
    description?: boolean
    icon?: boolean
    metaDescription?: boolean
    slug?: boolean
  }, ExtArgs["result"]["gameCategory"]>

  export type GameCategorySelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    color?: boolean
    description?: boolean
    icon?: boolean
    metaDescription?: boolean
    slug?: boolean
  }

  export type GameCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt" | "color" | "description" | "icon" | "metaDescription" | "slug", ExtArgs["result"]["gameCategory"]>
  export type GameCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | GameCategory$gamesArgs<ExtArgs>
    _count?: boolean | GameCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GameCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GameCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameCategory"
    objects: {
      games: Prisma.$GamePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
      color: string | null
      description: string | null
      icon: string | null
      metaDescription: string | null
      slug: string | null
    }, ExtArgs["result"]["gameCategory"]>
    composites: {}
  }

  type GameCategoryGetPayload<S extends boolean | null | undefined | GameCategoryDefaultArgs> = $Result.GetResult<Prisma.$GameCategoryPayload, S>

  type GameCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameCategoryCountAggregateInputType | true
    }

  export interface GameCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameCategory'], meta: { name: 'GameCategory' } }
    /**
     * Find zero or one GameCategory that matches the filter.
     * @param {GameCategoryFindUniqueArgs} args - Arguments to find a GameCategory
     * @example
     * // Get one GameCategory
     * const gameCategory = await prisma.gameCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameCategoryFindUniqueArgs>(args: SelectSubset<T, GameCategoryFindUniqueArgs<ExtArgs>>): Prisma__GameCategoryClient<$Result.GetResult<Prisma.$GameCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameCategoryFindUniqueOrThrowArgs} args - Arguments to find a GameCategory
     * @example
     * // Get one GameCategory
     * const gameCategory = await prisma.gameCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, GameCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameCategoryClient<$Result.GetResult<Prisma.$GameCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCategoryFindFirstArgs} args - Arguments to find a GameCategory
     * @example
     * // Get one GameCategory
     * const gameCategory = await prisma.gameCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameCategoryFindFirstArgs>(args?: SelectSubset<T, GameCategoryFindFirstArgs<ExtArgs>>): Prisma__GameCategoryClient<$Result.GetResult<Prisma.$GameCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCategoryFindFirstOrThrowArgs} args - Arguments to find a GameCategory
     * @example
     * // Get one GameCategory
     * const gameCategory = await prisma.gameCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, GameCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameCategoryClient<$Result.GetResult<Prisma.$GameCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameCategories
     * const gameCategories = await prisma.gameCategory.findMany()
     * 
     * // Get first 10 GameCategories
     * const gameCategories = await prisma.gameCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameCategoryWithIdOnly = await prisma.gameCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameCategoryFindManyArgs>(args?: SelectSubset<T, GameCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameCategory.
     * @param {GameCategoryCreateArgs} args - Arguments to create a GameCategory.
     * @example
     * // Create one GameCategory
     * const GameCategory = await prisma.gameCategory.create({
     *   data: {
     *     // ... data to create a GameCategory
     *   }
     * })
     * 
     */
    create<T extends GameCategoryCreateArgs>(args: SelectSubset<T, GameCategoryCreateArgs<ExtArgs>>): Prisma__GameCategoryClient<$Result.GetResult<Prisma.$GameCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameCategories.
     * @param {GameCategoryCreateManyArgs} args - Arguments to create many GameCategories.
     * @example
     * // Create many GameCategories
     * const gameCategory = await prisma.gameCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCategoryCreateManyArgs>(args?: SelectSubset<T, GameCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameCategories and returns the data saved in the database.
     * @param {GameCategoryCreateManyAndReturnArgs} args - Arguments to create many GameCategories.
     * @example
     * // Create many GameCategories
     * const gameCategory = await prisma.gameCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameCategories and only return the `id`
     * const gameCategoryWithIdOnly = await prisma.gameCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameCategory.
     * @param {GameCategoryDeleteArgs} args - Arguments to delete one GameCategory.
     * @example
     * // Delete one GameCategory
     * const GameCategory = await prisma.gameCategory.delete({
     *   where: {
     *     // ... filter to delete one GameCategory
     *   }
     * })
     * 
     */
    delete<T extends GameCategoryDeleteArgs>(args: SelectSubset<T, GameCategoryDeleteArgs<ExtArgs>>): Prisma__GameCategoryClient<$Result.GetResult<Prisma.$GameCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameCategory.
     * @param {GameCategoryUpdateArgs} args - Arguments to update one GameCategory.
     * @example
     * // Update one GameCategory
     * const gameCategory = await prisma.gameCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameCategoryUpdateArgs>(args: SelectSubset<T, GameCategoryUpdateArgs<ExtArgs>>): Prisma__GameCategoryClient<$Result.GetResult<Prisma.$GameCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameCategories.
     * @param {GameCategoryDeleteManyArgs} args - Arguments to filter GameCategories to delete.
     * @example
     * // Delete a few GameCategories
     * const { count } = await prisma.gameCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameCategoryDeleteManyArgs>(args?: SelectSubset<T, GameCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameCategories
     * const gameCategory = await prisma.gameCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameCategoryUpdateManyArgs>(args: SelectSubset<T, GameCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameCategories and returns the data updated in the database.
     * @param {GameCategoryUpdateManyAndReturnArgs} args - Arguments to update many GameCategories.
     * @example
     * // Update many GameCategories
     * const gameCategory = await prisma.gameCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameCategories and only return the `id`
     * const gameCategoryWithIdOnly = await prisma.gameCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, GameCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameCategory.
     * @param {GameCategoryUpsertArgs} args - Arguments to update or create a GameCategory.
     * @example
     * // Update or create a GameCategory
     * const gameCategory = await prisma.gameCategory.upsert({
     *   create: {
     *     // ... data to create a GameCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameCategory we want to update
     *   }
     * })
     */
    upsert<T extends GameCategoryUpsertArgs>(args: SelectSubset<T, GameCategoryUpsertArgs<ExtArgs>>): Prisma__GameCategoryClient<$Result.GetResult<Prisma.$GameCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCategoryCountArgs} args - Arguments to filter GameCategories to count.
     * @example
     * // Count the number of GameCategories
     * const count = await prisma.gameCategory.count({
     *   where: {
     *     // ... the filter for the GameCategories we want to count
     *   }
     * })
    **/
    count<T extends GameCategoryCountArgs>(
      args?: Subset<T, GameCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameCategoryAggregateArgs>(args: Subset<T, GameCategoryAggregateArgs>): Prisma.PrismaPromise<GetGameCategoryAggregateType<T>>

    /**
     * Group by GameCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameCategoryGroupByArgs['orderBy'] }
        : { orderBy?: GameCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameCategory model
   */
  readonly fields: GameCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    games<T extends GameCategory$gamesArgs<ExtArgs> = {}>(args?: Subset<T, GameCategory$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameCategory model
   */
  interface GameCategoryFieldRefs {
    readonly id: FieldRef<"GameCategory", 'String'>
    readonly name: FieldRef<"GameCategory", 'String'>
    readonly createdAt: FieldRef<"GameCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"GameCategory", 'DateTime'>
    readonly color: FieldRef<"GameCategory", 'String'>
    readonly description: FieldRef<"GameCategory", 'String'>
    readonly icon: FieldRef<"GameCategory", 'String'>
    readonly metaDescription: FieldRef<"GameCategory", 'String'>
    readonly slug: FieldRef<"GameCategory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GameCategory findUnique
   */
  export type GameCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCategory
     */
    select?: GameCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameCategory
     */
    omit?: GameCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameCategoryInclude<ExtArgs> | null
    /**
     * Filter, which GameCategory to fetch.
     */
    where: GameCategoryWhereUniqueInput
  }

  /**
   * GameCategory findUniqueOrThrow
   */
  export type GameCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCategory
     */
    select?: GameCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameCategory
     */
    omit?: GameCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameCategoryInclude<ExtArgs> | null
    /**
     * Filter, which GameCategory to fetch.
     */
    where: GameCategoryWhereUniqueInput
  }

  /**
   * GameCategory findFirst
   */
  export type GameCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCategory
     */
    select?: GameCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameCategory
     */
    omit?: GameCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameCategoryInclude<ExtArgs> | null
    /**
     * Filter, which GameCategory to fetch.
     */
    where?: GameCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameCategories to fetch.
     */
    orderBy?: GameCategoryOrderByWithRelationInput | GameCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameCategories.
     */
    cursor?: GameCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameCategories.
     */
    distinct?: GameCategoryScalarFieldEnum | GameCategoryScalarFieldEnum[]
  }

  /**
   * GameCategory findFirstOrThrow
   */
  export type GameCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCategory
     */
    select?: GameCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameCategory
     */
    omit?: GameCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameCategoryInclude<ExtArgs> | null
    /**
     * Filter, which GameCategory to fetch.
     */
    where?: GameCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameCategories to fetch.
     */
    orderBy?: GameCategoryOrderByWithRelationInput | GameCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameCategories.
     */
    cursor?: GameCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameCategories.
     */
    distinct?: GameCategoryScalarFieldEnum | GameCategoryScalarFieldEnum[]
  }

  /**
   * GameCategory findMany
   */
  export type GameCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCategory
     */
    select?: GameCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameCategory
     */
    omit?: GameCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameCategoryInclude<ExtArgs> | null
    /**
     * Filter, which GameCategories to fetch.
     */
    where?: GameCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameCategories to fetch.
     */
    orderBy?: GameCategoryOrderByWithRelationInput | GameCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameCategories.
     */
    cursor?: GameCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameCategories.
     */
    skip?: number
    distinct?: GameCategoryScalarFieldEnum | GameCategoryScalarFieldEnum[]
  }

  /**
   * GameCategory create
   */
  export type GameCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCategory
     */
    select?: GameCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameCategory
     */
    omit?: GameCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a GameCategory.
     */
    data: XOR<GameCategoryCreateInput, GameCategoryUncheckedCreateInput>
  }

  /**
   * GameCategory createMany
   */
  export type GameCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameCategories.
     */
    data: GameCategoryCreateManyInput | GameCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameCategory createManyAndReturn
   */
  export type GameCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCategory
     */
    select?: GameCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameCategory
     */
    omit?: GameCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many GameCategories.
     */
    data: GameCategoryCreateManyInput | GameCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameCategory update
   */
  export type GameCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCategory
     */
    select?: GameCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameCategory
     */
    omit?: GameCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a GameCategory.
     */
    data: XOR<GameCategoryUpdateInput, GameCategoryUncheckedUpdateInput>
    /**
     * Choose, which GameCategory to update.
     */
    where: GameCategoryWhereUniqueInput
  }

  /**
   * GameCategory updateMany
   */
  export type GameCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameCategories.
     */
    data: XOR<GameCategoryUpdateManyMutationInput, GameCategoryUncheckedUpdateManyInput>
    /**
     * Filter which GameCategories to update
     */
    where?: GameCategoryWhereInput
    /**
     * Limit how many GameCategories to update.
     */
    limit?: number
  }

  /**
   * GameCategory updateManyAndReturn
   */
  export type GameCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCategory
     */
    select?: GameCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameCategory
     */
    omit?: GameCategoryOmit<ExtArgs> | null
    /**
     * The data used to update GameCategories.
     */
    data: XOR<GameCategoryUpdateManyMutationInput, GameCategoryUncheckedUpdateManyInput>
    /**
     * Filter which GameCategories to update
     */
    where?: GameCategoryWhereInput
    /**
     * Limit how many GameCategories to update.
     */
    limit?: number
  }

  /**
   * GameCategory upsert
   */
  export type GameCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCategory
     */
    select?: GameCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameCategory
     */
    omit?: GameCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the GameCategory to update in case it exists.
     */
    where: GameCategoryWhereUniqueInput
    /**
     * In case the GameCategory found by the `where` argument doesn't exist, create a new GameCategory with this data.
     */
    create: XOR<GameCategoryCreateInput, GameCategoryUncheckedCreateInput>
    /**
     * In case the GameCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameCategoryUpdateInput, GameCategoryUncheckedUpdateInput>
  }

  /**
   * GameCategory delete
   */
  export type GameCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCategory
     */
    select?: GameCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameCategory
     */
    omit?: GameCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameCategoryInclude<ExtArgs> | null
    /**
     * Filter which GameCategory to delete.
     */
    where: GameCategoryWhereUniqueInput
  }

  /**
   * GameCategory deleteMany
   */
  export type GameCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameCategories to delete
     */
    where?: GameCategoryWhereInput
    /**
     * Limit how many GameCategories to delete.
     */
    limit?: number
  }

  /**
   * GameCategory.games
   */
  export type GameCategory$gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * GameCategory without action
   */
  export type GameCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCategory
     */
    select?: GameCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameCategory
     */
    omit?: GameCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameCategoryInclude<ExtArgs> | null
  }


  /**
   * Model GameScreenshot
   */

  export type AggregateGameScreenshot = {
    _count: GameScreenshotCountAggregateOutputType | null
    _avg: GameScreenshotAvgAggregateOutputType | null
    _sum: GameScreenshotSumAggregateOutputType | null
    _min: GameScreenshotMinAggregateOutputType | null
    _max: GameScreenshotMaxAggregateOutputType | null
  }

  export type GameScreenshotAvgAggregateOutputType = {
    order: number | null
  }

  export type GameScreenshotSumAggregateOutputType = {
    order: number | null
  }

  export type GameScreenshotMinAggregateOutputType = {
    id: string | null
    gameId: string | null
    imageUrl: string | null
    order: number | null
    createdAt: Date | null
  }

  export type GameScreenshotMaxAggregateOutputType = {
    id: string | null
    gameId: string | null
    imageUrl: string | null
    order: number | null
    createdAt: Date | null
  }

  export type GameScreenshotCountAggregateOutputType = {
    id: number
    gameId: number
    imageUrl: number
    order: number
    createdAt: number
    _all: number
  }


  export type GameScreenshotAvgAggregateInputType = {
    order?: true
  }

  export type GameScreenshotSumAggregateInputType = {
    order?: true
  }

  export type GameScreenshotMinAggregateInputType = {
    id?: true
    gameId?: true
    imageUrl?: true
    order?: true
    createdAt?: true
  }

  export type GameScreenshotMaxAggregateInputType = {
    id?: true
    gameId?: true
    imageUrl?: true
    order?: true
    createdAt?: true
  }

  export type GameScreenshotCountAggregateInputType = {
    id?: true
    gameId?: true
    imageUrl?: true
    order?: true
    createdAt?: true
    _all?: true
  }

  export type GameScreenshotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameScreenshot to aggregate.
     */
    where?: GameScreenshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameScreenshots to fetch.
     */
    orderBy?: GameScreenshotOrderByWithRelationInput | GameScreenshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameScreenshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameScreenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameScreenshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameScreenshots
    **/
    _count?: true | GameScreenshotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameScreenshotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameScreenshotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameScreenshotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameScreenshotMaxAggregateInputType
  }

  export type GetGameScreenshotAggregateType<T extends GameScreenshotAggregateArgs> = {
        [P in keyof T & keyof AggregateGameScreenshot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameScreenshot[P]>
      : GetScalarType<T[P], AggregateGameScreenshot[P]>
  }




  export type GameScreenshotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameScreenshotWhereInput
    orderBy?: GameScreenshotOrderByWithAggregationInput | GameScreenshotOrderByWithAggregationInput[]
    by: GameScreenshotScalarFieldEnum[] | GameScreenshotScalarFieldEnum
    having?: GameScreenshotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameScreenshotCountAggregateInputType | true
    _avg?: GameScreenshotAvgAggregateInputType
    _sum?: GameScreenshotSumAggregateInputType
    _min?: GameScreenshotMinAggregateInputType
    _max?: GameScreenshotMaxAggregateInputType
  }

  export type GameScreenshotGroupByOutputType = {
    id: string
    gameId: string
    imageUrl: string
    order: number
    createdAt: Date
    _count: GameScreenshotCountAggregateOutputType | null
    _avg: GameScreenshotAvgAggregateOutputType | null
    _sum: GameScreenshotSumAggregateOutputType | null
    _min: GameScreenshotMinAggregateOutputType | null
    _max: GameScreenshotMaxAggregateOutputType | null
  }

  type GetGameScreenshotGroupByPayload<T extends GameScreenshotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameScreenshotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameScreenshotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameScreenshotGroupByOutputType[P]>
            : GetScalarType<T[P], GameScreenshotGroupByOutputType[P]>
        }
      >
    >


  export type GameScreenshotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    imageUrl?: boolean
    order?: boolean
    createdAt?: boolean
    Game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameScreenshot"]>

  export type GameScreenshotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    imageUrl?: boolean
    order?: boolean
    createdAt?: boolean
    Game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameScreenshot"]>

  export type GameScreenshotSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    imageUrl?: boolean
    order?: boolean
    createdAt?: boolean
    Game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameScreenshot"]>

  export type GameScreenshotSelectScalar = {
    id?: boolean
    gameId?: boolean
    imageUrl?: boolean
    order?: boolean
    createdAt?: boolean
  }

  export type GameScreenshotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "gameId" | "imageUrl" | "order" | "createdAt", ExtArgs["result"]["gameScreenshot"]>
  export type GameScreenshotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Game?: boolean | GameDefaultArgs<ExtArgs>
  }
  export type GameScreenshotIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Game?: boolean | GameDefaultArgs<ExtArgs>
  }
  export type GameScreenshotIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Game?: boolean | GameDefaultArgs<ExtArgs>
  }

  export type $GameScreenshotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameScreenshot"
    objects: {
      Game: Prisma.$GamePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      gameId: string
      imageUrl: string
      order: number
      createdAt: Date
    }, ExtArgs["result"]["gameScreenshot"]>
    composites: {}
  }

  type GameScreenshotGetPayload<S extends boolean | null | undefined | GameScreenshotDefaultArgs> = $Result.GetResult<Prisma.$GameScreenshotPayload, S>

  type GameScreenshotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameScreenshotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameScreenshotCountAggregateInputType | true
    }

  export interface GameScreenshotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameScreenshot'], meta: { name: 'GameScreenshot' } }
    /**
     * Find zero or one GameScreenshot that matches the filter.
     * @param {GameScreenshotFindUniqueArgs} args - Arguments to find a GameScreenshot
     * @example
     * // Get one GameScreenshot
     * const gameScreenshot = await prisma.gameScreenshot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameScreenshotFindUniqueArgs>(args: SelectSubset<T, GameScreenshotFindUniqueArgs<ExtArgs>>): Prisma__GameScreenshotClient<$Result.GetResult<Prisma.$GameScreenshotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameScreenshot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameScreenshotFindUniqueOrThrowArgs} args - Arguments to find a GameScreenshot
     * @example
     * // Get one GameScreenshot
     * const gameScreenshot = await prisma.gameScreenshot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameScreenshotFindUniqueOrThrowArgs>(args: SelectSubset<T, GameScreenshotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameScreenshotClient<$Result.GetResult<Prisma.$GameScreenshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameScreenshot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameScreenshotFindFirstArgs} args - Arguments to find a GameScreenshot
     * @example
     * // Get one GameScreenshot
     * const gameScreenshot = await prisma.gameScreenshot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameScreenshotFindFirstArgs>(args?: SelectSubset<T, GameScreenshotFindFirstArgs<ExtArgs>>): Prisma__GameScreenshotClient<$Result.GetResult<Prisma.$GameScreenshotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameScreenshot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameScreenshotFindFirstOrThrowArgs} args - Arguments to find a GameScreenshot
     * @example
     * // Get one GameScreenshot
     * const gameScreenshot = await prisma.gameScreenshot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameScreenshotFindFirstOrThrowArgs>(args?: SelectSubset<T, GameScreenshotFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameScreenshotClient<$Result.GetResult<Prisma.$GameScreenshotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameScreenshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameScreenshotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameScreenshots
     * const gameScreenshots = await prisma.gameScreenshot.findMany()
     * 
     * // Get first 10 GameScreenshots
     * const gameScreenshots = await prisma.gameScreenshot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameScreenshotWithIdOnly = await prisma.gameScreenshot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameScreenshotFindManyArgs>(args?: SelectSubset<T, GameScreenshotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameScreenshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameScreenshot.
     * @param {GameScreenshotCreateArgs} args - Arguments to create a GameScreenshot.
     * @example
     * // Create one GameScreenshot
     * const GameScreenshot = await prisma.gameScreenshot.create({
     *   data: {
     *     // ... data to create a GameScreenshot
     *   }
     * })
     * 
     */
    create<T extends GameScreenshotCreateArgs>(args: SelectSubset<T, GameScreenshotCreateArgs<ExtArgs>>): Prisma__GameScreenshotClient<$Result.GetResult<Prisma.$GameScreenshotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameScreenshots.
     * @param {GameScreenshotCreateManyArgs} args - Arguments to create many GameScreenshots.
     * @example
     * // Create many GameScreenshots
     * const gameScreenshot = await prisma.gameScreenshot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameScreenshotCreateManyArgs>(args?: SelectSubset<T, GameScreenshotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameScreenshots and returns the data saved in the database.
     * @param {GameScreenshotCreateManyAndReturnArgs} args - Arguments to create many GameScreenshots.
     * @example
     * // Create many GameScreenshots
     * const gameScreenshot = await prisma.gameScreenshot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameScreenshots and only return the `id`
     * const gameScreenshotWithIdOnly = await prisma.gameScreenshot.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameScreenshotCreateManyAndReturnArgs>(args?: SelectSubset<T, GameScreenshotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameScreenshotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameScreenshot.
     * @param {GameScreenshotDeleteArgs} args - Arguments to delete one GameScreenshot.
     * @example
     * // Delete one GameScreenshot
     * const GameScreenshot = await prisma.gameScreenshot.delete({
     *   where: {
     *     // ... filter to delete one GameScreenshot
     *   }
     * })
     * 
     */
    delete<T extends GameScreenshotDeleteArgs>(args: SelectSubset<T, GameScreenshotDeleteArgs<ExtArgs>>): Prisma__GameScreenshotClient<$Result.GetResult<Prisma.$GameScreenshotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameScreenshot.
     * @param {GameScreenshotUpdateArgs} args - Arguments to update one GameScreenshot.
     * @example
     * // Update one GameScreenshot
     * const gameScreenshot = await prisma.gameScreenshot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameScreenshotUpdateArgs>(args: SelectSubset<T, GameScreenshotUpdateArgs<ExtArgs>>): Prisma__GameScreenshotClient<$Result.GetResult<Prisma.$GameScreenshotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameScreenshots.
     * @param {GameScreenshotDeleteManyArgs} args - Arguments to filter GameScreenshots to delete.
     * @example
     * // Delete a few GameScreenshots
     * const { count } = await prisma.gameScreenshot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameScreenshotDeleteManyArgs>(args?: SelectSubset<T, GameScreenshotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameScreenshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameScreenshotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameScreenshots
     * const gameScreenshot = await prisma.gameScreenshot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameScreenshotUpdateManyArgs>(args: SelectSubset<T, GameScreenshotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameScreenshots and returns the data updated in the database.
     * @param {GameScreenshotUpdateManyAndReturnArgs} args - Arguments to update many GameScreenshots.
     * @example
     * // Update many GameScreenshots
     * const gameScreenshot = await prisma.gameScreenshot.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameScreenshots and only return the `id`
     * const gameScreenshotWithIdOnly = await prisma.gameScreenshot.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameScreenshotUpdateManyAndReturnArgs>(args: SelectSubset<T, GameScreenshotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameScreenshotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameScreenshot.
     * @param {GameScreenshotUpsertArgs} args - Arguments to update or create a GameScreenshot.
     * @example
     * // Update or create a GameScreenshot
     * const gameScreenshot = await prisma.gameScreenshot.upsert({
     *   create: {
     *     // ... data to create a GameScreenshot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameScreenshot we want to update
     *   }
     * })
     */
    upsert<T extends GameScreenshotUpsertArgs>(args: SelectSubset<T, GameScreenshotUpsertArgs<ExtArgs>>): Prisma__GameScreenshotClient<$Result.GetResult<Prisma.$GameScreenshotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameScreenshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameScreenshotCountArgs} args - Arguments to filter GameScreenshots to count.
     * @example
     * // Count the number of GameScreenshots
     * const count = await prisma.gameScreenshot.count({
     *   where: {
     *     // ... the filter for the GameScreenshots we want to count
     *   }
     * })
    **/
    count<T extends GameScreenshotCountArgs>(
      args?: Subset<T, GameScreenshotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameScreenshotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameScreenshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameScreenshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameScreenshotAggregateArgs>(args: Subset<T, GameScreenshotAggregateArgs>): Prisma.PrismaPromise<GetGameScreenshotAggregateType<T>>

    /**
     * Group by GameScreenshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameScreenshotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameScreenshotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameScreenshotGroupByArgs['orderBy'] }
        : { orderBy?: GameScreenshotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameScreenshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameScreenshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameScreenshot model
   */
  readonly fields: GameScreenshotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameScreenshot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameScreenshotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameScreenshot model
   */
  interface GameScreenshotFieldRefs {
    readonly id: FieldRef<"GameScreenshot", 'String'>
    readonly gameId: FieldRef<"GameScreenshot", 'String'>
    readonly imageUrl: FieldRef<"GameScreenshot", 'String'>
    readonly order: FieldRef<"GameScreenshot", 'Int'>
    readonly createdAt: FieldRef<"GameScreenshot", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GameScreenshot findUnique
   */
  export type GameScreenshotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameScreenshot
     */
    select?: GameScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameScreenshot
     */
    omit?: GameScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameScreenshotInclude<ExtArgs> | null
    /**
     * Filter, which GameScreenshot to fetch.
     */
    where: GameScreenshotWhereUniqueInput
  }

  /**
   * GameScreenshot findUniqueOrThrow
   */
  export type GameScreenshotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameScreenshot
     */
    select?: GameScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameScreenshot
     */
    omit?: GameScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameScreenshotInclude<ExtArgs> | null
    /**
     * Filter, which GameScreenshot to fetch.
     */
    where: GameScreenshotWhereUniqueInput
  }

  /**
   * GameScreenshot findFirst
   */
  export type GameScreenshotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameScreenshot
     */
    select?: GameScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameScreenshot
     */
    omit?: GameScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameScreenshotInclude<ExtArgs> | null
    /**
     * Filter, which GameScreenshot to fetch.
     */
    where?: GameScreenshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameScreenshots to fetch.
     */
    orderBy?: GameScreenshotOrderByWithRelationInput | GameScreenshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameScreenshots.
     */
    cursor?: GameScreenshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameScreenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameScreenshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameScreenshots.
     */
    distinct?: GameScreenshotScalarFieldEnum | GameScreenshotScalarFieldEnum[]
  }

  /**
   * GameScreenshot findFirstOrThrow
   */
  export type GameScreenshotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameScreenshot
     */
    select?: GameScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameScreenshot
     */
    omit?: GameScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameScreenshotInclude<ExtArgs> | null
    /**
     * Filter, which GameScreenshot to fetch.
     */
    where?: GameScreenshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameScreenshots to fetch.
     */
    orderBy?: GameScreenshotOrderByWithRelationInput | GameScreenshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameScreenshots.
     */
    cursor?: GameScreenshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameScreenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameScreenshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameScreenshots.
     */
    distinct?: GameScreenshotScalarFieldEnum | GameScreenshotScalarFieldEnum[]
  }

  /**
   * GameScreenshot findMany
   */
  export type GameScreenshotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameScreenshot
     */
    select?: GameScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameScreenshot
     */
    omit?: GameScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameScreenshotInclude<ExtArgs> | null
    /**
     * Filter, which GameScreenshots to fetch.
     */
    where?: GameScreenshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameScreenshots to fetch.
     */
    orderBy?: GameScreenshotOrderByWithRelationInput | GameScreenshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameScreenshots.
     */
    cursor?: GameScreenshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameScreenshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameScreenshots.
     */
    skip?: number
    distinct?: GameScreenshotScalarFieldEnum | GameScreenshotScalarFieldEnum[]
  }

  /**
   * GameScreenshot create
   */
  export type GameScreenshotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameScreenshot
     */
    select?: GameScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameScreenshot
     */
    omit?: GameScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameScreenshotInclude<ExtArgs> | null
    /**
     * The data needed to create a GameScreenshot.
     */
    data: XOR<GameScreenshotCreateInput, GameScreenshotUncheckedCreateInput>
  }

  /**
   * GameScreenshot createMany
   */
  export type GameScreenshotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameScreenshots.
     */
    data: GameScreenshotCreateManyInput | GameScreenshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameScreenshot createManyAndReturn
   */
  export type GameScreenshotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameScreenshot
     */
    select?: GameScreenshotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameScreenshot
     */
    omit?: GameScreenshotOmit<ExtArgs> | null
    /**
     * The data used to create many GameScreenshots.
     */
    data: GameScreenshotCreateManyInput | GameScreenshotCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameScreenshotIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameScreenshot update
   */
  export type GameScreenshotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameScreenshot
     */
    select?: GameScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameScreenshot
     */
    omit?: GameScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameScreenshotInclude<ExtArgs> | null
    /**
     * The data needed to update a GameScreenshot.
     */
    data: XOR<GameScreenshotUpdateInput, GameScreenshotUncheckedUpdateInput>
    /**
     * Choose, which GameScreenshot to update.
     */
    where: GameScreenshotWhereUniqueInput
  }

  /**
   * GameScreenshot updateMany
   */
  export type GameScreenshotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameScreenshots.
     */
    data: XOR<GameScreenshotUpdateManyMutationInput, GameScreenshotUncheckedUpdateManyInput>
    /**
     * Filter which GameScreenshots to update
     */
    where?: GameScreenshotWhereInput
    /**
     * Limit how many GameScreenshots to update.
     */
    limit?: number
  }

  /**
   * GameScreenshot updateManyAndReturn
   */
  export type GameScreenshotUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameScreenshot
     */
    select?: GameScreenshotSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameScreenshot
     */
    omit?: GameScreenshotOmit<ExtArgs> | null
    /**
     * The data used to update GameScreenshots.
     */
    data: XOR<GameScreenshotUpdateManyMutationInput, GameScreenshotUncheckedUpdateManyInput>
    /**
     * Filter which GameScreenshots to update
     */
    where?: GameScreenshotWhereInput
    /**
     * Limit how many GameScreenshots to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameScreenshotIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameScreenshot upsert
   */
  export type GameScreenshotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameScreenshot
     */
    select?: GameScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameScreenshot
     */
    omit?: GameScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameScreenshotInclude<ExtArgs> | null
    /**
     * The filter to search for the GameScreenshot to update in case it exists.
     */
    where: GameScreenshotWhereUniqueInput
    /**
     * In case the GameScreenshot found by the `where` argument doesn't exist, create a new GameScreenshot with this data.
     */
    create: XOR<GameScreenshotCreateInput, GameScreenshotUncheckedCreateInput>
    /**
     * In case the GameScreenshot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameScreenshotUpdateInput, GameScreenshotUncheckedUpdateInput>
  }

  /**
   * GameScreenshot delete
   */
  export type GameScreenshotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameScreenshot
     */
    select?: GameScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameScreenshot
     */
    omit?: GameScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameScreenshotInclude<ExtArgs> | null
    /**
     * Filter which GameScreenshot to delete.
     */
    where: GameScreenshotWhereUniqueInput
  }

  /**
   * GameScreenshot deleteMany
   */
  export type GameScreenshotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameScreenshots to delete
     */
    where?: GameScreenshotWhereInput
    /**
     * Limit how many GameScreenshots to delete.
     */
    limit?: number
  }

  /**
   * GameScreenshot without action
   */
  export type GameScreenshotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameScreenshot
     */
    select?: GameScreenshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameScreenshot
     */
    omit?: GameScreenshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameScreenshotInclude<ExtArgs> | null
  }


  /**
   * Model GameTag
   */

  export type AggregateGameTag = {
    _count: GameTagCountAggregateOutputType | null
    _min: GameTagMinAggregateOutputType | null
    _max: GameTagMaxAggregateOutputType | null
  }

  export type GameTagMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
  }

  export type GameTagMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
  }

  export type GameTagCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    _all: number
  }


  export type GameTagMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type GameTagMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type GameTagCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type GameTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameTag to aggregate.
     */
    where?: GameTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameTags to fetch.
     */
    orderBy?: GameTagOrderByWithRelationInput | GameTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameTags
    **/
    _count?: true | GameTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameTagMaxAggregateInputType
  }

  export type GetGameTagAggregateType<T extends GameTagAggregateArgs> = {
        [P in keyof T & keyof AggregateGameTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameTag[P]>
      : GetScalarType<T[P], AggregateGameTag[P]>
  }




  export type GameTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameTagWhereInput
    orderBy?: GameTagOrderByWithAggregationInput | GameTagOrderByWithAggregationInput[]
    by: GameTagScalarFieldEnum[] | GameTagScalarFieldEnum
    having?: GameTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameTagCountAggregateInputType | true
    _min?: GameTagMinAggregateInputType
    _max?: GameTagMaxAggregateInputType
  }

  export type GameTagGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    _count: GameTagCountAggregateOutputType | null
    _min: GameTagMinAggregateOutputType | null
    _max: GameTagMaxAggregateOutputType | null
  }

  type GetGameTagGroupByPayload<T extends GameTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameTagGroupByOutputType[P]>
            : GetScalarType<T[P], GameTagGroupByOutputType[P]>
        }
      >
    >


  export type GameTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    Game?: boolean | GameTag$GameArgs<ExtArgs>
    _count?: boolean | GameTagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameTag"]>

  export type GameTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["gameTag"]>

  export type GameTagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["gameTag"]>

  export type GameTagSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type GameTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt", ExtArgs["result"]["gameTag"]>
  export type GameTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Game?: boolean | GameTag$GameArgs<ExtArgs>
    _count?: boolean | GameTagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GameTagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GameTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameTag"
    objects: {
      Game: Prisma.$GamePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
    }, ExtArgs["result"]["gameTag"]>
    composites: {}
  }

  type GameTagGetPayload<S extends boolean | null | undefined | GameTagDefaultArgs> = $Result.GetResult<Prisma.$GameTagPayload, S>

  type GameTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameTagCountAggregateInputType | true
    }

  export interface GameTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameTag'], meta: { name: 'GameTag' } }
    /**
     * Find zero or one GameTag that matches the filter.
     * @param {GameTagFindUniqueArgs} args - Arguments to find a GameTag
     * @example
     * // Get one GameTag
     * const gameTag = await prisma.gameTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameTagFindUniqueArgs>(args: SelectSubset<T, GameTagFindUniqueArgs<ExtArgs>>): Prisma__GameTagClient<$Result.GetResult<Prisma.$GameTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameTagFindUniqueOrThrowArgs} args - Arguments to find a GameTag
     * @example
     * // Get one GameTag
     * const gameTag = await prisma.gameTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameTagFindUniqueOrThrowArgs>(args: SelectSubset<T, GameTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameTagClient<$Result.GetResult<Prisma.$GameTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTagFindFirstArgs} args - Arguments to find a GameTag
     * @example
     * // Get one GameTag
     * const gameTag = await prisma.gameTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameTagFindFirstArgs>(args?: SelectSubset<T, GameTagFindFirstArgs<ExtArgs>>): Prisma__GameTagClient<$Result.GetResult<Prisma.$GameTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTagFindFirstOrThrowArgs} args - Arguments to find a GameTag
     * @example
     * // Get one GameTag
     * const gameTag = await prisma.gameTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameTagFindFirstOrThrowArgs>(args?: SelectSubset<T, GameTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameTagClient<$Result.GetResult<Prisma.$GameTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameTags
     * const gameTags = await prisma.gameTag.findMany()
     * 
     * // Get first 10 GameTags
     * const gameTags = await prisma.gameTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameTagWithIdOnly = await prisma.gameTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameTagFindManyArgs>(args?: SelectSubset<T, GameTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameTag.
     * @param {GameTagCreateArgs} args - Arguments to create a GameTag.
     * @example
     * // Create one GameTag
     * const GameTag = await prisma.gameTag.create({
     *   data: {
     *     // ... data to create a GameTag
     *   }
     * })
     * 
     */
    create<T extends GameTagCreateArgs>(args: SelectSubset<T, GameTagCreateArgs<ExtArgs>>): Prisma__GameTagClient<$Result.GetResult<Prisma.$GameTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameTags.
     * @param {GameTagCreateManyArgs} args - Arguments to create many GameTags.
     * @example
     * // Create many GameTags
     * const gameTag = await prisma.gameTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameTagCreateManyArgs>(args?: SelectSubset<T, GameTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameTags and returns the data saved in the database.
     * @param {GameTagCreateManyAndReturnArgs} args - Arguments to create many GameTags.
     * @example
     * // Create many GameTags
     * const gameTag = await prisma.gameTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameTags and only return the `id`
     * const gameTagWithIdOnly = await prisma.gameTag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameTagCreateManyAndReturnArgs>(args?: SelectSubset<T, GameTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameTag.
     * @param {GameTagDeleteArgs} args - Arguments to delete one GameTag.
     * @example
     * // Delete one GameTag
     * const GameTag = await prisma.gameTag.delete({
     *   where: {
     *     // ... filter to delete one GameTag
     *   }
     * })
     * 
     */
    delete<T extends GameTagDeleteArgs>(args: SelectSubset<T, GameTagDeleteArgs<ExtArgs>>): Prisma__GameTagClient<$Result.GetResult<Prisma.$GameTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameTag.
     * @param {GameTagUpdateArgs} args - Arguments to update one GameTag.
     * @example
     * // Update one GameTag
     * const gameTag = await prisma.gameTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameTagUpdateArgs>(args: SelectSubset<T, GameTagUpdateArgs<ExtArgs>>): Prisma__GameTagClient<$Result.GetResult<Prisma.$GameTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameTags.
     * @param {GameTagDeleteManyArgs} args - Arguments to filter GameTags to delete.
     * @example
     * // Delete a few GameTags
     * const { count } = await prisma.gameTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameTagDeleteManyArgs>(args?: SelectSubset<T, GameTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameTags
     * const gameTag = await prisma.gameTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameTagUpdateManyArgs>(args: SelectSubset<T, GameTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameTags and returns the data updated in the database.
     * @param {GameTagUpdateManyAndReturnArgs} args - Arguments to update many GameTags.
     * @example
     * // Update many GameTags
     * const gameTag = await prisma.gameTag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameTags and only return the `id`
     * const gameTagWithIdOnly = await prisma.gameTag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameTagUpdateManyAndReturnArgs>(args: SelectSubset<T, GameTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameTag.
     * @param {GameTagUpsertArgs} args - Arguments to update or create a GameTag.
     * @example
     * // Update or create a GameTag
     * const gameTag = await prisma.gameTag.upsert({
     *   create: {
     *     // ... data to create a GameTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameTag we want to update
     *   }
     * })
     */
    upsert<T extends GameTagUpsertArgs>(args: SelectSubset<T, GameTagUpsertArgs<ExtArgs>>): Prisma__GameTagClient<$Result.GetResult<Prisma.$GameTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTagCountArgs} args - Arguments to filter GameTags to count.
     * @example
     * // Count the number of GameTags
     * const count = await prisma.gameTag.count({
     *   where: {
     *     // ... the filter for the GameTags we want to count
     *   }
     * })
    **/
    count<T extends GameTagCountArgs>(
      args?: Subset<T, GameTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameTagAggregateArgs>(args: Subset<T, GameTagAggregateArgs>): Prisma.PrismaPromise<GetGameTagAggregateType<T>>

    /**
     * Group by GameTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameTagGroupByArgs['orderBy'] }
        : { orderBy?: GameTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameTag model
   */
  readonly fields: GameTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Game<T extends GameTag$GameArgs<ExtArgs> = {}>(args?: Subset<T, GameTag$GameArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameTag model
   */
  interface GameTagFieldRefs {
    readonly id: FieldRef<"GameTag", 'String'>
    readonly name: FieldRef<"GameTag", 'String'>
    readonly createdAt: FieldRef<"GameTag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GameTag findUnique
   */
  export type GameTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTag
     */
    select?: GameTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTag
     */
    omit?: GameTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTagInclude<ExtArgs> | null
    /**
     * Filter, which GameTag to fetch.
     */
    where: GameTagWhereUniqueInput
  }

  /**
   * GameTag findUniqueOrThrow
   */
  export type GameTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTag
     */
    select?: GameTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTag
     */
    omit?: GameTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTagInclude<ExtArgs> | null
    /**
     * Filter, which GameTag to fetch.
     */
    where: GameTagWhereUniqueInput
  }

  /**
   * GameTag findFirst
   */
  export type GameTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTag
     */
    select?: GameTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTag
     */
    omit?: GameTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTagInclude<ExtArgs> | null
    /**
     * Filter, which GameTag to fetch.
     */
    where?: GameTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameTags to fetch.
     */
    orderBy?: GameTagOrderByWithRelationInput | GameTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameTags.
     */
    cursor?: GameTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameTags.
     */
    distinct?: GameTagScalarFieldEnum | GameTagScalarFieldEnum[]
  }

  /**
   * GameTag findFirstOrThrow
   */
  export type GameTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTag
     */
    select?: GameTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTag
     */
    omit?: GameTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTagInclude<ExtArgs> | null
    /**
     * Filter, which GameTag to fetch.
     */
    where?: GameTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameTags to fetch.
     */
    orderBy?: GameTagOrderByWithRelationInput | GameTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameTags.
     */
    cursor?: GameTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameTags.
     */
    distinct?: GameTagScalarFieldEnum | GameTagScalarFieldEnum[]
  }

  /**
   * GameTag findMany
   */
  export type GameTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTag
     */
    select?: GameTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTag
     */
    omit?: GameTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTagInclude<ExtArgs> | null
    /**
     * Filter, which GameTags to fetch.
     */
    where?: GameTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameTags to fetch.
     */
    orderBy?: GameTagOrderByWithRelationInput | GameTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameTags.
     */
    cursor?: GameTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameTags.
     */
    skip?: number
    distinct?: GameTagScalarFieldEnum | GameTagScalarFieldEnum[]
  }

  /**
   * GameTag create
   */
  export type GameTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTag
     */
    select?: GameTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTag
     */
    omit?: GameTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTagInclude<ExtArgs> | null
    /**
     * The data needed to create a GameTag.
     */
    data: XOR<GameTagCreateInput, GameTagUncheckedCreateInput>
  }

  /**
   * GameTag createMany
   */
  export type GameTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameTags.
     */
    data: GameTagCreateManyInput | GameTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameTag createManyAndReturn
   */
  export type GameTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTag
     */
    select?: GameTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameTag
     */
    omit?: GameTagOmit<ExtArgs> | null
    /**
     * The data used to create many GameTags.
     */
    data: GameTagCreateManyInput | GameTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameTag update
   */
  export type GameTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTag
     */
    select?: GameTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTag
     */
    omit?: GameTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTagInclude<ExtArgs> | null
    /**
     * The data needed to update a GameTag.
     */
    data: XOR<GameTagUpdateInput, GameTagUncheckedUpdateInput>
    /**
     * Choose, which GameTag to update.
     */
    where: GameTagWhereUniqueInput
  }

  /**
   * GameTag updateMany
   */
  export type GameTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameTags.
     */
    data: XOR<GameTagUpdateManyMutationInput, GameTagUncheckedUpdateManyInput>
    /**
     * Filter which GameTags to update
     */
    where?: GameTagWhereInput
    /**
     * Limit how many GameTags to update.
     */
    limit?: number
  }

  /**
   * GameTag updateManyAndReturn
   */
  export type GameTagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTag
     */
    select?: GameTagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameTag
     */
    omit?: GameTagOmit<ExtArgs> | null
    /**
     * The data used to update GameTags.
     */
    data: XOR<GameTagUpdateManyMutationInput, GameTagUncheckedUpdateManyInput>
    /**
     * Filter which GameTags to update
     */
    where?: GameTagWhereInput
    /**
     * Limit how many GameTags to update.
     */
    limit?: number
  }

  /**
   * GameTag upsert
   */
  export type GameTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTag
     */
    select?: GameTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTag
     */
    omit?: GameTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTagInclude<ExtArgs> | null
    /**
     * The filter to search for the GameTag to update in case it exists.
     */
    where: GameTagWhereUniqueInput
    /**
     * In case the GameTag found by the `where` argument doesn't exist, create a new GameTag with this data.
     */
    create: XOR<GameTagCreateInput, GameTagUncheckedCreateInput>
    /**
     * In case the GameTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameTagUpdateInput, GameTagUncheckedUpdateInput>
  }

  /**
   * GameTag delete
   */
  export type GameTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTag
     */
    select?: GameTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTag
     */
    omit?: GameTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTagInclude<ExtArgs> | null
    /**
     * Filter which GameTag to delete.
     */
    where: GameTagWhereUniqueInput
  }

  /**
   * GameTag deleteMany
   */
  export type GameTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameTags to delete
     */
    where?: GameTagWhereInput
    /**
     * Limit how many GameTags to delete.
     */
    limit?: number
  }

  /**
   * GameTag.Game
   */
  export type GameTag$GameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * GameTag without action
   */
  export type GameTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTag
     */
    select?: GameTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTag
     */
    omit?: GameTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameTagInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PreferenceScalarFieldEnum: {
    accountAddress: 'accountAddress',
    appIcon: 'appIcon',
    includeLowScore: 'includeLowScore',
    createdAt: 'createdAt'
  };

  export type PreferenceScalarFieldEnum = (typeof PreferenceScalarFieldEnum)[keyof typeof PreferenceScalarFieldEnum]


  export const PremiumProfileScalarFieldEnum: {
    id: 'id',
    walletAddress: 'walletAddress',
    profileId: 'profileId',
    isActive: 'isActive',
    linkedAt: 'linkedAt',
    deactivatedAt: 'deactivatedAt'
  };

  export type PremiumProfileScalarFieldEnum = (typeof PremiumProfileScalarFieldEnum)[keyof typeof PremiumProfileScalarFieldEnum]


  export const UserScalarFieldEnum: {
    walletAddress: 'walletAddress',
    email: 'email',
    username: 'username',
    displayName: 'displayName',
    avatarUrl: 'avatarUrl',
    bio: 'bio',
    location: 'location',
    website: 'website',
    twitterHandle: 'twitterHandle',
    registrationDate: 'registrationDate',
    referrerAddress: 'referrerAddress',
    registrationTxHash: 'registrationTxHash',
    premiumUpgradedAt: 'premiumUpgradedAt',
    lastActiveAt: 'lastActiveAt',
    totalLogins: 'totalLogins',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserPreferencesScalarFieldEnum: {
    walletAddress: 'walletAddress',
    emailNotifications: 'emailNotifications',
    pushNotifications: 'pushNotifications',
    marketingEmails: 'marketingEmails',
    privacyLevel: 'privacyLevel',
    language: 'language',
    timezone: 'timezone',
    autoLinkProfile: 'autoLinkProfile',
    showPremiumBadge: 'showPremiumBadge',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserPreferencesScalarFieldEnum = (typeof UserPreferencesScalarFieldEnum)[keyof typeof UserPreferencesScalarFieldEnum]


  export const UserStatsScalarFieldEnum: {
    walletAddress: 'walletAddress',
    totalPosts: 'totalPosts',
    totalComments: 'totalComments',
    totalLikes: 'totalLikes',
    totalFollowers: 'totalFollowers',
    totalFollowing: 'totalFollowing',
    daysAsPremium: 'daysAsPremium',
    referralCount: 'referralCount',
    totalEarnings: 'totalEarnings',
    questsCompleted: 'questsCompleted',
    questsInProgress: 'questsInProgress',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserStatsScalarFieldEnum = (typeof UserStatsScalarFieldEnum)[keyof typeof UserStatsScalarFieldEnum]


  export const UserRewardScalarFieldEnum: {
    id: 'id',
    walletAddress: 'walletAddress',
    type: 'type',
    amount: 'amount',
    currency: 'currency',
    status: 'status',
    sourceType: 'sourceType',
    sourceId: 'sourceId',
    sourceMetadata: 'sourceMetadata',
    txHash: 'txHash',
    claimedAt: 'claimedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserRewardScalarFieldEnum = (typeof UserRewardScalarFieldEnum)[keyof typeof UserRewardScalarFieldEnum]


  export const UserQuestScalarFieldEnum: {
    id: 'id',
    walletAddress: 'walletAddress',
    questId: 'questId',
    title: 'title',
    description: 'description',
    type: 'type',
    status: 'status',
    currentProgress: 'currentProgress',
    targetProgress: 'targetProgress',
    rewardAmount: 'rewardAmount',
    rewardCurrency: 'rewardCurrency',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserQuestScalarFieldEnum = (typeof UserQuestScalarFieldEnum)[keyof typeof UserQuestScalarFieldEnum]


  export const UserCoinScalarFieldEnum: {
    id: 'id',
    walletAddress: 'walletAddress',
    coinType: 'coinType',
    amount: 'amount',
    earnedAt: 'earnedAt',
    sourceType: 'sourceType',
    sourceId: 'sourceId',
    sourceMetadata: 'sourceMetadata',
    createdAt: 'createdAt'
  };

  export type UserCoinScalarFieldEnum = (typeof UserCoinScalarFieldEnum)[keyof typeof UserCoinScalarFieldEnum]


  export const UserNotificationScalarFieldEnum: {
    id: 'id',
    walletAddress: 'walletAddress',
    type: 'type',
    title: 'title',
    message: 'message',
    priority: 'priority',
    isRead: 'isRead',
    readAt: 'readAt',
    actionUrl: 'actionUrl',
    actionMetadata: 'actionMetadata',
    createdAt: 'createdAt'
  };

  export type UserNotificationScalarFieldEnum = (typeof UserNotificationScalarFieldEnum)[keyof typeof UserNotificationScalarFieldEnum]


  export const AdminUserScalarFieldEnum: {
    id: 'id',
    walletAddress: 'walletAddress',
    email: 'email',
    username: 'username',
    displayName: 'displayName',
    role: 'role',
    isActive: 'isActive',
    lastLoginAt: 'lastLoginAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AdminUserScalarFieldEnum = (typeof AdminUserScalarFieldEnum)[keyof typeof AdminUserScalarFieldEnum]


  export const AdminPermissionScalarFieldEnum: {
    id: 'id',
    adminUserId: 'adminUserId',
    permission: 'permission',
    grantedAt: 'grantedAt',
    grantedBy: 'grantedBy'
  };

  export type AdminPermissionScalarFieldEnum = (typeof AdminPermissionScalarFieldEnum)[keyof typeof AdminPermissionScalarFieldEnum]


  export const AdminActionScalarFieldEnum: {
    id: 'id',
    adminUserId: 'adminUserId',
    actionType: 'actionType',
    targetWallet: 'targetWallet',
    targetProfileId: 'targetProfileId',
    reason: 'reason',
    metadata: 'metadata',
    status: 'status',
    result: 'result',
    errorMessage: 'errorMessage',
    createdAt: 'createdAt',
    completedAt: 'completedAt'
  };

  export type AdminActionScalarFieldEnum = (typeof AdminActionScalarFieldEnum)[keyof typeof AdminActionScalarFieldEnum]


  export const AdminNoteScalarFieldEnum: {
    id: 'id',
    adminUserId: 'adminUserId',
    walletAddress: 'walletAddress',
    note: 'note',
    isPrivate: 'isPrivate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AdminNoteScalarFieldEnum = (typeof AdminNoteScalarFieldEnum)[keyof typeof AdminNoteScalarFieldEnum]


  export const FeatureScalarFieldEnum: {
    id: 'id',
    featureId: 'featureId',
    name: 'name',
    description: 'description',
    category: 'category',
    standardAccess: 'standardAccess',
    premiumAccess: 'premiumAccess',
    adminOverride: 'adminOverride',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FeatureScalarFieldEnum = (typeof FeatureScalarFieldEnum)[keyof typeof FeatureScalarFieldEnum]


  export const FeatureAccessScalarFieldEnum: {
    id: 'id',
    featureId: 'featureId',
    walletAddress: 'walletAddress',
    grantedBy: 'grantedBy',
    grantedAt: 'grantedAt',
    expiresAt: 'expiresAt',
    isActive: 'isActive'
  };

  export type FeatureAccessScalarFieldEnum = (typeof FeatureAccessScalarFieldEnum)[keyof typeof FeatureAccessScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    description: 'description',
    instructions: 'instructions',
    packageUrl: 'packageUrl',
    entryFilePath: 'entryFilePath',
    iconUrl: 'iconUrl',
    coverImageUrl: 'coverImageUrl',
    width: 'width',
    height: 'height',
    orientation: 'orientation',
    developerName: 'developerName',
    version: 'version',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const GameCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    color: 'color',
    description: 'description',
    icon: 'icon',
    metaDescription: 'metaDescription',
    slug: 'slug'
  };

  export type GameCategoryScalarFieldEnum = (typeof GameCategoryScalarFieldEnum)[keyof typeof GameCategoryScalarFieldEnum]


  export const GameScreenshotScalarFieldEnum: {
    id: 'id',
    gameId: 'gameId',
    imageUrl: 'imageUrl',
    order: 'order',
    createdAt: 'createdAt'
  };

  export type GameScreenshotScalarFieldEnum = (typeof GameScreenshotScalarFieldEnum)[keyof typeof GameScreenshotScalarFieldEnum]


  export const GameTagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type GameTagScalarFieldEnum = (typeof GameTagScalarFieldEnum)[keyof typeof GameTagScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'UserStatus[]'
   */
  export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


  /**
   * Reference to a field of type 'PrivacyLevel'
   */
  export type EnumPrivacyLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PrivacyLevel'>
    


  /**
   * Reference to a field of type 'PrivacyLevel[]'
   */
  export type ListEnumPrivacyLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PrivacyLevel[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'RewardType'
   */
  export type EnumRewardTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RewardType'>
    


  /**
   * Reference to a field of type 'RewardType[]'
   */
  export type ListEnumRewardTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RewardType[]'>
    


  /**
   * Reference to a field of type 'RewardStatus'
   */
  export type EnumRewardStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RewardStatus'>
    


  /**
   * Reference to a field of type 'RewardStatus[]'
   */
  export type ListEnumRewardStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RewardStatus[]'>
    


  /**
   * Reference to a field of type 'RewardSourceType'
   */
  export type EnumRewardSourceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RewardSourceType'>
    


  /**
   * Reference to a field of type 'RewardSourceType[]'
   */
  export type ListEnumRewardSourceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RewardSourceType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'QuestType'
   */
  export type EnumQuestTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestType'>
    


  /**
   * Reference to a field of type 'QuestType[]'
   */
  export type ListEnumQuestTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestType[]'>
    


  /**
   * Reference to a field of type 'QuestStatus'
   */
  export type EnumQuestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestStatus'>
    


  /**
   * Reference to a field of type 'QuestStatus[]'
   */
  export type ListEnumQuestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestStatus[]'>
    


  /**
   * Reference to a field of type 'CoinType'
   */
  export type EnumCoinTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CoinType'>
    


  /**
   * Reference to a field of type 'CoinType[]'
   */
  export type ListEnumCoinTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CoinType[]'>
    


  /**
   * Reference to a field of type 'CoinSourceType'
   */
  export type EnumCoinSourceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CoinSourceType'>
    


  /**
   * Reference to a field of type 'CoinSourceType[]'
   */
  export type ListEnumCoinSourceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CoinSourceType[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'NotificationPriority'
   */
  export type EnumNotificationPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationPriority'>
    


  /**
   * Reference to a field of type 'NotificationPriority[]'
   */
  export type ListEnumNotificationPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationPriority[]'>
    


  /**
   * Reference to a field of type 'AdminRole'
   */
  export type EnumAdminRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminRole'>
    


  /**
   * Reference to a field of type 'AdminRole[]'
   */
  export type ListEnumAdminRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminRole[]'>
    


  /**
   * Reference to a field of type 'AdminActionType'
   */
  export type EnumAdminActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminActionType'>
    


  /**
   * Reference to a field of type 'AdminActionType[]'
   */
  export type ListEnumAdminActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminActionType[]'>
    


  /**
   * Reference to a field of type 'AdminActionStatus'
   */
  export type EnumAdminActionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminActionStatus'>
    


  /**
   * Reference to a field of type 'AdminActionStatus[]'
   */
  export type ListEnumAdminActionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminActionStatus[]'>
    


  /**
   * Reference to a field of type 'GameOrientation'
   */
  export type EnumGameOrientationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameOrientation'>
    


  /**
   * Reference to a field of type 'GameOrientation[]'
   */
  export type ListEnumGameOrientationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameOrientation[]'>
    


  /**
   * Reference to a field of type 'GameStatus'
   */
  export type EnumGameStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameStatus'>
    


  /**
   * Reference to a field of type 'GameStatus[]'
   */
  export type ListEnumGameStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PreferenceWhereInput = {
    AND?: PreferenceWhereInput | PreferenceWhereInput[]
    OR?: PreferenceWhereInput[]
    NOT?: PreferenceWhereInput | PreferenceWhereInput[]
    accountAddress?: StringFilter<"Preference"> | string
    appIcon?: IntNullableFilter<"Preference"> | number | null
    includeLowScore?: BoolFilter<"Preference"> | boolean
    createdAt?: DateTimeFilter<"Preference"> | Date | string
  }

  export type PreferenceOrderByWithRelationInput = {
    accountAddress?: SortOrder
    appIcon?: SortOrderInput | SortOrder
    includeLowScore?: SortOrder
    createdAt?: SortOrder
  }

  export type PreferenceWhereUniqueInput = Prisma.AtLeast<{
    accountAddress?: string
    AND?: PreferenceWhereInput | PreferenceWhereInput[]
    OR?: PreferenceWhereInput[]
    NOT?: PreferenceWhereInput | PreferenceWhereInput[]
    appIcon?: IntNullableFilter<"Preference"> | number | null
    includeLowScore?: BoolFilter<"Preference"> | boolean
    createdAt?: DateTimeFilter<"Preference"> | Date | string
  }, "accountAddress">

  export type PreferenceOrderByWithAggregationInput = {
    accountAddress?: SortOrder
    appIcon?: SortOrderInput | SortOrder
    includeLowScore?: SortOrder
    createdAt?: SortOrder
    _count?: PreferenceCountOrderByAggregateInput
    _avg?: PreferenceAvgOrderByAggregateInput
    _max?: PreferenceMaxOrderByAggregateInput
    _min?: PreferenceMinOrderByAggregateInput
    _sum?: PreferenceSumOrderByAggregateInput
  }

  export type PreferenceScalarWhereWithAggregatesInput = {
    AND?: PreferenceScalarWhereWithAggregatesInput | PreferenceScalarWhereWithAggregatesInput[]
    OR?: PreferenceScalarWhereWithAggregatesInput[]
    NOT?: PreferenceScalarWhereWithAggregatesInput | PreferenceScalarWhereWithAggregatesInput[]
    accountAddress?: StringWithAggregatesFilter<"Preference"> | string
    appIcon?: IntNullableWithAggregatesFilter<"Preference"> | number | null
    includeLowScore?: BoolWithAggregatesFilter<"Preference"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Preference"> | Date | string
  }

  export type PremiumProfileWhereInput = {
    AND?: PremiumProfileWhereInput | PremiumProfileWhereInput[]
    OR?: PremiumProfileWhereInput[]
    NOT?: PremiumProfileWhereInput | PremiumProfileWhereInput[]
    id?: StringFilter<"PremiumProfile"> | string
    walletAddress?: StringFilter<"PremiumProfile"> | string
    profileId?: StringFilter<"PremiumProfile"> | string
    isActive?: BoolFilter<"PremiumProfile"> | boolean
    linkedAt?: DateTimeFilter<"PremiumProfile"> | Date | string
    deactivatedAt?: DateTimeNullableFilter<"PremiumProfile"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PremiumProfileOrderByWithRelationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    profileId?: SortOrder
    isActive?: SortOrder
    linkedAt?: SortOrder
    deactivatedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PremiumProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    walletAddress?: string
    profileId?: string
    AND?: PremiumProfileWhereInput | PremiumProfileWhereInput[]
    OR?: PremiumProfileWhereInput[]
    NOT?: PremiumProfileWhereInput | PremiumProfileWhereInput[]
    isActive?: BoolFilter<"PremiumProfile"> | boolean
    linkedAt?: DateTimeFilter<"PremiumProfile"> | Date | string
    deactivatedAt?: DateTimeNullableFilter<"PremiumProfile"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "walletAddress" | "profileId">

  export type PremiumProfileOrderByWithAggregationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    profileId?: SortOrder
    isActive?: SortOrder
    linkedAt?: SortOrder
    deactivatedAt?: SortOrderInput | SortOrder
    _count?: PremiumProfileCountOrderByAggregateInput
    _max?: PremiumProfileMaxOrderByAggregateInput
    _min?: PremiumProfileMinOrderByAggregateInput
  }

  export type PremiumProfileScalarWhereWithAggregatesInput = {
    AND?: PremiumProfileScalarWhereWithAggregatesInput | PremiumProfileScalarWhereWithAggregatesInput[]
    OR?: PremiumProfileScalarWhereWithAggregatesInput[]
    NOT?: PremiumProfileScalarWhereWithAggregatesInput | PremiumProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PremiumProfile"> | string
    walletAddress?: StringWithAggregatesFilter<"PremiumProfile"> | string
    profileId?: StringWithAggregatesFilter<"PremiumProfile"> | string
    isActive?: BoolWithAggregatesFilter<"PremiumProfile"> | boolean
    linkedAt?: DateTimeWithAggregatesFilter<"PremiumProfile"> | Date | string
    deactivatedAt?: DateTimeNullableWithAggregatesFilter<"PremiumProfile"> | Date | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    walletAddress?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    displayName?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    location?: StringNullableFilter<"User"> | string | null
    website?: StringNullableFilter<"User"> | string | null
    twitterHandle?: StringNullableFilter<"User"> | string | null
    registrationDate?: DateTimeFilter<"User"> | Date | string
    referrerAddress?: StringNullableFilter<"User"> | string | null
    registrationTxHash?: StringNullableFilter<"User"> | string | null
    premiumUpgradedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    lastActiveAt?: DateTimeFilter<"User"> | Date | string
    totalLogins?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    adminNotes?: AdminNoteListRelationFilter
    featureAccesses?: FeatureAccessListRelationFilter
    premiumProfile?: XOR<PremiumProfileNullableScalarRelationFilter, PremiumProfileWhereInput> | null
    userCoins?: UserCoinListRelationFilter
    userNotifications?: UserNotificationListRelationFilter
    preferences?: XOR<UserPreferencesNullableScalarRelationFilter, UserPreferencesWhereInput> | null
    userQuests?: UserQuestListRelationFilter
    userRewards?: UserRewardListRelationFilter
    userStats?: XOR<UserStatsNullableScalarRelationFilter, UserStatsWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    walletAddress?: SortOrder
    email?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    displayName?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    twitterHandle?: SortOrderInput | SortOrder
    registrationDate?: SortOrder
    referrerAddress?: SortOrderInput | SortOrder
    registrationTxHash?: SortOrderInput | SortOrder
    premiumUpgradedAt?: SortOrderInput | SortOrder
    lastActiveAt?: SortOrder
    totalLogins?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    adminNotes?: AdminNoteOrderByRelationAggregateInput
    featureAccesses?: FeatureAccessOrderByRelationAggregateInput
    premiumProfile?: PremiumProfileOrderByWithRelationInput
    userCoins?: UserCoinOrderByRelationAggregateInput
    userNotifications?: UserNotificationOrderByRelationAggregateInput
    preferences?: UserPreferencesOrderByWithRelationInput
    userQuests?: UserQuestOrderByRelationAggregateInput
    userRewards?: UserRewardOrderByRelationAggregateInput
    userStats?: UserStatsOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    walletAddress?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    displayName?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    location?: StringNullableFilter<"User"> | string | null
    website?: StringNullableFilter<"User"> | string | null
    twitterHandle?: StringNullableFilter<"User"> | string | null
    registrationDate?: DateTimeFilter<"User"> | Date | string
    referrerAddress?: StringNullableFilter<"User"> | string | null
    registrationTxHash?: StringNullableFilter<"User"> | string | null
    premiumUpgradedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    lastActiveAt?: DateTimeFilter<"User"> | Date | string
    totalLogins?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    adminNotes?: AdminNoteListRelationFilter
    featureAccesses?: FeatureAccessListRelationFilter
    premiumProfile?: XOR<PremiumProfileNullableScalarRelationFilter, PremiumProfileWhereInput> | null
    userCoins?: UserCoinListRelationFilter
    userNotifications?: UserNotificationListRelationFilter
    preferences?: XOR<UserPreferencesNullableScalarRelationFilter, UserPreferencesWhereInput> | null
    userQuests?: UserQuestListRelationFilter
    userRewards?: UserRewardListRelationFilter
    userStats?: XOR<UserStatsNullableScalarRelationFilter, UserStatsWhereInput> | null
  }, "walletAddress" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    walletAddress?: SortOrder
    email?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    displayName?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    twitterHandle?: SortOrderInput | SortOrder
    registrationDate?: SortOrder
    referrerAddress?: SortOrderInput | SortOrder
    registrationTxHash?: SortOrderInput | SortOrder
    premiumUpgradedAt?: SortOrderInput | SortOrder
    lastActiveAt?: SortOrder
    totalLogins?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    walletAddress?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    displayName?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    location?: StringNullableWithAggregatesFilter<"User"> | string | null
    website?: StringNullableWithAggregatesFilter<"User"> | string | null
    twitterHandle?: StringNullableWithAggregatesFilter<"User"> | string | null
    registrationDate?: DateTimeWithAggregatesFilter<"User"> | Date | string
    referrerAddress?: StringNullableWithAggregatesFilter<"User"> | string | null
    registrationTxHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    premiumUpgradedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastActiveAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    totalLogins?: IntWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    status?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
  }

  export type UserPreferencesWhereInput = {
    AND?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    OR?: UserPreferencesWhereInput[]
    NOT?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    walletAddress?: StringFilter<"UserPreferences"> | string
    emailNotifications?: BoolFilter<"UserPreferences"> | boolean
    pushNotifications?: BoolFilter<"UserPreferences"> | boolean
    marketingEmails?: BoolFilter<"UserPreferences"> | boolean
    privacyLevel?: EnumPrivacyLevelFilter<"UserPreferences"> | $Enums.PrivacyLevel
    language?: StringFilter<"UserPreferences"> | string
    timezone?: StringFilter<"UserPreferences"> | string
    autoLinkProfile?: BoolFilter<"UserPreferences"> | boolean
    showPremiumBadge?: BoolFilter<"UserPreferences"> | boolean
    createdAt?: DateTimeFilter<"UserPreferences"> | Date | string
    updatedAt?: DateTimeFilter<"UserPreferences"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserPreferencesOrderByWithRelationInput = {
    walletAddress?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    marketingEmails?: SortOrder
    privacyLevel?: SortOrder
    language?: SortOrder
    timezone?: SortOrder
    autoLinkProfile?: SortOrder
    showPremiumBadge?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserPreferencesWhereUniqueInput = Prisma.AtLeast<{
    walletAddress?: string
    AND?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    OR?: UserPreferencesWhereInput[]
    NOT?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    emailNotifications?: BoolFilter<"UserPreferences"> | boolean
    pushNotifications?: BoolFilter<"UserPreferences"> | boolean
    marketingEmails?: BoolFilter<"UserPreferences"> | boolean
    privacyLevel?: EnumPrivacyLevelFilter<"UserPreferences"> | $Enums.PrivacyLevel
    language?: StringFilter<"UserPreferences"> | string
    timezone?: StringFilter<"UserPreferences"> | string
    autoLinkProfile?: BoolFilter<"UserPreferences"> | boolean
    showPremiumBadge?: BoolFilter<"UserPreferences"> | boolean
    createdAt?: DateTimeFilter<"UserPreferences"> | Date | string
    updatedAt?: DateTimeFilter<"UserPreferences"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "walletAddress">

  export type UserPreferencesOrderByWithAggregationInput = {
    walletAddress?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    marketingEmails?: SortOrder
    privacyLevel?: SortOrder
    language?: SortOrder
    timezone?: SortOrder
    autoLinkProfile?: SortOrder
    showPremiumBadge?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserPreferencesCountOrderByAggregateInput
    _max?: UserPreferencesMaxOrderByAggregateInput
    _min?: UserPreferencesMinOrderByAggregateInput
  }

  export type UserPreferencesScalarWhereWithAggregatesInput = {
    AND?: UserPreferencesScalarWhereWithAggregatesInput | UserPreferencesScalarWhereWithAggregatesInput[]
    OR?: UserPreferencesScalarWhereWithAggregatesInput[]
    NOT?: UserPreferencesScalarWhereWithAggregatesInput | UserPreferencesScalarWhereWithAggregatesInput[]
    walletAddress?: StringWithAggregatesFilter<"UserPreferences"> | string
    emailNotifications?: BoolWithAggregatesFilter<"UserPreferences"> | boolean
    pushNotifications?: BoolWithAggregatesFilter<"UserPreferences"> | boolean
    marketingEmails?: BoolWithAggregatesFilter<"UserPreferences"> | boolean
    privacyLevel?: EnumPrivacyLevelWithAggregatesFilter<"UserPreferences"> | $Enums.PrivacyLevel
    language?: StringWithAggregatesFilter<"UserPreferences"> | string
    timezone?: StringWithAggregatesFilter<"UserPreferences"> | string
    autoLinkProfile?: BoolWithAggregatesFilter<"UserPreferences"> | boolean
    showPremiumBadge?: BoolWithAggregatesFilter<"UserPreferences"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserPreferences"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserPreferences"> | Date | string
  }

  export type UserStatsWhereInput = {
    AND?: UserStatsWhereInput | UserStatsWhereInput[]
    OR?: UserStatsWhereInput[]
    NOT?: UserStatsWhereInput | UserStatsWhereInput[]
    walletAddress?: StringFilter<"UserStats"> | string
    totalPosts?: IntFilter<"UserStats"> | number
    totalComments?: IntFilter<"UserStats"> | number
    totalLikes?: IntFilter<"UserStats"> | number
    totalFollowers?: IntFilter<"UserStats"> | number
    totalFollowing?: IntFilter<"UserStats"> | number
    daysAsPremium?: IntFilter<"UserStats"> | number
    referralCount?: IntFilter<"UserStats"> | number
    totalEarnings?: DecimalFilter<"UserStats"> | Decimal | DecimalJsLike | number | string
    questsCompleted?: IntFilter<"UserStats"> | number
    questsInProgress?: IntFilter<"UserStats"> | number
    createdAt?: DateTimeFilter<"UserStats"> | Date | string
    updatedAt?: DateTimeFilter<"UserStats"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserStatsOrderByWithRelationInput = {
    walletAddress?: SortOrder
    totalPosts?: SortOrder
    totalComments?: SortOrder
    totalLikes?: SortOrder
    totalFollowers?: SortOrder
    totalFollowing?: SortOrder
    daysAsPremium?: SortOrder
    referralCount?: SortOrder
    totalEarnings?: SortOrder
    questsCompleted?: SortOrder
    questsInProgress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserStatsWhereUniqueInput = Prisma.AtLeast<{
    walletAddress?: string
    AND?: UserStatsWhereInput | UserStatsWhereInput[]
    OR?: UserStatsWhereInput[]
    NOT?: UserStatsWhereInput | UserStatsWhereInput[]
    totalPosts?: IntFilter<"UserStats"> | number
    totalComments?: IntFilter<"UserStats"> | number
    totalLikes?: IntFilter<"UserStats"> | number
    totalFollowers?: IntFilter<"UserStats"> | number
    totalFollowing?: IntFilter<"UserStats"> | number
    daysAsPremium?: IntFilter<"UserStats"> | number
    referralCount?: IntFilter<"UserStats"> | number
    totalEarnings?: DecimalFilter<"UserStats"> | Decimal | DecimalJsLike | number | string
    questsCompleted?: IntFilter<"UserStats"> | number
    questsInProgress?: IntFilter<"UserStats"> | number
    createdAt?: DateTimeFilter<"UserStats"> | Date | string
    updatedAt?: DateTimeFilter<"UserStats"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "walletAddress">

  export type UserStatsOrderByWithAggregationInput = {
    walletAddress?: SortOrder
    totalPosts?: SortOrder
    totalComments?: SortOrder
    totalLikes?: SortOrder
    totalFollowers?: SortOrder
    totalFollowing?: SortOrder
    daysAsPremium?: SortOrder
    referralCount?: SortOrder
    totalEarnings?: SortOrder
    questsCompleted?: SortOrder
    questsInProgress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserStatsCountOrderByAggregateInput
    _avg?: UserStatsAvgOrderByAggregateInput
    _max?: UserStatsMaxOrderByAggregateInput
    _min?: UserStatsMinOrderByAggregateInput
    _sum?: UserStatsSumOrderByAggregateInput
  }

  export type UserStatsScalarWhereWithAggregatesInput = {
    AND?: UserStatsScalarWhereWithAggregatesInput | UserStatsScalarWhereWithAggregatesInput[]
    OR?: UserStatsScalarWhereWithAggregatesInput[]
    NOT?: UserStatsScalarWhereWithAggregatesInput | UserStatsScalarWhereWithAggregatesInput[]
    walletAddress?: StringWithAggregatesFilter<"UserStats"> | string
    totalPosts?: IntWithAggregatesFilter<"UserStats"> | number
    totalComments?: IntWithAggregatesFilter<"UserStats"> | number
    totalLikes?: IntWithAggregatesFilter<"UserStats"> | number
    totalFollowers?: IntWithAggregatesFilter<"UserStats"> | number
    totalFollowing?: IntWithAggregatesFilter<"UserStats"> | number
    daysAsPremium?: IntWithAggregatesFilter<"UserStats"> | number
    referralCount?: IntWithAggregatesFilter<"UserStats"> | number
    totalEarnings?: DecimalWithAggregatesFilter<"UserStats"> | Decimal | DecimalJsLike | number | string
    questsCompleted?: IntWithAggregatesFilter<"UserStats"> | number
    questsInProgress?: IntWithAggregatesFilter<"UserStats"> | number
    createdAt?: DateTimeWithAggregatesFilter<"UserStats"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserStats"> | Date | string
  }

  export type UserRewardWhereInput = {
    AND?: UserRewardWhereInput | UserRewardWhereInput[]
    OR?: UserRewardWhereInput[]
    NOT?: UserRewardWhereInput | UserRewardWhereInput[]
    id?: StringFilter<"UserReward"> | string
    walletAddress?: StringFilter<"UserReward"> | string
    type?: EnumRewardTypeFilter<"UserReward"> | $Enums.RewardType
    amount?: DecimalFilter<"UserReward"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"UserReward"> | string
    status?: EnumRewardStatusFilter<"UserReward"> | $Enums.RewardStatus
    sourceType?: EnumRewardSourceTypeFilter<"UserReward"> | $Enums.RewardSourceType
    sourceId?: StringNullableFilter<"UserReward"> | string | null
    sourceMetadata?: JsonNullableFilter<"UserReward">
    txHash?: StringNullableFilter<"UserReward"> | string | null
    claimedAt?: DateTimeNullableFilter<"UserReward"> | Date | string | null
    createdAt?: DateTimeFilter<"UserReward"> | Date | string
    updatedAt?: DateTimeFilter<"UserReward"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserRewardOrderByWithRelationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrderInput | SortOrder
    sourceMetadata?: SortOrderInput | SortOrder
    txHash?: SortOrderInput | SortOrder
    claimedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserRewardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserRewardWhereInput | UserRewardWhereInput[]
    OR?: UserRewardWhereInput[]
    NOT?: UserRewardWhereInput | UserRewardWhereInput[]
    walletAddress?: StringFilter<"UserReward"> | string
    type?: EnumRewardTypeFilter<"UserReward"> | $Enums.RewardType
    amount?: DecimalFilter<"UserReward"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"UserReward"> | string
    status?: EnumRewardStatusFilter<"UserReward"> | $Enums.RewardStatus
    sourceType?: EnumRewardSourceTypeFilter<"UserReward"> | $Enums.RewardSourceType
    sourceId?: StringNullableFilter<"UserReward"> | string | null
    sourceMetadata?: JsonNullableFilter<"UserReward">
    txHash?: StringNullableFilter<"UserReward"> | string | null
    claimedAt?: DateTimeNullableFilter<"UserReward"> | Date | string | null
    createdAt?: DateTimeFilter<"UserReward"> | Date | string
    updatedAt?: DateTimeFilter<"UserReward"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserRewardOrderByWithAggregationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrderInput | SortOrder
    sourceMetadata?: SortOrderInput | SortOrder
    txHash?: SortOrderInput | SortOrder
    claimedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserRewardCountOrderByAggregateInput
    _avg?: UserRewardAvgOrderByAggregateInput
    _max?: UserRewardMaxOrderByAggregateInput
    _min?: UserRewardMinOrderByAggregateInput
    _sum?: UserRewardSumOrderByAggregateInput
  }

  export type UserRewardScalarWhereWithAggregatesInput = {
    AND?: UserRewardScalarWhereWithAggregatesInput | UserRewardScalarWhereWithAggregatesInput[]
    OR?: UserRewardScalarWhereWithAggregatesInput[]
    NOT?: UserRewardScalarWhereWithAggregatesInput | UserRewardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserReward"> | string
    walletAddress?: StringWithAggregatesFilter<"UserReward"> | string
    type?: EnumRewardTypeWithAggregatesFilter<"UserReward"> | $Enums.RewardType
    amount?: DecimalWithAggregatesFilter<"UserReward"> | Decimal | DecimalJsLike | number | string
    currency?: StringWithAggregatesFilter<"UserReward"> | string
    status?: EnumRewardStatusWithAggregatesFilter<"UserReward"> | $Enums.RewardStatus
    sourceType?: EnumRewardSourceTypeWithAggregatesFilter<"UserReward"> | $Enums.RewardSourceType
    sourceId?: StringNullableWithAggregatesFilter<"UserReward"> | string | null
    sourceMetadata?: JsonNullableWithAggregatesFilter<"UserReward">
    txHash?: StringNullableWithAggregatesFilter<"UserReward"> | string | null
    claimedAt?: DateTimeNullableWithAggregatesFilter<"UserReward"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserReward"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserReward"> | Date | string
  }

  export type UserQuestWhereInput = {
    AND?: UserQuestWhereInput | UserQuestWhereInput[]
    OR?: UserQuestWhereInput[]
    NOT?: UserQuestWhereInput | UserQuestWhereInput[]
    id?: StringFilter<"UserQuest"> | string
    walletAddress?: StringFilter<"UserQuest"> | string
    questId?: StringFilter<"UserQuest"> | string
    title?: StringFilter<"UserQuest"> | string
    description?: StringFilter<"UserQuest"> | string
    type?: EnumQuestTypeFilter<"UserQuest"> | $Enums.QuestType
    status?: EnumQuestStatusFilter<"UserQuest"> | $Enums.QuestStatus
    currentProgress?: IntFilter<"UserQuest"> | number
    targetProgress?: IntFilter<"UserQuest"> | number
    rewardAmount?: DecimalNullableFilter<"UserQuest"> | Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: StringFilter<"UserQuest"> | string
    completedAt?: DateTimeNullableFilter<"UserQuest"> | Date | string | null
    createdAt?: DateTimeFilter<"UserQuest"> | Date | string
    updatedAt?: DateTimeFilter<"UserQuest"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserQuestOrderByWithRelationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    questId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    currentProgress?: SortOrder
    targetProgress?: SortOrder
    rewardAmount?: SortOrderInput | SortOrder
    rewardCurrency?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserQuestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserQuestWhereInput | UserQuestWhereInput[]
    OR?: UserQuestWhereInput[]
    NOT?: UserQuestWhereInput | UserQuestWhereInput[]
    walletAddress?: StringFilter<"UserQuest"> | string
    questId?: StringFilter<"UserQuest"> | string
    title?: StringFilter<"UserQuest"> | string
    description?: StringFilter<"UserQuest"> | string
    type?: EnumQuestTypeFilter<"UserQuest"> | $Enums.QuestType
    status?: EnumQuestStatusFilter<"UserQuest"> | $Enums.QuestStatus
    currentProgress?: IntFilter<"UserQuest"> | number
    targetProgress?: IntFilter<"UserQuest"> | number
    rewardAmount?: DecimalNullableFilter<"UserQuest"> | Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: StringFilter<"UserQuest"> | string
    completedAt?: DateTimeNullableFilter<"UserQuest"> | Date | string | null
    createdAt?: DateTimeFilter<"UserQuest"> | Date | string
    updatedAt?: DateTimeFilter<"UserQuest"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserQuestOrderByWithAggregationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    questId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    currentProgress?: SortOrder
    targetProgress?: SortOrder
    rewardAmount?: SortOrderInput | SortOrder
    rewardCurrency?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserQuestCountOrderByAggregateInput
    _avg?: UserQuestAvgOrderByAggregateInput
    _max?: UserQuestMaxOrderByAggregateInput
    _min?: UserQuestMinOrderByAggregateInput
    _sum?: UserQuestSumOrderByAggregateInput
  }

  export type UserQuestScalarWhereWithAggregatesInput = {
    AND?: UserQuestScalarWhereWithAggregatesInput | UserQuestScalarWhereWithAggregatesInput[]
    OR?: UserQuestScalarWhereWithAggregatesInput[]
    NOT?: UserQuestScalarWhereWithAggregatesInput | UserQuestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserQuest"> | string
    walletAddress?: StringWithAggregatesFilter<"UserQuest"> | string
    questId?: StringWithAggregatesFilter<"UserQuest"> | string
    title?: StringWithAggregatesFilter<"UserQuest"> | string
    description?: StringWithAggregatesFilter<"UserQuest"> | string
    type?: EnumQuestTypeWithAggregatesFilter<"UserQuest"> | $Enums.QuestType
    status?: EnumQuestStatusWithAggregatesFilter<"UserQuest"> | $Enums.QuestStatus
    currentProgress?: IntWithAggregatesFilter<"UserQuest"> | number
    targetProgress?: IntWithAggregatesFilter<"UserQuest"> | number
    rewardAmount?: DecimalNullableWithAggregatesFilter<"UserQuest"> | Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: StringWithAggregatesFilter<"UserQuest"> | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"UserQuest"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserQuest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserQuest"> | Date | string
  }

  export type UserCoinWhereInput = {
    AND?: UserCoinWhereInput | UserCoinWhereInput[]
    OR?: UserCoinWhereInput[]
    NOT?: UserCoinWhereInput | UserCoinWhereInput[]
    id?: StringFilter<"UserCoin"> | string
    walletAddress?: StringFilter<"UserCoin"> | string
    coinType?: EnumCoinTypeFilter<"UserCoin"> | $Enums.CoinType
    amount?: IntFilter<"UserCoin"> | number
    earnedAt?: DateTimeFilter<"UserCoin"> | Date | string
    sourceType?: EnumCoinSourceTypeFilter<"UserCoin"> | $Enums.CoinSourceType
    sourceId?: StringNullableFilter<"UserCoin"> | string | null
    sourceMetadata?: JsonNullableFilter<"UserCoin">
    createdAt?: DateTimeFilter<"UserCoin"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserCoinOrderByWithRelationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    coinType?: SortOrder
    amount?: SortOrder
    earnedAt?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrderInput | SortOrder
    sourceMetadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserCoinWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserCoinWhereInput | UserCoinWhereInput[]
    OR?: UserCoinWhereInput[]
    NOT?: UserCoinWhereInput | UserCoinWhereInput[]
    walletAddress?: StringFilter<"UserCoin"> | string
    coinType?: EnumCoinTypeFilter<"UserCoin"> | $Enums.CoinType
    amount?: IntFilter<"UserCoin"> | number
    earnedAt?: DateTimeFilter<"UserCoin"> | Date | string
    sourceType?: EnumCoinSourceTypeFilter<"UserCoin"> | $Enums.CoinSourceType
    sourceId?: StringNullableFilter<"UserCoin"> | string | null
    sourceMetadata?: JsonNullableFilter<"UserCoin">
    createdAt?: DateTimeFilter<"UserCoin"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserCoinOrderByWithAggregationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    coinType?: SortOrder
    amount?: SortOrder
    earnedAt?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrderInput | SortOrder
    sourceMetadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserCoinCountOrderByAggregateInput
    _avg?: UserCoinAvgOrderByAggregateInput
    _max?: UserCoinMaxOrderByAggregateInput
    _min?: UserCoinMinOrderByAggregateInput
    _sum?: UserCoinSumOrderByAggregateInput
  }

  export type UserCoinScalarWhereWithAggregatesInput = {
    AND?: UserCoinScalarWhereWithAggregatesInput | UserCoinScalarWhereWithAggregatesInput[]
    OR?: UserCoinScalarWhereWithAggregatesInput[]
    NOT?: UserCoinScalarWhereWithAggregatesInput | UserCoinScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserCoin"> | string
    walletAddress?: StringWithAggregatesFilter<"UserCoin"> | string
    coinType?: EnumCoinTypeWithAggregatesFilter<"UserCoin"> | $Enums.CoinType
    amount?: IntWithAggregatesFilter<"UserCoin"> | number
    earnedAt?: DateTimeWithAggregatesFilter<"UserCoin"> | Date | string
    sourceType?: EnumCoinSourceTypeWithAggregatesFilter<"UserCoin"> | $Enums.CoinSourceType
    sourceId?: StringNullableWithAggregatesFilter<"UserCoin"> | string | null
    sourceMetadata?: JsonNullableWithAggregatesFilter<"UserCoin">
    createdAt?: DateTimeWithAggregatesFilter<"UserCoin"> | Date | string
  }

  export type UserNotificationWhereInput = {
    AND?: UserNotificationWhereInput | UserNotificationWhereInput[]
    OR?: UserNotificationWhereInput[]
    NOT?: UserNotificationWhereInput | UserNotificationWhereInput[]
    id?: StringFilter<"UserNotification"> | string
    walletAddress?: StringFilter<"UserNotification"> | string
    type?: EnumNotificationTypeFilter<"UserNotification"> | $Enums.NotificationType
    title?: StringFilter<"UserNotification"> | string
    message?: StringFilter<"UserNotification"> | string
    priority?: EnumNotificationPriorityFilter<"UserNotification"> | $Enums.NotificationPriority
    isRead?: BoolFilter<"UserNotification"> | boolean
    readAt?: DateTimeNullableFilter<"UserNotification"> | Date | string | null
    actionUrl?: StringNullableFilter<"UserNotification"> | string | null
    actionMetadata?: JsonNullableFilter<"UserNotification">
    createdAt?: DateTimeFilter<"UserNotification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserNotificationOrderByWithRelationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    actionUrl?: SortOrderInput | SortOrder
    actionMetadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserNotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserNotificationWhereInput | UserNotificationWhereInput[]
    OR?: UserNotificationWhereInput[]
    NOT?: UserNotificationWhereInput | UserNotificationWhereInput[]
    walletAddress?: StringFilter<"UserNotification"> | string
    type?: EnumNotificationTypeFilter<"UserNotification"> | $Enums.NotificationType
    title?: StringFilter<"UserNotification"> | string
    message?: StringFilter<"UserNotification"> | string
    priority?: EnumNotificationPriorityFilter<"UserNotification"> | $Enums.NotificationPriority
    isRead?: BoolFilter<"UserNotification"> | boolean
    readAt?: DateTimeNullableFilter<"UserNotification"> | Date | string | null
    actionUrl?: StringNullableFilter<"UserNotification"> | string | null
    actionMetadata?: JsonNullableFilter<"UserNotification">
    createdAt?: DateTimeFilter<"UserNotification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserNotificationOrderByWithAggregationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    actionUrl?: SortOrderInput | SortOrder
    actionMetadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserNotificationCountOrderByAggregateInput
    _max?: UserNotificationMaxOrderByAggregateInput
    _min?: UserNotificationMinOrderByAggregateInput
  }

  export type UserNotificationScalarWhereWithAggregatesInput = {
    AND?: UserNotificationScalarWhereWithAggregatesInput | UserNotificationScalarWhereWithAggregatesInput[]
    OR?: UserNotificationScalarWhereWithAggregatesInput[]
    NOT?: UserNotificationScalarWhereWithAggregatesInput | UserNotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserNotification"> | string
    walletAddress?: StringWithAggregatesFilter<"UserNotification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"UserNotification"> | $Enums.NotificationType
    title?: StringWithAggregatesFilter<"UserNotification"> | string
    message?: StringWithAggregatesFilter<"UserNotification"> | string
    priority?: EnumNotificationPriorityWithAggregatesFilter<"UserNotification"> | $Enums.NotificationPriority
    isRead?: BoolWithAggregatesFilter<"UserNotification"> | boolean
    readAt?: DateTimeNullableWithAggregatesFilter<"UserNotification"> | Date | string | null
    actionUrl?: StringNullableWithAggregatesFilter<"UserNotification"> | string | null
    actionMetadata?: JsonNullableWithAggregatesFilter<"UserNotification">
    createdAt?: DateTimeWithAggregatesFilter<"UserNotification"> | Date | string
  }

  export type AdminUserWhereInput = {
    AND?: AdminUserWhereInput | AdminUserWhereInput[]
    OR?: AdminUserWhereInput[]
    NOT?: AdminUserWhereInput | AdminUserWhereInput[]
    id?: StringFilter<"AdminUser"> | string
    walletAddress?: StringFilter<"AdminUser"> | string
    email?: StringFilter<"AdminUser"> | string
    username?: StringFilter<"AdminUser"> | string
    displayName?: StringNullableFilter<"AdminUser"> | string | null
    role?: EnumAdminRoleFilter<"AdminUser"> | $Enums.AdminRole
    isActive?: BoolFilter<"AdminUser"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"AdminUser"> | Date | string | null
    createdAt?: DateTimeFilter<"AdminUser"> | Date | string
    updatedAt?: DateTimeFilter<"AdminUser"> | Date | string
    adminActions?: AdminActionListRelationFilter
    adminNotes?: AdminNoteListRelationFilter
    permissions?: AdminPermissionListRelationFilter
  }

  export type AdminUserOrderByWithRelationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    email?: SortOrder
    username?: SortOrder
    displayName?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminActions?: AdminActionOrderByRelationAggregateInput
    adminNotes?: AdminNoteOrderByRelationAggregateInput
    permissions?: AdminPermissionOrderByRelationAggregateInput
  }

  export type AdminUserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    walletAddress?: string
    email?: string
    username?: string
    AND?: AdminUserWhereInput | AdminUserWhereInput[]
    OR?: AdminUserWhereInput[]
    NOT?: AdminUserWhereInput | AdminUserWhereInput[]
    displayName?: StringNullableFilter<"AdminUser"> | string | null
    role?: EnumAdminRoleFilter<"AdminUser"> | $Enums.AdminRole
    isActive?: BoolFilter<"AdminUser"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"AdminUser"> | Date | string | null
    createdAt?: DateTimeFilter<"AdminUser"> | Date | string
    updatedAt?: DateTimeFilter<"AdminUser"> | Date | string
    adminActions?: AdminActionListRelationFilter
    adminNotes?: AdminNoteListRelationFilter
    permissions?: AdminPermissionListRelationFilter
  }, "id" | "walletAddress" | "email" | "username">

  export type AdminUserOrderByWithAggregationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    email?: SortOrder
    username?: SortOrder
    displayName?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AdminUserCountOrderByAggregateInput
    _max?: AdminUserMaxOrderByAggregateInput
    _min?: AdminUserMinOrderByAggregateInput
  }

  export type AdminUserScalarWhereWithAggregatesInput = {
    AND?: AdminUserScalarWhereWithAggregatesInput | AdminUserScalarWhereWithAggregatesInput[]
    OR?: AdminUserScalarWhereWithAggregatesInput[]
    NOT?: AdminUserScalarWhereWithAggregatesInput | AdminUserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdminUser"> | string
    walletAddress?: StringWithAggregatesFilter<"AdminUser"> | string
    email?: StringWithAggregatesFilter<"AdminUser"> | string
    username?: StringWithAggregatesFilter<"AdminUser"> | string
    displayName?: StringNullableWithAggregatesFilter<"AdminUser"> | string | null
    role?: EnumAdminRoleWithAggregatesFilter<"AdminUser"> | $Enums.AdminRole
    isActive?: BoolWithAggregatesFilter<"AdminUser"> | boolean
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"AdminUser"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AdminUser"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AdminUser"> | Date | string
  }

  export type AdminPermissionWhereInput = {
    AND?: AdminPermissionWhereInput | AdminPermissionWhereInput[]
    OR?: AdminPermissionWhereInput[]
    NOT?: AdminPermissionWhereInput | AdminPermissionWhereInput[]
    id?: StringFilter<"AdminPermission"> | string
    adminUserId?: StringFilter<"AdminPermission"> | string
    permission?: StringFilter<"AdminPermission"> | string
    grantedAt?: DateTimeFilter<"AdminPermission"> | Date | string
    grantedBy?: StringFilter<"AdminPermission"> | string
    adminUser?: XOR<AdminUserScalarRelationFilter, AdminUserWhereInput>
  }

  export type AdminPermissionOrderByWithRelationInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    permission?: SortOrder
    grantedAt?: SortOrder
    grantedBy?: SortOrder
    adminUser?: AdminUserOrderByWithRelationInput
  }

  export type AdminPermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdminPermissionWhereInput | AdminPermissionWhereInput[]
    OR?: AdminPermissionWhereInput[]
    NOT?: AdminPermissionWhereInput | AdminPermissionWhereInput[]
    adminUserId?: StringFilter<"AdminPermission"> | string
    permission?: StringFilter<"AdminPermission"> | string
    grantedAt?: DateTimeFilter<"AdminPermission"> | Date | string
    grantedBy?: StringFilter<"AdminPermission"> | string
    adminUser?: XOR<AdminUserScalarRelationFilter, AdminUserWhereInput>
  }, "id">

  export type AdminPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    permission?: SortOrder
    grantedAt?: SortOrder
    grantedBy?: SortOrder
    _count?: AdminPermissionCountOrderByAggregateInput
    _max?: AdminPermissionMaxOrderByAggregateInput
    _min?: AdminPermissionMinOrderByAggregateInput
  }

  export type AdminPermissionScalarWhereWithAggregatesInput = {
    AND?: AdminPermissionScalarWhereWithAggregatesInput | AdminPermissionScalarWhereWithAggregatesInput[]
    OR?: AdminPermissionScalarWhereWithAggregatesInput[]
    NOT?: AdminPermissionScalarWhereWithAggregatesInput | AdminPermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdminPermission"> | string
    adminUserId?: StringWithAggregatesFilter<"AdminPermission"> | string
    permission?: StringWithAggregatesFilter<"AdminPermission"> | string
    grantedAt?: DateTimeWithAggregatesFilter<"AdminPermission"> | Date | string
    grantedBy?: StringWithAggregatesFilter<"AdminPermission"> | string
  }

  export type AdminActionWhereInput = {
    AND?: AdminActionWhereInput | AdminActionWhereInput[]
    OR?: AdminActionWhereInput[]
    NOT?: AdminActionWhereInput | AdminActionWhereInput[]
    id?: StringFilter<"AdminAction"> | string
    adminUserId?: StringFilter<"AdminAction"> | string
    actionType?: EnumAdminActionTypeFilter<"AdminAction"> | $Enums.AdminActionType
    targetWallet?: StringFilter<"AdminAction"> | string
    targetProfileId?: StringNullableFilter<"AdminAction"> | string | null
    reason?: StringFilter<"AdminAction"> | string
    metadata?: JsonNullableFilter<"AdminAction">
    status?: EnumAdminActionStatusFilter<"AdminAction"> | $Enums.AdminActionStatus
    result?: JsonNullableFilter<"AdminAction">
    errorMessage?: StringNullableFilter<"AdminAction"> | string | null
    createdAt?: DateTimeFilter<"AdminAction"> | Date | string
    completedAt?: DateTimeNullableFilter<"AdminAction"> | Date | string | null
    adminUser?: XOR<AdminUserScalarRelationFilter, AdminUserWhereInput>
  }

  export type AdminActionOrderByWithRelationInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    actionType?: SortOrder
    targetWallet?: SortOrder
    targetProfileId?: SortOrderInput | SortOrder
    reason?: SortOrder
    metadata?: SortOrderInput | SortOrder
    status?: SortOrder
    result?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    adminUser?: AdminUserOrderByWithRelationInput
  }

  export type AdminActionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdminActionWhereInput | AdminActionWhereInput[]
    OR?: AdminActionWhereInput[]
    NOT?: AdminActionWhereInput | AdminActionWhereInput[]
    adminUserId?: StringFilter<"AdminAction"> | string
    actionType?: EnumAdminActionTypeFilter<"AdminAction"> | $Enums.AdminActionType
    targetWallet?: StringFilter<"AdminAction"> | string
    targetProfileId?: StringNullableFilter<"AdminAction"> | string | null
    reason?: StringFilter<"AdminAction"> | string
    metadata?: JsonNullableFilter<"AdminAction">
    status?: EnumAdminActionStatusFilter<"AdminAction"> | $Enums.AdminActionStatus
    result?: JsonNullableFilter<"AdminAction">
    errorMessage?: StringNullableFilter<"AdminAction"> | string | null
    createdAt?: DateTimeFilter<"AdminAction"> | Date | string
    completedAt?: DateTimeNullableFilter<"AdminAction"> | Date | string | null
    adminUser?: XOR<AdminUserScalarRelationFilter, AdminUserWhereInput>
  }, "id">

  export type AdminActionOrderByWithAggregationInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    actionType?: SortOrder
    targetWallet?: SortOrder
    targetProfileId?: SortOrderInput | SortOrder
    reason?: SortOrder
    metadata?: SortOrderInput | SortOrder
    status?: SortOrder
    result?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: AdminActionCountOrderByAggregateInput
    _max?: AdminActionMaxOrderByAggregateInput
    _min?: AdminActionMinOrderByAggregateInput
  }

  export type AdminActionScalarWhereWithAggregatesInput = {
    AND?: AdminActionScalarWhereWithAggregatesInput | AdminActionScalarWhereWithAggregatesInput[]
    OR?: AdminActionScalarWhereWithAggregatesInput[]
    NOT?: AdminActionScalarWhereWithAggregatesInput | AdminActionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdminAction"> | string
    adminUserId?: StringWithAggregatesFilter<"AdminAction"> | string
    actionType?: EnumAdminActionTypeWithAggregatesFilter<"AdminAction"> | $Enums.AdminActionType
    targetWallet?: StringWithAggregatesFilter<"AdminAction"> | string
    targetProfileId?: StringNullableWithAggregatesFilter<"AdminAction"> | string | null
    reason?: StringWithAggregatesFilter<"AdminAction"> | string
    metadata?: JsonNullableWithAggregatesFilter<"AdminAction">
    status?: EnumAdminActionStatusWithAggregatesFilter<"AdminAction"> | $Enums.AdminActionStatus
    result?: JsonNullableWithAggregatesFilter<"AdminAction">
    errorMessage?: StringNullableWithAggregatesFilter<"AdminAction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AdminAction"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"AdminAction"> | Date | string | null
  }

  export type AdminNoteWhereInput = {
    AND?: AdminNoteWhereInput | AdminNoteWhereInput[]
    OR?: AdminNoteWhereInput[]
    NOT?: AdminNoteWhereInput | AdminNoteWhereInput[]
    id?: StringFilter<"AdminNote"> | string
    adminUserId?: StringFilter<"AdminNote"> | string
    walletAddress?: StringFilter<"AdminNote"> | string
    note?: StringFilter<"AdminNote"> | string
    isPrivate?: BoolFilter<"AdminNote"> | boolean
    createdAt?: DateTimeFilter<"AdminNote"> | Date | string
    updatedAt?: DateTimeFilter<"AdminNote"> | Date | string
    adminUser?: XOR<AdminUserScalarRelationFilter, AdminUserWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AdminNoteOrderByWithRelationInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    walletAddress?: SortOrder
    note?: SortOrder
    isPrivate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminUser?: AdminUserOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type AdminNoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdminNoteWhereInput | AdminNoteWhereInput[]
    OR?: AdminNoteWhereInput[]
    NOT?: AdminNoteWhereInput | AdminNoteWhereInput[]
    adminUserId?: StringFilter<"AdminNote"> | string
    walletAddress?: StringFilter<"AdminNote"> | string
    note?: StringFilter<"AdminNote"> | string
    isPrivate?: BoolFilter<"AdminNote"> | boolean
    createdAt?: DateTimeFilter<"AdminNote"> | Date | string
    updatedAt?: DateTimeFilter<"AdminNote"> | Date | string
    adminUser?: XOR<AdminUserScalarRelationFilter, AdminUserWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AdminNoteOrderByWithAggregationInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    walletAddress?: SortOrder
    note?: SortOrder
    isPrivate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AdminNoteCountOrderByAggregateInput
    _max?: AdminNoteMaxOrderByAggregateInput
    _min?: AdminNoteMinOrderByAggregateInput
  }

  export type AdminNoteScalarWhereWithAggregatesInput = {
    AND?: AdminNoteScalarWhereWithAggregatesInput | AdminNoteScalarWhereWithAggregatesInput[]
    OR?: AdminNoteScalarWhereWithAggregatesInput[]
    NOT?: AdminNoteScalarWhereWithAggregatesInput | AdminNoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdminNote"> | string
    adminUserId?: StringWithAggregatesFilter<"AdminNote"> | string
    walletAddress?: StringWithAggregatesFilter<"AdminNote"> | string
    note?: StringWithAggregatesFilter<"AdminNote"> | string
    isPrivate?: BoolWithAggregatesFilter<"AdminNote"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"AdminNote"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AdminNote"> | Date | string
  }

  export type FeatureWhereInput = {
    AND?: FeatureWhereInput | FeatureWhereInput[]
    OR?: FeatureWhereInput[]
    NOT?: FeatureWhereInput | FeatureWhereInput[]
    id?: StringFilter<"Feature"> | string
    featureId?: StringFilter<"Feature"> | string
    name?: StringFilter<"Feature"> | string
    description?: StringFilter<"Feature"> | string
    category?: StringFilter<"Feature"> | string
    standardAccess?: BoolFilter<"Feature"> | boolean
    premiumAccess?: BoolFilter<"Feature"> | boolean
    adminOverride?: BoolFilter<"Feature"> | boolean
    isActive?: BoolFilter<"Feature"> | boolean
    createdAt?: DateTimeFilter<"Feature"> | Date | string
    updatedAt?: DateTimeFilter<"Feature"> | Date | string
    featureAccesses?: FeatureAccessListRelationFilter
  }

  export type FeatureOrderByWithRelationInput = {
    id?: SortOrder
    featureId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    standardAccess?: SortOrder
    premiumAccess?: SortOrder
    adminOverride?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    featureAccesses?: FeatureAccessOrderByRelationAggregateInput
  }

  export type FeatureWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    featureId?: string
    AND?: FeatureWhereInput | FeatureWhereInput[]
    OR?: FeatureWhereInput[]
    NOT?: FeatureWhereInput | FeatureWhereInput[]
    name?: StringFilter<"Feature"> | string
    description?: StringFilter<"Feature"> | string
    category?: StringFilter<"Feature"> | string
    standardAccess?: BoolFilter<"Feature"> | boolean
    premiumAccess?: BoolFilter<"Feature"> | boolean
    adminOverride?: BoolFilter<"Feature"> | boolean
    isActive?: BoolFilter<"Feature"> | boolean
    createdAt?: DateTimeFilter<"Feature"> | Date | string
    updatedAt?: DateTimeFilter<"Feature"> | Date | string
    featureAccesses?: FeatureAccessListRelationFilter
  }, "id" | "featureId">

  export type FeatureOrderByWithAggregationInput = {
    id?: SortOrder
    featureId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    standardAccess?: SortOrder
    premiumAccess?: SortOrder
    adminOverride?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FeatureCountOrderByAggregateInput
    _max?: FeatureMaxOrderByAggregateInput
    _min?: FeatureMinOrderByAggregateInput
  }

  export type FeatureScalarWhereWithAggregatesInput = {
    AND?: FeatureScalarWhereWithAggregatesInput | FeatureScalarWhereWithAggregatesInput[]
    OR?: FeatureScalarWhereWithAggregatesInput[]
    NOT?: FeatureScalarWhereWithAggregatesInput | FeatureScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Feature"> | string
    featureId?: StringWithAggregatesFilter<"Feature"> | string
    name?: StringWithAggregatesFilter<"Feature"> | string
    description?: StringWithAggregatesFilter<"Feature"> | string
    category?: StringWithAggregatesFilter<"Feature"> | string
    standardAccess?: BoolWithAggregatesFilter<"Feature"> | boolean
    premiumAccess?: BoolWithAggregatesFilter<"Feature"> | boolean
    adminOverride?: BoolWithAggregatesFilter<"Feature"> | boolean
    isActive?: BoolWithAggregatesFilter<"Feature"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Feature"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Feature"> | Date | string
  }

  export type FeatureAccessWhereInput = {
    AND?: FeatureAccessWhereInput | FeatureAccessWhereInput[]
    OR?: FeatureAccessWhereInput[]
    NOT?: FeatureAccessWhereInput | FeatureAccessWhereInput[]
    id?: StringFilter<"FeatureAccess"> | string
    featureId?: StringFilter<"FeatureAccess"> | string
    walletAddress?: StringFilter<"FeatureAccess"> | string
    grantedBy?: StringNullableFilter<"FeatureAccess"> | string | null
    grantedAt?: DateTimeFilter<"FeatureAccess"> | Date | string
    expiresAt?: DateTimeNullableFilter<"FeatureAccess"> | Date | string | null
    isActive?: BoolFilter<"FeatureAccess"> | boolean
    feature?: XOR<FeatureScalarRelationFilter, FeatureWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FeatureAccessOrderByWithRelationInput = {
    id?: SortOrder
    featureId?: SortOrder
    walletAddress?: SortOrder
    grantedBy?: SortOrderInput | SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    feature?: FeatureOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type FeatureAccessWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FeatureAccessWhereInput | FeatureAccessWhereInput[]
    OR?: FeatureAccessWhereInput[]
    NOT?: FeatureAccessWhereInput | FeatureAccessWhereInput[]
    featureId?: StringFilter<"FeatureAccess"> | string
    walletAddress?: StringFilter<"FeatureAccess"> | string
    grantedBy?: StringNullableFilter<"FeatureAccess"> | string | null
    grantedAt?: DateTimeFilter<"FeatureAccess"> | Date | string
    expiresAt?: DateTimeNullableFilter<"FeatureAccess"> | Date | string | null
    isActive?: BoolFilter<"FeatureAccess"> | boolean
    feature?: XOR<FeatureScalarRelationFilter, FeatureWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type FeatureAccessOrderByWithAggregationInput = {
    id?: SortOrder
    featureId?: SortOrder
    walletAddress?: SortOrder
    grantedBy?: SortOrderInput | SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    _count?: FeatureAccessCountOrderByAggregateInput
    _max?: FeatureAccessMaxOrderByAggregateInput
    _min?: FeatureAccessMinOrderByAggregateInput
  }

  export type FeatureAccessScalarWhereWithAggregatesInput = {
    AND?: FeatureAccessScalarWhereWithAggregatesInput | FeatureAccessScalarWhereWithAggregatesInput[]
    OR?: FeatureAccessScalarWhereWithAggregatesInput[]
    NOT?: FeatureAccessScalarWhereWithAggregatesInput | FeatureAccessScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FeatureAccess"> | string
    featureId?: StringWithAggregatesFilter<"FeatureAccess"> | string
    walletAddress?: StringWithAggregatesFilter<"FeatureAccess"> | string
    grantedBy?: StringNullableWithAggregatesFilter<"FeatureAccess"> | string | null
    grantedAt?: DateTimeWithAggregatesFilter<"FeatureAccess"> | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"FeatureAccess"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"FeatureAccess"> | boolean
  }

  export type GameWhereInput = {
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    id?: StringFilter<"Game"> | string
    title?: StringFilter<"Game"> | string
    slug?: StringFilter<"Game"> | string
    description?: StringFilter<"Game"> | string
    instructions?: StringNullableFilter<"Game"> | string | null
    packageUrl?: StringFilter<"Game"> | string
    entryFilePath?: StringFilter<"Game"> | string
    iconUrl?: StringFilter<"Game"> | string
    coverImageUrl?: StringFilter<"Game"> | string
    width?: IntFilter<"Game"> | number
    height?: IntFilter<"Game"> | number
    orientation?: EnumGameOrientationFilter<"Game"> | $Enums.GameOrientation
    developerName?: StringNullableFilter<"Game"> | string | null
    version?: StringNullableFilter<"Game"> | string | null
    status?: EnumGameStatusFilter<"Game"> | $Enums.GameStatus
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    GameScreenshot?: GameScreenshotListRelationFilter
    categories?: GameCategoryListRelationFilter
    GameTag?: GameTagListRelationFilter
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    instructions?: SortOrderInput | SortOrder
    packageUrl?: SortOrder
    entryFilePath?: SortOrder
    iconUrl?: SortOrder
    coverImageUrl?: SortOrder
    width?: SortOrder
    height?: SortOrder
    orientation?: SortOrder
    developerName?: SortOrderInput | SortOrder
    version?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    GameScreenshot?: GameScreenshotOrderByRelationAggregateInput
    categories?: GameCategoryOrderByRelationAggregateInput
    GameTag?: GameTagOrderByRelationAggregateInput
  }

  export type GameWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    title?: StringFilter<"Game"> | string
    description?: StringFilter<"Game"> | string
    instructions?: StringNullableFilter<"Game"> | string | null
    packageUrl?: StringFilter<"Game"> | string
    entryFilePath?: StringFilter<"Game"> | string
    iconUrl?: StringFilter<"Game"> | string
    coverImageUrl?: StringFilter<"Game"> | string
    width?: IntFilter<"Game"> | number
    height?: IntFilter<"Game"> | number
    orientation?: EnumGameOrientationFilter<"Game"> | $Enums.GameOrientation
    developerName?: StringNullableFilter<"Game"> | string | null
    version?: StringNullableFilter<"Game"> | string | null
    status?: EnumGameStatusFilter<"Game"> | $Enums.GameStatus
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    GameScreenshot?: GameScreenshotListRelationFilter
    categories?: GameCategoryListRelationFilter
    GameTag?: GameTagListRelationFilter
  }, "id" | "slug">

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    instructions?: SortOrderInput | SortOrder
    packageUrl?: SortOrder
    entryFilePath?: SortOrder
    iconUrl?: SortOrder
    coverImageUrl?: SortOrder
    width?: SortOrder
    height?: SortOrder
    orientation?: SortOrder
    developerName?: SortOrderInput | SortOrder
    version?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    OR?: GameScalarWhereWithAggregatesInput[]
    NOT?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Game"> | string
    title?: StringWithAggregatesFilter<"Game"> | string
    slug?: StringWithAggregatesFilter<"Game"> | string
    description?: StringWithAggregatesFilter<"Game"> | string
    instructions?: StringNullableWithAggregatesFilter<"Game"> | string | null
    packageUrl?: StringWithAggregatesFilter<"Game"> | string
    entryFilePath?: StringWithAggregatesFilter<"Game"> | string
    iconUrl?: StringWithAggregatesFilter<"Game"> | string
    coverImageUrl?: StringWithAggregatesFilter<"Game"> | string
    width?: IntWithAggregatesFilter<"Game"> | number
    height?: IntWithAggregatesFilter<"Game"> | number
    orientation?: EnumGameOrientationWithAggregatesFilter<"Game"> | $Enums.GameOrientation
    developerName?: StringNullableWithAggregatesFilter<"Game"> | string | null
    version?: StringNullableWithAggregatesFilter<"Game"> | string | null
    status?: EnumGameStatusWithAggregatesFilter<"Game"> | $Enums.GameStatus
    createdAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
  }

  export type GameCategoryWhereInput = {
    AND?: GameCategoryWhereInput | GameCategoryWhereInput[]
    OR?: GameCategoryWhereInput[]
    NOT?: GameCategoryWhereInput | GameCategoryWhereInput[]
    id?: StringFilter<"GameCategory"> | string
    name?: StringFilter<"GameCategory"> | string
    createdAt?: DateTimeFilter<"GameCategory"> | Date | string
    updatedAt?: DateTimeFilter<"GameCategory"> | Date | string
    color?: StringNullableFilter<"GameCategory"> | string | null
    description?: StringNullableFilter<"GameCategory"> | string | null
    icon?: StringNullableFilter<"GameCategory"> | string | null
    metaDescription?: StringNullableFilter<"GameCategory"> | string | null
    slug?: StringNullableFilter<"GameCategory"> | string | null
    games?: GameListRelationFilter
  }

  export type GameCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    color?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    metaDescription?: SortOrderInput | SortOrder
    slug?: SortOrderInput | SortOrder
    games?: GameOrderByRelationAggregateInput
  }

  export type GameCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    slug?: string
    AND?: GameCategoryWhereInput | GameCategoryWhereInput[]
    OR?: GameCategoryWhereInput[]
    NOT?: GameCategoryWhereInput | GameCategoryWhereInput[]
    createdAt?: DateTimeFilter<"GameCategory"> | Date | string
    updatedAt?: DateTimeFilter<"GameCategory"> | Date | string
    color?: StringNullableFilter<"GameCategory"> | string | null
    description?: StringNullableFilter<"GameCategory"> | string | null
    icon?: StringNullableFilter<"GameCategory"> | string | null
    metaDescription?: StringNullableFilter<"GameCategory"> | string | null
    games?: GameListRelationFilter
  }, "id" | "name" | "slug">

  export type GameCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    color?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    metaDescription?: SortOrderInput | SortOrder
    slug?: SortOrderInput | SortOrder
    _count?: GameCategoryCountOrderByAggregateInput
    _max?: GameCategoryMaxOrderByAggregateInput
    _min?: GameCategoryMinOrderByAggregateInput
  }

  export type GameCategoryScalarWhereWithAggregatesInput = {
    AND?: GameCategoryScalarWhereWithAggregatesInput | GameCategoryScalarWhereWithAggregatesInput[]
    OR?: GameCategoryScalarWhereWithAggregatesInput[]
    NOT?: GameCategoryScalarWhereWithAggregatesInput | GameCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameCategory"> | string
    name?: StringWithAggregatesFilter<"GameCategory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GameCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GameCategory"> | Date | string
    color?: StringNullableWithAggregatesFilter<"GameCategory"> | string | null
    description?: StringNullableWithAggregatesFilter<"GameCategory"> | string | null
    icon?: StringNullableWithAggregatesFilter<"GameCategory"> | string | null
    metaDescription?: StringNullableWithAggregatesFilter<"GameCategory"> | string | null
    slug?: StringNullableWithAggregatesFilter<"GameCategory"> | string | null
  }

  export type GameScreenshotWhereInput = {
    AND?: GameScreenshotWhereInput | GameScreenshotWhereInput[]
    OR?: GameScreenshotWhereInput[]
    NOT?: GameScreenshotWhereInput | GameScreenshotWhereInput[]
    id?: StringFilter<"GameScreenshot"> | string
    gameId?: StringFilter<"GameScreenshot"> | string
    imageUrl?: StringFilter<"GameScreenshot"> | string
    order?: IntFilter<"GameScreenshot"> | number
    createdAt?: DateTimeFilter<"GameScreenshot"> | Date | string
    Game?: XOR<GameScalarRelationFilter, GameWhereInput>
  }

  export type GameScreenshotOrderByWithRelationInput = {
    id?: SortOrder
    gameId?: SortOrder
    imageUrl?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    Game?: GameOrderByWithRelationInput
  }

  export type GameScreenshotWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GameScreenshotWhereInput | GameScreenshotWhereInput[]
    OR?: GameScreenshotWhereInput[]
    NOT?: GameScreenshotWhereInput | GameScreenshotWhereInput[]
    gameId?: StringFilter<"GameScreenshot"> | string
    imageUrl?: StringFilter<"GameScreenshot"> | string
    order?: IntFilter<"GameScreenshot"> | number
    createdAt?: DateTimeFilter<"GameScreenshot"> | Date | string
    Game?: XOR<GameScalarRelationFilter, GameWhereInput>
  }, "id">

  export type GameScreenshotOrderByWithAggregationInput = {
    id?: SortOrder
    gameId?: SortOrder
    imageUrl?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    _count?: GameScreenshotCountOrderByAggregateInput
    _avg?: GameScreenshotAvgOrderByAggregateInput
    _max?: GameScreenshotMaxOrderByAggregateInput
    _min?: GameScreenshotMinOrderByAggregateInput
    _sum?: GameScreenshotSumOrderByAggregateInput
  }

  export type GameScreenshotScalarWhereWithAggregatesInput = {
    AND?: GameScreenshotScalarWhereWithAggregatesInput | GameScreenshotScalarWhereWithAggregatesInput[]
    OR?: GameScreenshotScalarWhereWithAggregatesInput[]
    NOT?: GameScreenshotScalarWhereWithAggregatesInput | GameScreenshotScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameScreenshot"> | string
    gameId?: StringWithAggregatesFilter<"GameScreenshot"> | string
    imageUrl?: StringWithAggregatesFilter<"GameScreenshot"> | string
    order?: IntWithAggregatesFilter<"GameScreenshot"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GameScreenshot"> | Date | string
  }

  export type GameTagWhereInput = {
    AND?: GameTagWhereInput | GameTagWhereInput[]
    OR?: GameTagWhereInput[]
    NOT?: GameTagWhereInput | GameTagWhereInput[]
    id?: StringFilter<"GameTag"> | string
    name?: StringFilter<"GameTag"> | string
    createdAt?: DateTimeFilter<"GameTag"> | Date | string
    Game?: GameListRelationFilter
  }

  export type GameTagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    Game?: GameOrderByRelationAggregateInput
  }

  export type GameTagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: GameTagWhereInput | GameTagWhereInput[]
    OR?: GameTagWhereInput[]
    NOT?: GameTagWhereInput | GameTagWhereInput[]
    createdAt?: DateTimeFilter<"GameTag"> | Date | string
    Game?: GameListRelationFilter
  }, "id" | "name">

  export type GameTagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: GameTagCountOrderByAggregateInput
    _max?: GameTagMaxOrderByAggregateInput
    _min?: GameTagMinOrderByAggregateInput
  }

  export type GameTagScalarWhereWithAggregatesInput = {
    AND?: GameTagScalarWhereWithAggregatesInput | GameTagScalarWhereWithAggregatesInput[]
    OR?: GameTagScalarWhereWithAggregatesInput[]
    NOT?: GameTagScalarWhereWithAggregatesInput | GameTagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameTag"> | string
    name?: StringWithAggregatesFilter<"GameTag"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GameTag"> | Date | string
  }

  export type PreferenceCreateInput = {
    accountAddress: string
    appIcon?: number | null
    includeLowScore?: boolean
    createdAt?: Date | string
  }

  export type PreferenceUncheckedCreateInput = {
    accountAddress: string
    appIcon?: number | null
    includeLowScore?: boolean
    createdAt?: Date | string
  }

  export type PreferenceUpdateInput = {
    accountAddress?: StringFieldUpdateOperationsInput | string
    appIcon?: NullableIntFieldUpdateOperationsInput | number | null
    includeLowScore?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreferenceUncheckedUpdateInput = {
    accountAddress?: StringFieldUpdateOperationsInput | string
    appIcon?: NullableIntFieldUpdateOperationsInput | number | null
    includeLowScore?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreferenceCreateManyInput = {
    accountAddress: string
    appIcon?: number | null
    includeLowScore?: boolean
    createdAt?: Date | string
  }

  export type PreferenceUpdateManyMutationInput = {
    accountAddress?: StringFieldUpdateOperationsInput | string
    appIcon?: NullableIntFieldUpdateOperationsInput | number | null
    includeLowScore?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreferenceUncheckedUpdateManyInput = {
    accountAddress?: StringFieldUpdateOperationsInput | string
    appIcon?: NullableIntFieldUpdateOperationsInput | number | null
    includeLowScore?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumProfileCreateInput = {
    id?: string
    profileId: string
    isActive?: boolean
    linkedAt?: Date | string
    deactivatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutPremiumProfileInput
  }

  export type PremiumProfileUncheckedCreateInput = {
    id?: string
    walletAddress: string
    profileId: string
    isActive?: boolean
    linkedAt?: Date | string
    deactivatedAt?: Date | string | null
  }

  export type PremiumProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    linkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPremiumProfileNestedInput
  }

  export type PremiumProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    linkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PremiumProfileCreateManyInput = {
    id?: string
    walletAddress: string
    profileId: string
    isActive?: boolean
    linkedAt?: Date | string
    deactivatedAt?: Date | string | null
  }

  export type PremiumProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    linkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PremiumProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    linkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileCreateNestedOneWithoutUserInput
    userCoins?: UserCoinCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    userQuests?: UserQuestCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userStats?: UserStatsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessUncheckedCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileUncheckedCreateNestedOneWithoutUserInput
    userCoins?: UserCoinUncheckedCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
    userQuests?: UserQuestUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userStats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUncheckedUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUncheckedUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUncheckedUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
  }

  export type UserUpdateManyMutationInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
  }

  export type UserUncheckedUpdateManyInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
  }

  export type UserPreferencesCreateInput = {
    emailNotifications?: boolean
    pushNotifications?: boolean
    marketingEmails?: boolean
    privacyLevel?: $Enums.PrivacyLevel
    language?: string
    timezone?: string
    autoLinkProfile?: boolean
    showPremiumBadge?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPreferencesInput
  }

  export type UserPreferencesUncheckedCreateInput = {
    walletAddress: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    marketingEmails?: boolean
    privacyLevel?: $Enums.PrivacyLevel
    language?: string
    timezone?: string
    autoLinkProfile?: boolean
    showPremiumBadge?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferencesUpdateInput = {
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    marketingEmails?: BoolFieldUpdateOperationsInput | boolean
    privacyLevel?: EnumPrivacyLevelFieldUpdateOperationsInput | $Enums.PrivacyLevel
    language?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    autoLinkProfile?: BoolFieldUpdateOperationsInput | boolean
    showPremiumBadge?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPreferencesNestedInput
  }

  export type UserPreferencesUncheckedUpdateInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    marketingEmails?: BoolFieldUpdateOperationsInput | boolean
    privacyLevel?: EnumPrivacyLevelFieldUpdateOperationsInput | $Enums.PrivacyLevel
    language?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    autoLinkProfile?: BoolFieldUpdateOperationsInput | boolean
    showPremiumBadge?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferencesCreateManyInput = {
    walletAddress: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    marketingEmails?: boolean
    privacyLevel?: $Enums.PrivacyLevel
    language?: string
    timezone?: string
    autoLinkProfile?: boolean
    showPremiumBadge?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferencesUpdateManyMutationInput = {
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    marketingEmails?: BoolFieldUpdateOperationsInput | boolean
    privacyLevel?: EnumPrivacyLevelFieldUpdateOperationsInput | $Enums.PrivacyLevel
    language?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    autoLinkProfile?: BoolFieldUpdateOperationsInput | boolean
    showPremiumBadge?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferencesUncheckedUpdateManyInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    marketingEmails?: BoolFieldUpdateOperationsInput | boolean
    privacyLevel?: EnumPrivacyLevelFieldUpdateOperationsInput | $Enums.PrivacyLevel
    language?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    autoLinkProfile?: BoolFieldUpdateOperationsInput | boolean
    showPremiumBadge?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatsCreateInput = {
    totalPosts?: number
    totalComments?: number
    totalLikes?: number
    totalFollowers?: number
    totalFollowing?: number
    daysAsPremium?: number
    referralCount?: number
    totalEarnings?: Decimal | DecimalJsLike | number | string
    questsCompleted?: number
    questsInProgress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserStatsInput
  }

  export type UserStatsUncheckedCreateInput = {
    walletAddress: string
    totalPosts?: number
    totalComments?: number
    totalLikes?: number
    totalFollowers?: number
    totalFollowing?: number
    daysAsPremium?: number
    referralCount?: number
    totalEarnings?: Decimal | DecimalJsLike | number | string
    questsCompleted?: number
    questsInProgress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStatsUpdateInput = {
    totalPosts?: IntFieldUpdateOperationsInput | number
    totalComments?: IntFieldUpdateOperationsInput | number
    totalLikes?: IntFieldUpdateOperationsInput | number
    totalFollowers?: IntFieldUpdateOperationsInput | number
    totalFollowing?: IntFieldUpdateOperationsInput | number
    daysAsPremium?: IntFieldUpdateOperationsInput | number
    referralCount?: IntFieldUpdateOperationsInput | number
    totalEarnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    questsCompleted?: IntFieldUpdateOperationsInput | number
    questsInProgress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserStatsNestedInput
  }

  export type UserStatsUncheckedUpdateInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    totalPosts?: IntFieldUpdateOperationsInput | number
    totalComments?: IntFieldUpdateOperationsInput | number
    totalLikes?: IntFieldUpdateOperationsInput | number
    totalFollowers?: IntFieldUpdateOperationsInput | number
    totalFollowing?: IntFieldUpdateOperationsInput | number
    daysAsPremium?: IntFieldUpdateOperationsInput | number
    referralCount?: IntFieldUpdateOperationsInput | number
    totalEarnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    questsCompleted?: IntFieldUpdateOperationsInput | number
    questsInProgress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatsCreateManyInput = {
    walletAddress: string
    totalPosts?: number
    totalComments?: number
    totalLikes?: number
    totalFollowers?: number
    totalFollowing?: number
    daysAsPremium?: number
    referralCount?: number
    totalEarnings?: Decimal | DecimalJsLike | number | string
    questsCompleted?: number
    questsInProgress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStatsUpdateManyMutationInput = {
    totalPosts?: IntFieldUpdateOperationsInput | number
    totalComments?: IntFieldUpdateOperationsInput | number
    totalLikes?: IntFieldUpdateOperationsInput | number
    totalFollowers?: IntFieldUpdateOperationsInput | number
    totalFollowing?: IntFieldUpdateOperationsInput | number
    daysAsPremium?: IntFieldUpdateOperationsInput | number
    referralCount?: IntFieldUpdateOperationsInput | number
    totalEarnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    questsCompleted?: IntFieldUpdateOperationsInput | number
    questsInProgress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatsUncheckedUpdateManyInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    totalPosts?: IntFieldUpdateOperationsInput | number
    totalComments?: IntFieldUpdateOperationsInput | number
    totalLikes?: IntFieldUpdateOperationsInput | number
    totalFollowers?: IntFieldUpdateOperationsInput | number
    totalFollowing?: IntFieldUpdateOperationsInput | number
    daysAsPremium?: IntFieldUpdateOperationsInput | number
    referralCount?: IntFieldUpdateOperationsInput | number
    totalEarnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    questsCompleted?: IntFieldUpdateOperationsInput | number
    questsInProgress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRewardCreateInput = {
    id?: string
    type: $Enums.RewardType
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    status?: $Enums.RewardStatus
    sourceType: $Enums.RewardSourceType
    sourceId?: string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    txHash?: string | null
    claimedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserRewardsInput
  }

  export type UserRewardUncheckedCreateInput = {
    id?: string
    walletAddress: string
    type: $Enums.RewardType
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    status?: $Enums.RewardStatus
    sourceType: $Enums.RewardSourceType
    sourceId?: string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    txHash?: string | null
    claimedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRewardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    sourceType?: EnumRewardSourceTypeFieldUpdateOperationsInput | $Enums.RewardSourceType
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserRewardsNestedInput
  }

  export type UserRewardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    type?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    sourceType?: EnumRewardSourceTypeFieldUpdateOperationsInput | $Enums.RewardSourceType
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRewardCreateManyInput = {
    id?: string
    walletAddress: string
    type: $Enums.RewardType
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    status?: $Enums.RewardStatus
    sourceType: $Enums.RewardSourceType
    sourceId?: string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    txHash?: string | null
    claimedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRewardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    sourceType?: EnumRewardSourceTypeFieldUpdateOperationsInput | $Enums.RewardSourceType
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRewardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    type?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    sourceType?: EnumRewardSourceTypeFieldUpdateOperationsInput | $Enums.RewardSourceType
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestCreateInput = {
    id?: string
    questId: string
    title: string
    description: string
    type: $Enums.QuestType
    status?: $Enums.QuestStatus
    currentProgress?: number
    targetProgress: number
    rewardAmount?: Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: string
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserQuestsInput
  }

  export type UserQuestUncheckedCreateInput = {
    id?: string
    walletAddress: string
    questId: string
    title: string
    description: string
    type: $Enums.QuestType
    status?: $Enums.QuestStatus
    currentProgress?: number
    targetProgress: number
    rewardAmount?: Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: string
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserQuestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    questId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestTypeFieldUpdateOperationsInput | $Enums.QuestType
    status?: EnumQuestStatusFieldUpdateOperationsInput | $Enums.QuestStatus
    currentProgress?: IntFieldUpdateOperationsInput | number
    targetProgress?: IntFieldUpdateOperationsInput | number
    rewardAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserQuestsNestedInput
  }

  export type UserQuestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    questId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestTypeFieldUpdateOperationsInput | $Enums.QuestType
    status?: EnumQuestStatusFieldUpdateOperationsInput | $Enums.QuestStatus
    currentProgress?: IntFieldUpdateOperationsInput | number
    targetProgress?: IntFieldUpdateOperationsInput | number
    rewardAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestCreateManyInput = {
    id?: string
    walletAddress: string
    questId: string
    title: string
    description: string
    type: $Enums.QuestType
    status?: $Enums.QuestStatus
    currentProgress?: number
    targetProgress: number
    rewardAmount?: Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: string
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserQuestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    questId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestTypeFieldUpdateOperationsInput | $Enums.QuestType
    status?: EnumQuestStatusFieldUpdateOperationsInput | $Enums.QuestStatus
    currentProgress?: IntFieldUpdateOperationsInput | number
    targetProgress?: IntFieldUpdateOperationsInput | number
    rewardAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    questId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestTypeFieldUpdateOperationsInput | $Enums.QuestType
    status?: EnumQuestStatusFieldUpdateOperationsInput | $Enums.QuestStatus
    currentProgress?: IntFieldUpdateOperationsInput | number
    targetProgress?: IntFieldUpdateOperationsInput | number
    rewardAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCoinCreateInput = {
    id?: string
    coinType: $Enums.CoinType
    amount?: number
    earnedAt?: Date | string
    sourceType: $Enums.CoinSourceType
    sourceId?: string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserCoinsInput
  }

  export type UserCoinUncheckedCreateInput = {
    id?: string
    walletAddress: string
    coinType: $Enums.CoinType
    amount?: number
    earnedAt?: Date | string
    sourceType: $Enums.CoinSourceType
    sourceId?: string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserCoinUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    coinType?: EnumCoinTypeFieldUpdateOperationsInput | $Enums.CoinType
    amount?: IntFieldUpdateOperationsInput | number
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceType?: EnumCoinSourceTypeFieldUpdateOperationsInput | $Enums.CoinSourceType
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserCoinsNestedInput
  }

  export type UserCoinUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    coinType?: EnumCoinTypeFieldUpdateOperationsInput | $Enums.CoinType
    amount?: IntFieldUpdateOperationsInput | number
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceType?: EnumCoinSourceTypeFieldUpdateOperationsInput | $Enums.CoinSourceType
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCoinCreateManyInput = {
    id?: string
    walletAddress: string
    coinType: $Enums.CoinType
    amount?: number
    earnedAt?: Date | string
    sourceType: $Enums.CoinSourceType
    sourceId?: string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserCoinUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    coinType?: EnumCoinTypeFieldUpdateOperationsInput | $Enums.CoinType
    amount?: IntFieldUpdateOperationsInput | number
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceType?: EnumCoinSourceTypeFieldUpdateOperationsInput | $Enums.CoinSourceType
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCoinUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    coinType?: EnumCoinTypeFieldUpdateOperationsInput | $Enums.CoinType
    amount?: IntFieldUpdateOperationsInput | number
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceType?: EnumCoinSourceTypeFieldUpdateOperationsInput | $Enums.CoinSourceType
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNotificationCreateInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    priority?: $Enums.NotificationPriority
    isRead?: boolean
    readAt?: Date | string | null
    actionUrl?: string | null
    actionMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserNotificationsInput
  }

  export type UserNotificationUncheckedCreateInput = {
    id?: string
    walletAddress: string
    type: $Enums.NotificationType
    title: string
    message: string
    priority?: $Enums.NotificationPriority
    isRead?: boolean
    readAt?: Date | string | null
    actionUrl?: string | null
    actionMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserNotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserNotificationsNestedInput
  }

  export type UserNotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNotificationCreateManyInput = {
    id?: string
    walletAddress: string
    type: $Enums.NotificationType
    title: string
    message: string
    priority?: $Enums.NotificationPriority
    isRead?: boolean
    readAt?: Date | string | null
    actionUrl?: string | null
    actionMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserNotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUserCreateInput = {
    id?: string
    walletAddress: string
    email: string
    username: string
    displayName?: string | null
    role?: $Enums.AdminRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    adminActions?: AdminActionCreateNestedManyWithoutAdminUserInput
    adminNotes?: AdminNoteCreateNestedManyWithoutAdminUserInput
    permissions?: AdminPermissionCreateNestedManyWithoutAdminUserInput
  }

  export type AdminUserUncheckedCreateInput = {
    id?: string
    walletAddress: string
    email: string
    username: string
    displayName?: string | null
    role?: $Enums.AdminRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    adminActions?: AdminActionUncheckedCreateNestedManyWithoutAdminUserInput
    adminNotes?: AdminNoteUncheckedCreateNestedManyWithoutAdminUserInput
    permissions?: AdminPermissionUncheckedCreateNestedManyWithoutAdminUserInput
  }

  export type AdminUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminActions?: AdminActionUpdateManyWithoutAdminUserNestedInput
    adminNotes?: AdminNoteUpdateManyWithoutAdminUserNestedInput
    permissions?: AdminPermissionUpdateManyWithoutAdminUserNestedInput
  }

  export type AdminUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminActions?: AdminActionUncheckedUpdateManyWithoutAdminUserNestedInput
    adminNotes?: AdminNoteUncheckedUpdateManyWithoutAdminUserNestedInput
    permissions?: AdminPermissionUncheckedUpdateManyWithoutAdminUserNestedInput
  }

  export type AdminUserCreateManyInput = {
    id?: string
    walletAddress: string
    email: string
    username: string
    displayName?: string | null
    role?: $Enums.AdminRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminPermissionCreateInput = {
    id?: string
    permission: string
    grantedAt?: Date | string
    grantedBy: string
    adminUser: AdminUserCreateNestedOneWithoutPermissionsInput
  }

  export type AdminPermissionUncheckedCreateInput = {
    id?: string
    adminUserId: string
    permission: string
    grantedAt?: Date | string
    grantedBy: string
  }

  export type AdminPermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    permission?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: StringFieldUpdateOperationsInput | string
    adminUser?: AdminUserUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type AdminPermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminUserId?: StringFieldUpdateOperationsInput | string
    permission?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: StringFieldUpdateOperationsInput | string
  }

  export type AdminPermissionCreateManyInput = {
    id?: string
    adminUserId: string
    permission: string
    grantedAt?: Date | string
    grantedBy: string
  }

  export type AdminPermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    permission?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: StringFieldUpdateOperationsInput | string
  }

  export type AdminPermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminUserId?: StringFieldUpdateOperationsInput | string
    permission?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: StringFieldUpdateOperationsInput | string
  }

  export type AdminActionCreateInput = {
    id?: string
    actionType: $Enums.AdminActionType
    targetWallet: string
    targetProfileId?: string | null
    reason: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.AdminActionStatus
    result?: NullableJsonNullValueInput | InputJsonValue
    errorMessage?: string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
    adminUser: AdminUserCreateNestedOneWithoutAdminActionsInput
  }

  export type AdminActionUncheckedCreateInput = {
    id?: string
    adminUserId: string
    actionType: $Enums.AdminActionType
    targetWallet: string
    targetProfileId?: string | null
    reason: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.AdminActionStatus
    result?: NullableJsonNullValueInput | InputJsonValue
    errorMessage?: string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
  }

  export type AdminActionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAdminActionTypeFieldUpdateOperationsInput | $Enums.AdminActionType
    targetWallet?: StringFieldUpdateOperationsInput | string
    targetProfileId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumAdminActionStatusFieldUpdateOperationsInput | $Enums.AdminActionStatus
    result?: NullableJsonNullValueInput | InputJsonValue
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    adminUser?: AdminUserUpdateOneRequiredWithoutAdminActionsNestedInput
  }

  export type AdminActionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminUserId?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAdminActionTypeFieldUpdateOperationsInput | $Enums.AdminActionType
    targetWallet?: StringFieldUpdateOperationsInput | string
    targetProfileId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumAdminActionStatusFieldUpdateOperationsInput | $Enums.AdminActionStatus
    result?: NullableJsonNullValueInput | InputJsonValue
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AdminActionCreateManyInput = {
    id?: string
    adminUserId: string
    actionType: $Enums.AdminActionType
    targetWallet: string
    targetProfileId?: string | null
    reason: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.AdminActionStatus
    result?: NullableJsonNullValueInput | InputJsonValue
    errorMessage?: string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
  }

  export type AdminActionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAdminActionTypeFieldUpdateOperationsInput | $Enums.AdminActionType
    targetWallet?: StringFieldUpdateOperationsInput | string
    targetProfileId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumAdminActionStatusFieldUpdateOperationsInput | $Enums.AdminActionStatus
    result?: NullableJsonNullValueInput | InputJsonValue
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AdminActionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminUserId?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAdminActionTypeFieldUpdateOperationsInput | $Enums.AdminActionType
    targetWallet?: StringFieldUpdateOperationsInput | string
    targetProfileId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumAdminActionStatusFieldUpdateOperationsInput | $Enums.AdminActionStatus
    result?: NullableJsonNullValueInput | InputJsonValue
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AdminNoteCreateInput = {
    id?: string
    note: string
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminUser: AdminUserCreateNestedOneWithoutAdminNotesInput
    user: UserCreateNestedOneWithoutAdminNotesInput
  }

  export type AdminNoteUncheckedCreateInput = {
    id?: string
    adminUserId: string
    walletAddress: string
    note: string
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminNoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminUser?: AdminUserUpdateOneRequiredWithoutAdminNotesNestedInput
    user?: UserUpdateOneRequiredWithoutAdminNotesNestedInput
  }

  export type AdminNoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminUserId?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminNoteCreateManyInput = {
    id?: string
    adminUserId: string
    walletAddress: string
    note: string
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminNoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminNoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminUserId?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeatureCreateInput = {
    id?: string
    featureId: string
    name: string
    description: string
    category: string
    standardAccess?: boolean
    premiumAccess?: boolean
    adminOverride?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    featureAccesses?: FeatureAccessCreateNestedManyWithoutFeatureInput
  }

  export type FeatureUncheckedCreateInput = {
    id?: string
    featureId: string
    name: string
    description: string
    category: string
    standardAccess?: boolean
    premiumAccess?: boolean
    adminOverride?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    featureAccesses?: FeatureAccessUncheckedCreateNestedManyWithoutFeatureInput
  }

  export type FeatureUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    featureId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    standardAccess?: BoolFieldUpdateOperationsInput | boolean
    premiumAccess?: BoolFieldUpdateOperationsInput | boolean
    adminOverride?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    featureAccesses?: FeatureAccessUpdateManyWithoutFeatureNestedInput
  }

  export type FeatureUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    featureId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    standardAccess?: BoolFieldUpdateOperationsInput | boolean
    premiumAccess?: BoolFieldUpdateOperationsInput | boolean
    adminOverride?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    featureAccesses?: FeatureAccessUncheckedUpdateManyWithoutFeatureNestedInput
  }

  export type FeatureCreateManyInput = {
    id?: string
    featureId: string
    name: string
    description: string
    category: string
    standardAccess?: boolean
    premiumAccess?: boolean
    adminOverride?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeatureUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    featureId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    standardAccess?: BoolFieldUpdateOperationsInput | boolean
    premiumAccess?: BoolFieldUpdateOperationsInput | boolean
    adminOverride?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeatureUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    featureId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    standardAccess?: BoolFieldUpdateOperationsInput | boolean
    premiumAccess?: BoolFieldUpdateOperationsInput | boolean
    adminOverride?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeatureAccessCreateInput = {
    id?: string
    grantedBy?: string | null
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    feature: FeatureCreateNestedOneWithoutFeatureAccessesInput
    user: UserCreateNestedOneWithoutFeatureAccessesInput
  }

  export type FeatureAccessUncheckedCreateInput = {
    id?: string
    featureId: string
    walletAddress: string
    grantedBy?: string | null
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
  }

  export type FeatureAccessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    feature?: FeatureUpdateOneRequiredWithoutFeatureAccessesNestedInput
    user?: UserUpdateOneRequiredWithoutFeatureAccessesNestedInput
  }

  export type FeatureAccessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    featureId?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FeatureAccessCreateManyInput = {
    id?: string
    featureId: string
    walletAddress: string
    grantedBy?: string | null
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
  }

  export type FeatureAccessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FeatureAccessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    featureId?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameCreateInput = {
    id?: string
    title: string
    slug: string
    description: string
    instructions?: string | null
    packageUrl: string
    entryFilePath?: string
    iconUrl: string
    coverImageUrl: string
    width?: number
    height?: number
    orientation?: $Enums.GameOrientation
    developerName?: string | null
    version?: string | null
    status?: $Enums.GameStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    GameScreenshot?: GameScreenshotCreateNestedManyWithoutGameInput
    categories?: GameCategoryCreateNestedManyWithoutGamesInput
    GameTag?: GameTagCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateInput = {
    id?: string
    title: string
    slug: string
    description: string
    instructions?: string | null
    packageUrl: string
    entryFilePath?: string
    iconUrl: string
    coverImageUrl: string
    width?: number
    height?: number
    orientation?: $Enums.GameOrientation
    developerName?: string | null
    version?: string | null
    status?: $Enums.GameStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    GameScreenshot?: GameScreenshotUncheckedCreateNestedManyWithoutGameInput
    categories?: GameCategoryUncheckedCreateNestedManyWithoutGamesInput
    GameTag?: GameTagUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    packageUrl?: StringFieldUpdateOperationsInput | string
    entryFilePath?: StringFieldUpdateOperationsInput | string
    iconUrl?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    orientation?: EnumGameOrientationFieldUpdateOperationsInput | $Enums.GameOrientation
    developerName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GameScreenshot?: GameScreenshotUpdateManyWithoutGameNestedInput
    categories?: GameCategoryUpdateManyWithoutGamesNestedInput
    GameTag?: GameTagUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    packageUrl?: StringFieldUpdateOperationsInput | string
    entryFilePath?: StringFieldUpdateOperationsInput | string
    iconUrl?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    orientation?: EnumGameOrientationFieldUpdateOperationsInput | $Enums.GameOrientation
    developerName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GameScreenshot?: GameScreenshotUncheckedUpdateManyWithoutGameNestedInput
    categories?: GameCategoryUncheckedUpdateManyWithoutGamesNestedInput
    GameTag?: GameTagUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateManyInput = {
    id?: string
    title: string
    slug: string
    description: string
    instructions?: string | null
    packageUrl: string
    entryFilePath?: string
    iconUrl: string
    coverImageUrl: string
    width?: number
    height?: number
    orientation?: $Enums.GameOrientation
    developerName?: string | null
    version?: string | null
    status?: $Enums.GameStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    packageUrl?: StringFieldUpdateOperationsInput | string
    entryFilePath?: StringFieldUpdateOperationsInput | string
    iconUrl?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    orientation?: EnumGameOrientationFieldUpdateOperationsInput | $Enums.GameOrientation
    developerName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    packageUrl?: StringFieldUpdateOperationsInput | string
    entryFilePath?: StringFieldUpdateOperationsInput | string
    iconUrl?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    orientation?: EnumGameOrientationFieldUpdateOperationsInput | $Enums.GameOrientation
    developerName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCategoryCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    description?: string | null
    icon?: string | null
    metaDescription?: string | null
    slug?: string | null
    games?: GameCreateNestedManyWithoutCategoriesInput
  }

  export type GameCategoryUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    description?: string | null
    icon?: string | null
    metaDescription?: string | null
    slug?: string | null
    games?: GameUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type GameCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    games?: GameUpdateManyWithoutCategoriesNestedInput
  }

  export type GameCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    games?: GameUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type GameCategoryCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    description?: string | null
    icon?: string | null
    metaDescription?: string | null
    slug?: string | null
  }

  export type GameCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameScreenshotCreateInput = {
    id: string
    imageUrl: string
    order?: number
    createdAt?: Date | string
    Game: GameCreateNestedOneWithoutGameScreenshotInput
  }

  export type GameScreenshotUncheckedCreateInput = {
    id: string
    gameId: string
    imageUrl: string
    order?: number
    createdAt?: Date | string
  }

  export type GameScreenshotUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Game?: GameUpdateOneRequiredWithoutGameScreenshotNestedInput
  }

  export type GameScreenshotUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameScreenshotCreateManyInput = {
    id: string
    gameId: string
    imageUrl: string
    order?: number
    createdAt?: Date | string
  }

  export type GameScreenshotUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameScreenshotUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameTagCreateInput = {
    id: string
    name: string
    createdAt?: Date | string
    Game?: GameCreateNestedManyWithoutGameTagInput
  }

  export type GameTagUncheckedCreateInput = {
    id: string
    name: string
    createdAt?: Date | string
    Game?: GameUncheckedCreateNestedManyWithoutGameTagInput
  }

  export type GameTagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Game?: GameUpdateManyWithoutGameTagNestedInput
  }

  export type GameTagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Game?: GameUncheckedUpdateManyWithoutGameTagNestedInput
  }

  export type GameTagCreateManyInput = {
    id: string
    name: string
    createdAt?: Date | string
  }

  export type GameTagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameTagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PreferenceCountOrderByAggregateInput = {
    accountAddress?: SortOrder
    appIcon?: SortOrder
    includeLowScore?: SortOrder
    createdAt?: SortOrder
  }

  export type PreferenceAvgOrderByAggregateInput = {
    appIcon?: SortOrder
  }

  export type PreferenceMaxOrderByAggregateInput = {
    accountAddress?: SortOrder
    appIcon?: SortOrder
    includeLowScore?: SortOrder
    createdAt?: SortOrder
  }

  export type PreferenceMinOrderByAggregateInput = {
    accountAddress?: SortOrder
    appIcon?: SortOrder
    includeLowScore?: SortOrder
    createdAt?: SortOrder
  }

  export type PreferenceSumOrderByAggregateInput = {
    appIcon?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PremiumProfileCountOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    profileId?: SortOrder
    isActive?: SortOrder
    linkedAt?: SortOrder
    deactivatedAt?: SortOrder
  }

  export type PremiumProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    profileId?: SortOrder
    isActive?: SortOrder
    linkedAt?: SortOrder
    deactivatedAt?: SortOrder
  }

  export type PremiumProfileMinOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    profileId?: SortOrder
    isActive?: SortOrder
    linkedAt?: SortOrder
    deactivatedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type AdminNoteListRelationFilter = {
    every?: AdminNoteWhereInput
    some?: AdminNoteWhereInput
    none?: AdminNoteWhereInput
  }

  export type FeatureAccessListRelationFilter = {
    every?: FeatureAccessWhereInput
    some?: FeatureAccessWhereInput
    none?: FeatureAccessWhereInput
  }

  export type PremiumProfileNullableScalarRelationFilter = {
    is?: PremiumProfileWhereInput | null
    isNot?: PremiumProfileWhereInput | null
  }

  export type UserCoinListRelationFilter = {
    every?: UserCoinWhereInput
    some?: UserCoinWhereInput
    none?: UserCoinWhereInput
  }

  export type UserNotificationListRelationFilter = {
    every?: UserNotificationWhereInput
    some?: UserNotificationWhereInput
    none?: UserNotificationWhereInput
  }

  export type UserPreferencesNullableScalarRelationFilter = {
    is?: UserPreferencesWhereInput | null
    isNot?: UserPreferencesWhereInput | null
  }

  export type UserQuestListRelationFilter = {
    every?: UserQuestWhereInput
    some?: UserQuestWhereInput
    none?: UserQuestWhereInput
  }

  export type UserRewardListRelationFilter = {
    every?: UserRewardWhereInput
    some?: UserRewardWhereInput
    none?: UserRewardWhereInput
  }

  export type UserStatsNullableScalarRelationFilter = {
    is?: UserStatsWhereInput | null
    isNot?: UserStatsWhereInput | null
  }

  export type AdminNoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeatureAccessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCoinOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserNotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserQuestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserRewardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    walletAddress?: SortOrder
    email?: SortOrder
    username?: SortOrder
    displayName?: SortOrder
    avatarUrl?: SortOrder
    bio?: SortOrder
    location?: SortOrder
    website?: SortOrder
    twitterHandle?: SortOrder
    registrationDate?: SortOrder
    referrerAddress?: SortOrder
    registrationTxHash?: SortOrder
    premiumUpgradedAt?: SortOrder
    lastActiveAt?: SortOrder
    totalLogins?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    totalLogins?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    walletAddress?: SortOrder
    email?: SortOrder
    username?: SortOrder
    displayName?: SortOrder
    avatarUrl?: SortOrder
    bio?: SortOrder
    location?: SortOrder
    website?: SortOrder
    twitterHandle?: SortOrder
    registrationDate?: SortOrder
    referrerAddress?: SortOrder
    registrationTxHash?: SortOrder
    premiumUpgradedAt?: SortOrder
    lastActiveAt?: SortOrder
    totalLogins?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    walletAddress?: SortOrder
    email?: SortOrder
    username?: SortOrder
    displayName?: SortOrder
    avatarUrl?: SortOrder
    bio?: SortOrder
    location?: SortOrder
    website?: SortOrder
    twitterHandle?: SortOrder
    registrationDate?: SortOrder
    referrerAddress?: SortOrder
    registrationTxHash?: SortOrder
    premiumUpgradedAt?: SortOrder
    lastActiveAt?: SortOrder
    totalLogins?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    totalLogins?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type EnumPrivacyLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.PrivacyLevel | EnumPrivacyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PrivacyLevel[] | ListEnumPrivacyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.PrivacyLevel[] | ListEnumPrivacyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumPrivacyLevelFilter<$PrismaModel> | $Enums.PrivacyLevel
  }

  export type UserPreferencesCountOrderByAggregateInput = {
    walletAddress?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    marketingEmails?: SortOrder
    privacyLevel?: SortOrder
    language?: SortOrder
    timezone?: SortOrder
    autoLinkProfile?: SortOrder
    showPremiumBadge?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferencesMaxOrderByAggregateInput = {
    walletAddress?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    marketingEmails?: SortOrder
    privacyLevel?: SortOrder
    language?: SortOrder
    timezone?: SortOrder
    autoLinkProfile?: SortOrder
    showPremiumBadge?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferencesMinOrderByAggregateInput = {
    walletAddress?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    marketingEmails?: SortOrder
    privacyLevel?: SortOrder
    language?: SortOrder
    timezone?: SortOrder
    autoLinkProfile?: SortOrder
    showPremiumBadge?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPrivacyLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PrivacyLevel | EnumPrivacyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PrivacyLevel[] | ListEnumPrivacyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.PrivacyLevel[] | ListEnumPrivacyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumPrivacyLevelWithAggregatesFilter<$PrismaModel> | $Enums.PrivacyLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPrivacyLevelFilter<$PrismaModel>
    _max?: NestedEnumPrivacyLevelFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type UserStatsCountOrderByAggregateInput = {
    walletAddress?: SortOrder
    totalPosts?: SortOrder
    totalComments?: SortOrder
    totalLikes?: SortOrder
    totalFollowers?: SortOrder
    totalFollowing?: SortOrder
    daysAsPremium?: SortOrder
    referralCount?: SortOrder
    totalEarnings?: SortOrder
    questsCompleted?: SortOrder
    questsInProgress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStatsAvgOrderByAggregateInput = {
    totalPosts?: SortOrder
    totalComments?: SortOrder
    totalLikes?: SortOrder
    totalFollowers?: SortOrder
    totalFollowing?: SortOrder
    daysAsPremium?: SortOrder
    referralCount?: SortOrder
    totalEarnings?: SortOrder
    questsCompleted?: SortOrder
    questsInProgress?: SortOrder
  }

  export type UserStatsMaxOrderByAggregateInput = {
    walletAddress?: SortOrder
    totalPosts?: SortOrder
    totalComments?: SortOrder
    totalLikes?: SortOrder
    totalFollowers?: SortOrder
    totalFollowing?: SortOrder
    daysAsPremium?: SortOrder
    referralCount?: SortOrder
    totalEarnings?: SortOrder
    questsCompleted?: SortOrder
    questsInProgress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStatsMinOrderByAggregateInput = {
    walletAddress?: SortOrder
    totalPosts?: SortOrder
    totalComments?: SortOrder
    totalLikes?: SortOrder
    totalFollowers?: SortOrder
    totalFollowing?: SortOrder
    daysAsPremium?: SortOrder
    referralCount?: SortOrder
    totalEarnings?: SortOrder
    questsCompleted?: SortOrder
    questsInProgress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStatsSumOrderByAggregateInput = {
    totalPosts?: SortOrder
    totalComments?: SortOrder
    totalLikes?: SortOrder
    totalFollowers?: SortOrder
    totalFollowing?: SortOrder
    daysAsPremium?: SortOrder
    referralCount?: SortOrder
    totalEarnings?: SortOrder
    questsCompleted?: SortOrder
    questsInProgress?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumRewardTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardType | EnumRewardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardTypeFilter<$PrismaModel> | $Enums.RewardType
  }

  export type EnumRewardStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardStatus | EnumRewardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardStatusFilter<$PrismaModel> | $Enums.RewardStatus
  }

  export type EnumRewardSourceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardSourceType | EnumRewardSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardSourceType[] | ListEnumRewardSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardSourceType[] | ListEnumRewardSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardSourceTypeFilter<$PrismaModel> | $Enums.RewardSourceType
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserRewardCountOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrder
    sourceMetadata?: SortOrder
    txHash?: SortOrder
    claimedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRewardAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type UserRewardMaxOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrder
    txHash?: SortOrder
    claimedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRewardMinOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrder
    txHash?: SortOrder
    claimedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRewardSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumRewardTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardType | EnumRewardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardTypeWithAggregatesFilter<$PrismaModel> | $Enums.RewardType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRewardTypeFilter<$PrismaModel>
    _max?: NestedEnumRewardTypeFilter<$PrismaModel>
  }

  export type EnumRewardStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardStatus | EnumRewardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardStatusWithAggregatesFilter<$PrismaModel> | $Enums.RewardStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRewardStatusFilter<$PrismaModel>
    _max?: NestedEnumRewardStatusFilter<$PrismaModel>
  }

  export type EnumRewardSourceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardSourceType | EnumRewardSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardSourceType[] | ListEnumRewardSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardSourceType[] | ListEnumRewardSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardSourceTypeWithAggregatesFilter<$PrismaModel> | $Enums.RewardSourceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRewardSourceTypeFilter<$PrismaModel>
    _max?: NestedEnumRewardSourceTypeFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumQuestTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestType | EnumQuestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestType[] | ListEnumQuestTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestType[] | ListEnumQuestTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestTypeFilter<$PrismaModel> | $Enums.QuestType
  }

  export type EnumQuestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestStatus | EnumQuestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuestStatus[] | ListEnumQuestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestStatus[] | ListEnumQuestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestStatusFilter<$PrismaModel> | $Enums.QuestStatus
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type UserQuestCountOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    questId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    currentProgress?: SortOrder
    targetProgress?: SortOrder
    rewardAmount?: SortOrder
    rewardCurrency?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserQuestAvgOrderByAggregateInput = {
    currentProgress?: SortOrder
    targetProgress?: SortOrder
    rewardAmount?: SortOrder
  }

  export type UserQuestMaxOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    questId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    currentProgress?: SortOrder
    targetProgress?: SortOrder
    rewardAmount?: SortOrder
    rewardCurrency?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserQuestMinOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    questId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    currentProgress?: SortOrder
    targetProgress?: SortOrder
    rewardAmount?: SortOrder
    rewardCurrency?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserQuestSumOrderByAggregateInput = {
    currentProgress?: SortOrder
    targetProgress?: SortOrder
    rewardAmount?: SortOrder
  }

  export type EnumQuestTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestType | EnumQuestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestType[] | ListEnumQuestTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestType[] | ListEnumQuestTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestTypeFilter<$PrismaModel>
  }

  export type EnumQuestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestStatus | EnumQuestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuestStatus[] | ListEnumQuestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestStatus[] | ListEnumQuestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestStatusWithAggregatesFilter<$PrismaModel> | $Enums.QuestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestStatusFilter<$PrismaModel>
    _max?: NestedEnumQuestStatusFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type EnumCoinTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CoinType | EnumCoinTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CoinType[] | ListEnumCoinTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CoinType[] | ListEnumCoinTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCoinTypeFilter<$PrismaModel> | $Enums.CoinType
  }

  export type EnumCoinSourceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CoinSourceType | EnumCoinSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CoinSourceType[] | ListEnumCoinSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CoinSourceType[] | ListEnumCoinSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCoinSourceTypeFilter<$PrismaModel> | $Enums.CoinSourceType
  }

  export type UserCoinCountOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    coinType?: SortOrder
    amount?: SortOrder
    earnedAt?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrder
    sourceMetadata?: SortOrder
    createdAt?: SortOrder
  }

  export type UserCoinAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type UserCoinMaxOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    coinType?: SortOrder
    amount?: SortOrder
    earnedAt?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserCoinMinOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    coinType?: SortOrder
    amount?: SortOrder
    earnedAt?: SortOrder
    sourceType?: SortOrder
    sourceId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserCoinSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumCoinTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CoinType | EnumCoinTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CoinType[] | ListEnumCoinTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CoinType[] | ListEnumCoinTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCoinTypeWithAggregatesFilter<$PrismaModel> | $Enums.CoinType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCoinTypeFilter<$PrismaModel>
    _max?: NestedEnumCoinTypeFilter<$PrismaModel>
  }

  export type EnumCoinSourceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CoinSourceType | EnumCoinSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CoinSourceType[] | ListEnumCoinSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CoinSourceType[] | ListEnumCoinSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCoinSourceTypeWithAggregatesFilter<$PrismaModel> | $Enums.CoinSourceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCoinSourceTypeFilter<$PrismaModel>
    _max?: NestedEnumCoinSourceTypeFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type EnumNotificationPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityFilter<$PrismaModel> | $Enums.NotificationPriority
  }

  export type UserNotificationCountOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    actionUrl?: SortOrder
    actionMetadata?: SortOrder
    createdAt?: SortOrder
  }

  export type UserNotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type UserNotificationMinOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type EnumNotificationPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityWithAggregatesFilter<$PrismaModel> | $Enums.NotificationPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationPriorityFilter<$PrismaModel>
    _max?: NestedEnumNotificationPriorityFilter<$PrismaModel>
  }

  export type EnumAdminRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleFilter<$PrismaModel> | $Enums.AdminRole
  }

  export type AdminActionListRelationFilter = {
    every?: AdminActionWhereInput
    some?: AdminActionWhereInput
    none?: AdminActionWhereInput
  }

  export type AdminPermissionListRelationFilter = {
    every?: AdminPermissionWhereInput
    some?: AdminPermissionWhereInput
    none?: AdminPermissionWhereInput
  }

  export type AdminActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminUserCountOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    email?: SortOrder
    username?: SortOrder
    displayName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminUserMaxOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    email?: SortOrder
    username?: SortOrder
    displayName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminUserMinOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    email?: SortOrder
    username?: SortOrder
    displayName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAdminRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleWithAggregatesFilter<$PrismaModel> | $Enums.AdminRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminRoleFilter<$PrismaModel>
    _max?: NestedEnumAdminRoleFilter<$PrismaModel>
  }

  export type AdminUserScalarRelationFilter = {
    is?: AdminUserWhereInput
    isNot?: AdminUserWhereInput
  }

  export type AdminPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    permission?: SortOrder
    grantedAt?: SortOrder
    grantedBy?: SortOrder
  }

  export type AdminPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    permission?: SortOrder
    grantedAt?: SortOrder
    grantedBy?: SortOrder
  }

  export type AdminPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    permission?: SortOrder
    grantedAt?: SortOrder
    grantedBy?: SortOrder
  }

  export type EnumAdminActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminActionType | EnumAdminActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AdminActionType[] | ListEnumAdminActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminActionType[] | ListEnumAdminActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminActionTypeFilter<$PrismaModel> | $Enums.AdminActionType
  }

  export type EnumAdminActionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminActionStatus | EnumAdminActionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AdminActionStatus[] | ListEnumAdminActionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminActionStatus[] | ListEnumAdminActionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminActionStatusFilter<$PrismaModel> | $Enums.AdminActionStatus
  }

  export type AdminActionCountOrderByAggregateInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    actionType?: SortOrder
    targetWallet?: SortOrder
    targetProfileId?: SortOrder
    reason?: SortOrder
    metadata?: SortOrder
    status?: SortOrder
    result?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
  }

  export type AdminActionMaxOrderByAggregateInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    actionType?: SortOrder
    targetWallet?: SortOrder
    targetProfileId?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
  }

  export type AdminActionMinOrderByAggregateInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    actionType?: SortOrder
    targetWallet?: SortOrder
    targetProfileId?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
  }

  export type EnumAdminActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminActionType | EnumAdminActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AdminActionType[] | ListEnumAdminActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminActionType[] | ListEnumAdminActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.AdminActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminActionTypeFilter<$PrismaModel>
    _max?: NestedEnumAdminActionTypeFilter<$PrismaModel>
  }

  export type EnumAdminActionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminActionStatus | EnumAdminActionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AdminActionStatus[] | ListEnumAdminActionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminActionStatus[] | ListEnumAdminActionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminActionStatusWithAggregatesFilter<$PrismaModel> | $Enums.AdminActionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminActionStatusFilter<$PrismaModel>
    _max?: NestedEnumAdminActionStatusFilter<$PrismaModel>
  }

  export type AdminNoteCountOrderByAggregateInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    walletAddress?: SortOrder
    note?: SortOrder
    isPrivate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminNoteMaxOrderByAggregateInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    walletAddress?: SortOrder
    note?: SortOrder
    isPrivate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminNoteMinOrderByAggregateInput = {
    id?: SortOrder
    adminUserId?: SortOrder
    walletAddress?: SortOrder
    note?: SortOrder
    isPrivate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeatureCountOrderByAggregateInput = {
    id?: SortOrder
    featureId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    standardAccess?: SortOrder
    premiumAccess?: SortOrder
    adminOverride?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeatureMaxOrderByAggregateInput = {
    id?: SortOrder
    featureId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    standardAccess?: SortOrder
    premiumAccess?: SortOrder
    adminOverride?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeatureMinOrderByAggregateInput = {
    id?: SortOrder
    featureId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    standardAccess?: SortOrder
    premiumAccess?: SortOrder
    adminOverride?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeatureScalarRelationFilter = {
    is?: FeatureWhereInput
    isNot?: FeatureWhereInput
  }

  export type FeatureAccessCountOrderByAggregateInput = {
    id?: SortOrder
    featureId?: SortOrder
    walletAddress?: SortOrder
    grantedBy?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
  }

  export type FeatureAccessMaxOrderByAggregateInput = {
    id?: SortOrder
    featureId?: SortOrder
    walletAddress?: SortOrder
    grantedBy?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
  }

  export type FeatureAccessMinOrderByAggregateInput = {
    id?: SortOrder
    featureId?: SortOrder
    walletAddress?: SortOrder
    grantedBy?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
  }

  export type EnumGameOrientationFilter<$PrismaModel = never> = {
    equals?: $Enums.GameOrientation | EnumGameOrientationFieldRefInput<$PrismaModel>
    in?: $Enums.GameOrientation[] | ListEnumGameOrientationFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameOrientation[] | ListEnumGameOrientationFieldRefInput<$PrismaModel>
    not?: NestedEnumGameOrientationFilter<$PrismaModel> | $Enums.GameOrientation
  }

  export type EnumGameStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusFilter<$PrismaModel> | $Enums.GameStatus
  }

  export type GameScreenshotListRelationFilter = {
    every?: GameScreenshotWhereInput
    some?: GameScreenshotWhereInput
    none?: GameScreenshotWhereInput
  }

  export type GameCategoryListRelationFilter = {
    every?: GameCategoryWhereInput
    some?: GameCategoryWhereInput
    none?: GameCategoryWhereInput
  }

  export type GameTagListRelationFilter = {
    every?: GameTagWhereInput
    some?: GameTagWhereInput
    none?: GameTagWhereInput
  }

  export type GameScreenshotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    packageUrl?: SortOrder
    entryFilePath?: SortOrder
    iconUrl?: SortOrder
    coverImageUrl?: SortOrder
    width?: SortOrder
    height?: SortOrder
    orientation?: SortOrder
    developerName?: SortOrder
    version?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    width?: SortOrder
    height?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    packageUrl?: SortOrder
    entryFilePath?: SortOrder
    iconUrl?: SortOrder
    coverImageUrl?: SortOrder
    width?: SortOrder
    height?: SortOrder
    orientation?: SortOrder
    developerName?: SortOrder
    version?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    packageUrl?: SortOrder
    entryFilePath?: SortOrder
    iconUrl?: SortOrder
    coverImageUrl?: SortOrder
    width?: SortOrder
    height?: SortOrder
    orientation?: SortOrder
    developerName?: SortOrder
    version?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    width?: SortOrder
    height?: SortOrder
  }

  export type EnumGameOrientationWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameOrientation | EnumGameOrientationFieldRefInput<$PrismaModel>
    in?: $Enums.GameOrientation[] | ListEnumGameOrientationFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameOrientation[] | ListEnumGameOrientationFieldRefInput<$PrismaModel>
    not?: NestedEnumGameOrientationWithAggregatesFilter<$PrismaModel> | $Enums.GameOrientation
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameOrientationFilter<$PrismaModel>
    _max?: NestedEnumGameOrientationFilter<$PrismaModel>
  }

  export type EnumGameStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusWithAggregatesFilter<$PrismaModel> | $Enums.GameStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameStatusFilter<$PrismaModel>
    _max?: NestedEnumGameStatusFilter<$PrismaModel>
  }

  export type GameListRelationFilter = {
    every?: GameWhereInput
    some?: GameWhereInput
    none?: GameWhereInput
  }

  export type GameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    color?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    metaDescription?: SortOrder
    slug?: SortOrder
  }

  export type GameCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    color?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    metaDescription?: SortOrder
    slug?: SortOrder
  }

  export type GameCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    color?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    metaDescription?: SortOrder
    slug?: SortOrder
  }

  export type GameScalarRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type GameScreenshotCountOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    imageUrl?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type GameScreenshotAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type GameScreenshotMaxOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    imageUrl?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type GameScreenshotMinOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    imageUrl?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type GameScreenshotSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type GameTagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type GameTagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type GameTagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserCreateNestedOneWithoutPremiumProfileInput = {
    create?: XOR<UserCreateWithoutPremiumProfileInput, UserUncheckedCreateWithoutPremiumProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPremiumProfileInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutPremiumProfileNestedInput = {
    create?: XOR<UserCreateWithoutPremiumProfileInput, UserUncheckedCreateWithoutPremiumProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPremiumProfileInput
    upsert?: UserUpsertWithoutPremiumProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPremiumProfileInput, UserUpdateWithoutPremiumProfileInput>, UserUncheckedUpdateWithoutPremiumProfileInput>
  }

  export type AdminNoteCreateNestedManyWithoutUserInput = {
    create?: XOR<AdminNoteCreateWithoutUserInput, AdminNoteUncheckedCreateWithoutUserInput> | AdminNoteCreateWithoutUserInput[] | AdminNoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdminNoteCreateOrConnectWithoutUserInput | AdminNoteCreateOrConnectWithoutUserInput[]
    createMany?: AdminNoteCreateManyUserInputEnvelope
    connect?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
  }

  export type FeatureAccessCreateNestedManyWithoutUserInput = {
    create?: XOR<FeatureAccessCreateWithoutUserInput, FeatureAccessUncheckedCreateWithoutUserInput> | FeatureAccessCreateWithoutUserInput[] | FeatureAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureAccessCreateOrConnectWithoutUserInput | FeatureAccessCreateOrConnectWithoutUserInput[]
    createMany?: FeatureAccessCreateManyUserInputEnvelope
    connect?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
  }

  export type PremiumProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<PremiumProfileCreateWithoutUserInput, PremiumProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PremiumProfileCreateOrConnectWithoutUserInput
    connect?: PremiumProfileWhereUniqueInput
  }

  export type UserCoinCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCoinCreateWithoutUserInput, UserCoinUncheckedCreateWithoutUserInput> | UserCoinCreateWithoutUserInput[] | UserCoinUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCoinCreateOrConnectWithoutUserInput | UserCoinCreateOrConnectWithoutUserInput[]
    createMany?: UserCoinCreateManyUserInputEnvelope
    connect?: UserCoinWhereUniqueInput | UserCoinWhereUniqueInput[]
  }

  export type UserNotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<UserNotificationCreateWithoutUserInput, UserNotificationUncheckedCreateWithoutUserInput> | UserNotificationCreateWithoutUserInput[] | UserNotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNotificationCreateOrConnectWithoutUserInput | UserNotificationCreateOrConnectWithoutUserInput[]
    createMany?: UserNotificationCreateManyUserInputEnvelope
    connect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
  }

  export type UserPreferencesCreateNestedOneWithoutUserInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    connect?: UserPreferencesWhereUniqueInput
  }

  export type UserQuestCreateNestedManyWithoutUserInput = {
    create?: XOR<UserQuestCreateWithoutUserInput, UserQuestUncheckedCreateWithoutUserInput> | UserQuestCreateWithoutUserInput[] | UserQuestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestCreateOrConnectWithoutUserInput | UserQuestCreateOrConnectWithoutUserInput[]
    createMany?: UserQuestCreateManyUserInputEnvelope
    connect?: UserQuestWhereUniqueInput | UserQuestWhereUniqueInput[]
  }

  export type UserRewardCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput> | UserRewardCreateWithoutUserInput[] | UserRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRewardCreateOrConnectWithoutUserInput | UserRewardCreateOrConnectWithoutUserInput[]
    createMany?: UserRewardCreateManyUserInputEnvelope
    connect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
  }

  export type UserStatsCreateNestedOneWithoutUserInput = {
    create?: XOR<UserStatsCreateWithoutUserInput, UserStatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserStatsCreateOrConnectWithoutUserInput
    connect?: UserStatsWhereUniqueInput
  }

  export type AdminNoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AdminNoteCreateWithoutUserInput, AdminNoteUncheckedCreateWithoutUserInput> | AdminNoteCreateWithoutUserInput[] | AdminNoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdminNoteCreateOrConnectWithoutUserInput | AdminNoteCreateOrConnectWithoutUserInput[]
    createMany?: AdminNoteCreateManyUserInputEnvelope
    connect?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
  }

  export type FeatureAccessUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeatureAccessCreateWithoutUserInput, FeatureAccessUncheckedCreateWithoutUserInput> | FeatureAccessCreateWithoutUserInput[] | FeatureAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureAccessCreateOrConnectWithoutUserInput | FeatureAccessCreateOrConnectWithoutUserInput[]
    createMany?: FeatureAccessCreateManyUserInputEnvelope
    connect?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
  }

  export type PremiumProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PremiumProfileCreateWithoutUserInput, PremiumProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PremiumProfileCreateOrConnectWithoutUserInput
    connect?: PremiumProfileWhereUniqueInput
  }

  export type UserCoinUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCoinCreateWithoutUserInput, UserCoinUncheckedCreateWithoutUserInput> | UserCoinCreateWithoutUserInput[] | UserCoinUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCoinCreateOrConnectWithoutUserInput | UserCoinCreateOrConnectWithoutUserInput[]
    createMany?: UserCoinCreateManyUserInputEnvelope
    connect?: UserCoinWhereUniqueInput | UserCoinWhereUniqueInput[]
  }

  export type UserNotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserNotificationCreateWithoutUserInput, UserNotificationUncheckedCreateWithoutUserInput> | UserNotificationCreateWithoutUserInput[] | UserNotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNotificationCreateOrConnectWithoutUserInput | UserNotificationCreateOrConnectWithoutUserInput[]
    createMany?: UserNotificationCreateManyUserInputEnvelope
    connect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
  }

  export type UserPreferencesUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    connect?: UserPreferencesWhereUniqueInput
  }

  export type UserQuestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserQuestCreateWithoutUserInput, UserQuestUncheckedCreateWithoutUserInput> | UserQuestCreateWithoutUserInput[] | UserQuestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestCreateOrConnectWithoutUserInput | UserQuestCreateOrConnectWithoutUserInput[]
    createMany?: UserQuestCreateManyUserInputEnvelope
    connect?: UserQuestWhereUniqueInput | UserQuestWhereUniqueInput[]
  }

  export type UserRewardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput> | UserRewardCreateWithoutUserInput[] | UserRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRewardCreateOrConnectWithoutUserInput | UserRewardCreateOrConnectWithoutUserInput[]
    createMany?: UserRewardCreateManyUserInputEnvelope
    connect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
  }

  export type UserStatsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserStatsCreateWithoutUserInput, UserStatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserStatsCreateOrConnectWithoutUserInput
    connect?: UserStatsWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type AdminNoteUpdateManyWithoutUserNestedInput = {
    create?: XOR<AdminNoteCreateWithoutUserInput, AdminNoteUncheckedCreateWithoutUserInput> | AdminNoteCreateWithoutUserInput[] | AdminNoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdminNoteCreateOrConnectWithoutUserInput | AdminNoteCreateOrConnectWithoutUserInput[]
    upsert?: AdminNoteUpsertWithWhereUniqueWithoutUserInput | AdminNoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AdminNoteCreateManyUserInputEnvelope
    set?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    disconnect?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    delete?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    connect?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    update?: AdminNoteUpdateWithWhereUniqueWithoutUserInput | AdminNoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AdminNoteUpdateManyWithWhereWithoutUserInput | AdminNoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AdminNoteScalarWhereInput | AdminNoteScalarWhereInput[]
  }

  export type FeatureAccessUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeatureAccessCreateWithoutUserInput, FeatureAccessUncheckedCreateWithoutUserInput> | FeatureAccessCreateWithoutUserInput[] | FeatureAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureAccessCreateOrConnectWithoutUserInput | FeatureAccessCreateOrConnectWithoutUserInput[]
    upsert?: FeatureAccessUpsertWithWhereUniqueWithoutUserInput | FeatureAccessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeatureAccessCreateManyUserInputEnvelope
    set?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    disconnect?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    delete?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    connect?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    update?: FeatureAccessUpdateWithWhereUniqueWithoutUserInput | FeatureAccessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeatureAccessUpdateManyWithWhereWithoutUserInput | FeatureAccessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeatureAccessScalarWhereInput | FeatureAccessScalarWhereInput[]
  }

  export type PremiumProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<PremiumProfileCreateWithoutUserInput, PremiumProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PremiumProfileCreateOrConnectWithoutUserInput
    upsert?: PremiumProfileUpsertWithoutUserInput
    disconnect?: PremiumProfileWhereInput | boolean
    delete?: PremiumProfileWhereInput | boolean
    connect?: PremiumProfileWhereUniqueInput
    update?: XOR<XOR<PremiumProfileUpdateToOneWithWhereWithoutUserInput, PremiumProfileUpdateWithoutUserInput>, PremiumProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserCoinUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCoinCreateWithoutUserInput, UserCoinUncheckedCreateWithoutUserInput> | UserCoinCreateWithoutUserInput[] | UserCoinUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCoinCreateOrConnectWithoutUserInput | UserCoinCreateOrConnectWithoutUserInput[]
    upsert?: UserCoinUpsertWithWhereUniqueWithoutUserInput | UserCoinUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCoinCreateManyUserInputEnvelope
    set?: UserCoinWhereUniqueInput | UserCoinWhereUniqueInput[]
    disconnect?: UserCoinWhereUniqueInput | UserCoinWhereUniqueInput[]
    delete?: UserCoinWhereUniqueInput | UserCoinWhereUniqueInput[]
    connect?: UserCoinWhereUniqueInput | UserCoinWhereUniqueInput[]
    update?: UserCoinUpdateWithWhereUniqueWithoutUserInput | UserCoinUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCoinUpdateManyWithWhereWithoutUserInput | UserCoinUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCoinScalarWhereInput | UserCoinScalarWhereInput[]
  }

  export type UserNotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserNotificationCreateWithoutUserInput, UserNotificationUncheckedCreateWithoutUserInput> | UserNotificationCreateWithoutUserInput[] | UserNotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNotificationCreateOrConnectWithoutUserInput | UserNotificationCreateOrConnectWithoutUserInput[]
    upsert?: UserNotificationUpsertWithWhereUniqueWithoutUserInput | UserNotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserNotificationCreateManyUserInputEnvelope
    set?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    disconnect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    delete?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    connect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    update?: UserNotificationUpdateWithWhereUniqueWithoutUserInput | UserNotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserNotificationUpdateManyWithWhereWithoutUserInput | UserNotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserNotificationScalarWhereInput | UserNotificationScalarWhereInput[]
  }

  export type UserPreferencesUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    upsert?: UserPreferencesUpsertWithoutUserInput
    disconnect?: UserPreferencesWhereInput | boolean
    delete?: UserPreferencesWhereInput | boolean
    connect?: UserPreferencesWhereUniqueInput
    update?: XOR<XOR<UserPreferencesUpdateToOneWithWhereWithoutUserInput, UserPreferencesUpdateWithoutUserInput>, UserPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type UserQuestUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserQuestCreateWithoutUserInput, UserQuestUncheckedCreateWithoutUserInput> | UserQuestCreateWithoutUserInput[] | UserQuestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestCreateOrConnectWithoutUserInput | UserQuestCreateOrConnectWithoutUserInput[]
    upsert?: UserQuestUpsertWithWhereUniqueWithoutUserInput | UserQuestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserQuestCreateManyUserInputEnvelope
    set?: UserQuestWhereUniqueInput | UserQuestWhereUniqueInput[]
    disconnect?: UserQuestWhereUniqueInput | UserQuestWhereUniqueInput[]
    delete?: UserQuestWhereUniqueInput | UserQuestWhereUniqueInput[]
    connect?: UserQuestWhereUniqueInput | UserQuestWhereUniqueInput[]
    update?: UserQuestUpdateWithWhereUniqueWithoutUserInput | UserQuestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserQuestUpdateManyWithWhereWithoutUserInput | UserQuestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserQuestScalarWhereInput | UserQuestScalarWhereInput[]
  }

  export type UserRewardUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput> | UserRewardCreateWithoutUserInput[] | UserRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRewardCreateOrConnectWithoutUserInput | UserRewardCreateOrConnectWithoutUserInput[]
    upsert?: UserRewardUpsertWithWhereUniqueWithoutUserInput | UserRewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRewardCreateManyUserInputEnvelope
    set?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    disconnect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    delete?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    connect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    update?: UserRewardUpdateWithWhereUniqueWithoutUserInput | UserRewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRewardUpdateManyWithWhereWithoutUserInput | UserRewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRewardScalarWhereInput | UserRewardScalarWhereInput[]
  }

  export type UserStatsUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserStatsCreateWithoutUserInput, UserStatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserStatsCreateOrConnectWithoutUserInput
    upsert?: UserStatsUpsertWithoutUserInput
    disconnect?: UserStatsWhereInput | boolean
    delete?: UserStatsWhereInput | boolean
    connect?: UserStatsWhereUniqueInput
    update?: XOR<XOR<UserStatsUpdateToOneWithWhereWithoutUserInput, UserStatsUpdateWithoutUserInput>, UserStatsUncheckedUpdateWithoutUserInput>
  }

  export type AdminNoteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AdminNoteCreateWithoutUserInput, AdminNoteUncheckedCreateWithoutUserInput> | AdminNoteCreateWithoutUserInput[] | AdminNoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdminNoteCreateOrConnectWithoutUserInput | AdminNoteCreateOrConnectWithoutUserInput[]
    upsert?: AdminNoteUpsertWithWhereUniqueWithoutUserInput | AdminNoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AdminNoteCreateManyUserInputEnvelope
    set?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    disconnect?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    delete?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    connect?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    update?: AdminNoteUpdateWithWhereUniqueWithoutUserInput | AdminNoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AdminNoteUpdateManyWithWhereWithoutUserInput | AdminNoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AdminNoteScalarWhereInput | AdminNoteScalarWhereInput[]
  }

  export type FeatureAccessUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeatureAccessCreateWithoutUserInput, FeatureAccessUncheckedCreateWithoutUserInput> | FeatureAccessCreateWithoutUserInput[] | FeatureAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeatureAccessCreateOrConnectWithoutUserInput | FeatureAccessCreateOrConnectWithoutUserInput[]
    upsert?: FeatureAccessUpsertWithWhereUniqueWithoutUserInput | FeatureAccessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeatureAccessCreateManyUserInputEnvelope
    set?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    disconnect?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    delete?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    connect?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    update?: FeatureAccessUpdateWithWhereUniqueWithoutUserInput | FeatureAccessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeatureAccessUpdateManyWithWhereWithoutUserInput | FeatureAccessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeatureAccessScalarWhereInput | FeatureAccessScalarWhereInput[]
  }

  export type PremiumProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PremiumProfileCreateWithoutUserInput, PremiumProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: PremiumProfileCreateOrConnectWithoutUserInput
    upsert?: PremiumProfileUpsertWithoutUserInput
    disconnect?: PremiumProfileWhereInput | boolean
    delete?: PremiumProfileWhereInput | boolean
    connect?: PremiumProfileWhereUniqueInput
    update?: XOR<XOR<PremiumProfileUpdateToOneWithWhereWithoutUserInput, PremiumProfileUpdateWithoutUserInput>, PremiumProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserCoinUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCoinCreateWithoutUserInput, UserCoinUncheckedCreateWithoutUserInput> | UserCoinCreateWithoutUserInput[] | UserCoinUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCoinCreateOrConnectWithoutUserInput | UserCoinCreateOrConnectWithoutUserInput[]
    upsert?: UserCoinUpsertWithWhereUniqueWithoutUserInput | UserCoinUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCoinCreateManyUserInputEnvelope
    set?: UserCoinWhereUniqueInput | UserCoinWhereUniqueInput[]
    disconnect?: UserCoinWhereUniqueInput | UserCoinWhereUniqueInput[]
    delete?: UserCoinWhereUniqueInput | UserCoinWhereUniqueInput[]
    connect?: UserCoinWhereUniqueInput | UserCoinWhereUniqueInput[]
    update?: UserCoinUpdateWithWhereUniqueWithoutUserInput | UserCoinUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCoinUpdateManyWithWhereWithoutUserInput | UserCoinUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCoinScalarWhereInput | UserCoinScalarWhereInput[]
  }

  export type UserNotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserNotificationCreateWithoutUserInput, UserNotificationUncheckedCreateWithoutUserInput> | UserNotificationCreateWithoutUserInput[] | UserNotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNotificationCreateOrConnectWithoutUserInput | UserNotificationCreateOrConnectWithoutUserInput[]
    upsert?: UserNotificationUpsertWithWhereUniqueWithoutUserInput | UserNotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserNotificationCreateManyUserInputEnvelope
    set?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    disconnect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    delete?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    connect?: UserNotificationWhereUniqueInput | UserNotificationWhereUniqueInput[]
    update?: UserNotificationUpdateWithWhereUniqueWithoutUserInput | UserNotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserNotificationUpdateManyWithWhereWithoutUserInput | UserNotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserNotificationScalarWhereInput | UserNotificationScalarWhereInput[]
  }

  export type UserPreferencesUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    upsert?: UserPreferencesUpsertWithoutUserInput
    disconnect?: UserPreferencesWhereInput | boolean
    delete?: UserPreferencesWhereInput | boolean
    connect?: UserPreferencesWhereUniqueInput
    update?: XOR<XOR<UserPreferencesUpdateToOneWithWhereWithoutUserInput, UserPreferencesUpdateWithoutUserInput>, UserPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type UserQuestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserQuestCreateWithoutUserInput, UserQuestUncheckedCreateWithoutUserInput> | UserQuestCreateWithoutUserInput[] | UserQuestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestCreateOrConnectWithoutUserInput | UserQuestCreateOrConnectWithoutUserInput[]
    upsert?: UserQuestUpsertWithWhereUniqueWithoutUserInput | UserQuestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserQuestCreateManyUserInputEnvelope
    set?: UserQuestWhereUniqueInput | UserQuestWhereUniqueInput[]
    disconnect?: UserQuestWhereUniqueInput | UserQuestWhereUniqueInput[]
    delete?: UserQuestWhereUniqueInput | UserQuestWhereUniqueInput[]
    connect?: UserQuestWhereUniqueInput | UserQuestWhereUniqueInput[]
    update?: UserQuestUpdateWithWhereUniqueWithoutUserInput | UserQuestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserQuestUpdateManyWithWhereWithoutUserInput | UserQuestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserQuestScalarWhereInput | UserQuestScalarWhereInput[]
  }

  export type UserRewardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput> | UserRewardCreateWithoutUserInput[] | UserRewardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRewardCreateOrConnectWithoutUserInput | UserRewardCreateOrConnectWithoutUserInput[]
    upsert?: UserRewardUpsertWithWhereUniqueWithoutUserInput | UserRewardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRewardCreateManyUserInputEnvelope
    set?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    disconnect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    delete?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    connect?: UserRewardWhereUniqueInput | UserRewardWhereUniqueInput[]
    update?: UserRewardUpdateWithWhereUniqueWithoutUserInput | UserRewardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRewardUpdateManyWithWhereWithoutUserInput | UserRewardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRewardScalarWhereInput | UserRewardScalarWhereInput[]
  }

  export type UserStatsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserStatsCreateWithoutUserInput, UserStatsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserStatsCreateOrConnectWithoutUserInput
    upsert?: UserStatsUpsertWithoutUserInput
    disconnect?: UserStatsWhereInput | boolean
    delete?: UserStatsWhereInput | boolean
    connect?: UserStatsWhereUniqueInput
    update?: XOR<XOR<UserStatsUpdateToOneWithWhereWithoutUserInput, UserStatsUpdateWithoutUserInput>, UserStatsUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutPreferencesInput = {
    create?: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumPrivacyLevelFieldUpdateOperationsInput = {
    set?: $Enums.PrivacyLevel
  }

  export type UserUpdateOneRequiredWithoutPreferencesNestedInput = {
    create?: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreferencesInput
    upsert?: UserUpsertWithoutPreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPreferencesInput, UserUpdateWithoutPreferencesInput>, UserUncheckedUpdateWithoutPreferencesInput>
  }

  export type UserCreateNestedOneWithoutUserStatsInput = {
    create?: XOR<UserCreateWithoutUserStatsInput, UserUncheckedCreateWithoutUserStatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserStatsInput
    connect?: UserWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserUpdateOneRequiredWithoutUserStatsNestedInput = {
    create?: XOR<UserCreateWithoutUserStatsInput, UserUncheckedCreateWithoutUserStatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserStatsInput
    upsert?: UserUpsertWithoutUserStatsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserStatsInput, UserUpdateWithoutUserStatsInput>, UserUncheckedUpdateWithoutUserStatsInput>
  }

  export type UserCreateNestedOneWithoutUserRewardsInput = {
    create?: XOR<UserCreateWithoutUserRewardsInput, UserUncheckedCreateWithoutUserRewardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRewardsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRewardTypeFieldUpdateOperationsInput = {
    set?: $Enums.RewardType
  }

  export type EnumRewardStatusFieldUpdateOperationsInput = {
    set?: $Enums.RewardStatus
  }

  export type EnumRewardSourceTypeFieldUpdateOperationsInput = {
    set?: $Enums.RewardSourceType
  }

  export type UserUpdateOneRequiredWithoutUserRewardsNestedInput = {
    create?: XOR<UserCreateWithoutUserRewardsInput, UserUncheckedCreateWithoutUserRewardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRewardsInput
    upsert?: UserUpsertWithoutUserRewardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserRewardsInput, UserUpdateWithoutUserRewardsInput>, UserUncheckedUpdateWithoutUserRewardsInput>
  }

  export type UserCreateNestedOneWithoutUserQuestsInput = {
    create?: XOR<UserCreateWithoutUserQuestsInput, UserUncheckedCreateWithoutUserQuestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserQuestsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumQuestTypeFieldUpdateOperationsInput = {
    set?: $Enums.QuestType
  }

  export type EnumQuestStatusFieldUpdateOperationsInput = {
    set?: $Enums.QuestStatus
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserUpdateOneRequiredWithoutUserQuestsNestedInput = {
    create?: XOR<UserCreateWithoutUserQuestsInput, UserUncheckedCreateWithoutUserQuestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserQuestsInput
    upsert?: UserUpsertWithoutUserQuestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserQuestsInput, UserUpdateWithoutUserQuestsInput>, UserUncheckedUpdateWithoutUserQuestsInput>
  }

  export type UserCreateNestedOneWithoutUserCoinsInput = {
    create?: XOR<UserCreateWithoutUserCoinsInput, UserUncheckedCreateWithoutUserCoinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserCoinsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumCoinTypeFieldUpdateOperationsInput = {
    set?: $Enums.CoinType
  }

  export type EnumCoinSourceTypeFieldUpdateOperationsInput = {
    set?: $Enums.CoinSourceType
  }

  export type UserUpdateOneRequiredWithoutUserCoinsNestedInput = {
    create?: XOR<UserCreateWithoutUserCoinsInput, UserUncheckedCreateWithoutUserCoinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserCoinsInput
    upsert?: UserUpsertWithoutUserCoinsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserCoinsInput, UserUpdateWithoutUserCoinsInput>, UserUncheckedUpdateWithoutUserCoinsInput>
  }

  export type UserCreateNestedOneWithoutUserNotificationsInput = {
    create?: XOR<UserCreateWithoutUserNotificationsInput, UserUncheckedCreateWithoutUserNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type EnumNotificationPriorityFieldUpdateOperationsInput = {
    set?: $Enums.NotificationPriority
  }

  export type UserUpdateOneRequiredWithoutUserNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutUserNotificationsInput, UserUncheckedCreateWithoutUserNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserNotificationsInput
    upsert?: UserUpsertWithoutUserNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserNotificationsInput, UserUpdateWithoutUserNotificationsInput>, UserUncheckedUpdateWithoutUserNotificationsInput>
  }

  export type AdminActionCreateNestedManyWithoutAdminUserInput = {
    create?: XOR<AdminActionCreateWithoutAdminUserInput, AdminActionUncheckedCreateWithoutAdminUserInput> | AdminActionCreateWithoutAdminUserInput[] | AdminActionUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminActionCreateOrConnectWithoutAdminUserInput | AdminActionCreateOrConnectWithoutAdminUserInput[]
    createMany?: AdminActionCreateManyAdminUserInputEnvelope
    connect?: AdminActionWhereUniqueInput | AdminActionWhereUniqueInput[]
  }

  export type AdminNoteCreateNestedManyWithoutAdminUserInput = {
    create?: XOR<AdminNoteCreateWithoutAdminUserInput, AdminNoteUncheckedCreateWithoutAdminUserInput> | AdminNoteCreateWithoutAdminUserInput[] | AdminNoteUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminNoteCreateOrConnectWithoutAdminUserInput | AdminNoteCreateOrConnectWithoutAdminUserInput[]
    createMany?: AdminNoteCreateManyAdminUserInputEnvelope
    connect?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
  }

  export type AdminPermissionCreateNestedManyWithoutAdminUserInput = {
    create?: XOR<AdminPermissionCreateWithoutAdminUserInput, AdminPermissionUncheckedCreateWithoutAdminUserInput> | AdminPermissionCreateWithoutAdminUserInput[] | AdminPermissionUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminPermissionCreateOrConnectWithoutAdminUserInput | AdminPermissionCreateOrConnectWithoutAdminUserInput[]
    createMany?: AdminPermissionCreateManyAdminUserInputEnvelope
    connect?: AdminPermissionWhereUniqueInput | AdminPermissionWhereUniqueInput[]
  }

  export type AdminActionUncheckedCreateNestedManyWithoutAdminUserInput = {
    create?: XOR<AdminActionCreateWithoutAdminUserInput, AdminActionUncheckedCreateWithoutAdminUserInput> | AdminActionCreateWithoutAdminUserInput[] | AdminActionUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminActionCreateOrConnectWithoutAdminUserInput | AdminActionCreateOrConnectWithoutAdminUserInput[]
    createMany?: AdminActionCreateManyAdminUserInputEnvelope
    connect?: AdminActionWhereUniqueInput | AdminActionWhereUniqueInput[]
  }

  export type AdminNoteUncheckedCreateNestedManyWithoutAdminUserInput = {
    create?: XOR<AdminNoteCreateWithoutAdminUserInput, AdminNoteUncheckedCreateWithoutAdminUserInput> | AdminNoteCreateWithoutAdminUserInput[] | AdminNoteUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminNoteCreateOrConnectWithoutAdminUserInput | AdminNoteCreateOrConnectWithoutAdminUserInput[]
    createMany?: AdminNoteCreateManyAdminUserInputEnvelope
    connect?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
  }

  export type AdminPermissionUncheckedCreateNestedManyWithoutAdminUserInput = {
    create?: XOR<AdminPermissionCreateWithoutAdminUserInput, AdminPermissionUncheckedCreateWithoutAdminUserInput> | AdminPermissionCreateWithoutAdminUserInput[] | AdminPermissionUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminPermissionCreateOrConnectWithoutAdminUserInput | AdminPermissionCreateOrConnectWithoutAdminUserInput[]
    createMany?: AdminPermissionCreateManyAdminUserInputEnvelope
    connect?: AdminPermissionWhereUniqueInput | AdminPermissionWhereUniqueInput[]
  }

  export type EnumAdminRoleFieldUpdateOperationsInput = {
    set?: $Enums.AdminRole
  }

  export type AdminActionUpdateManyWithoutAdminUserNestedInput = {
    create?: XOR<AdminActionCreateWithoutAdminUserInput, AdminActionUncheckedCreateWithoutAdminUserInput> | AdminActionCreateWithoutAdminUserInput[] | AdminActionUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminActionCreateOrConnectWithoutAdminUserInput | AdminActionCreateOrConnectWithoutAdminUserInput[]
    upsert?: AdminActionUpsertWithWhereUniqueWithoutAdminUserInput | AdminActionUpsertWithWhereUniqueWithoutAdminUserInput[]
    createMany?: AdminActionCreateManyAdminUserInputEnvelope
    set?: AdminActionWhereUniqueInput | AdminActionWhereUniqueInput[]
    disconnect?: AdminActionWhereUniqueInput | AdminActionWhereUniqueInput[]
    delete?: AdminActionWhereUniqueInput | AdminActionWhereUniqueInput[]
    connect?: AdminActionWhereUniqueInput | AdminActionWhereUniqueInput[]
    update?: AdminActionUpdateWithWhereUniqueWithoutAdminUserInput | AdminActionUpdateWithWhereUniqueWithoutAdminUserInput[]
    updateMany?: AdminActionUpdateManyWithWhereWithoutAdminUserInput | AdminActionUpdateManyWithWhereWithoutAdminUserInput[]
    deleteMany?: AdminActionScalarWhereInput | AdminActionScalarWhereInput[]
  }

  export type AdminNoteUpdateManyWithoutAdminUserNestedInput = {
    create?: XOR<AdminNoteCreateWithoutAdminUserInput, AdminNoteUncheckedCreateWithoutAdminUserInput> | AdminNoteCreateWithoutAdminUserInput[] | AdminNoteUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminNoteCreateOrConnectWithoutAdminUserInput | AdminNoteCreateOrConnectWithoutAdminUserInput[]
    upsert?: AdminNoteUpsertWithWhereUniqueWithoutAdminUserInput | AdminNoteUpsertWithWhereUniqueWithoutAdminUserInput[]
    createMany?: AdminNoteCreateManyAdminUserInputEnvelope
    set?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    disconnect?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    delete?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    connect?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    update?: AdminNoteUpdateWithWhereUniqueWithoutAdminUserInput | AdminNoteUpdateWithWhereUniqueWithoutAdminUserInput[]
    updateMany?: AdminNoteUpdateManyWithWhereWithoutAdminUserInput | AdminNoteUpdateManyWithWhereWithoutAdminUserInput[]
    deleteMany?: AdminNoteScalarWhereInput | AdminNoteScalarWhereInput[]
  }

  export type AdminPermissionUpdateManyWithoutAdminUserNestedInput = {
    create?: XOR<AdminPermissionCreateWithoutAdminUserInput, AdminPermissionUncheckedCreateWithoutAdminUserInput> | AdminPermissionCreateWithoutAdminUserInput[] | AdminPermissionUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminPermissionCreateOrConnectWithoutAdminUserInput | AdminPermissionCreateOrConnectWithoutAdminUserInput[]
    upsert?: AdminPermissionUpsertWithWhereUniqueWithoutAdminUserInput | AdminPermissionUpsertWithWhereUniqueWithoutAdminUserInput[]
    createMany?: AdminPermissionCreateManyAdminUserInputEnvelope
    set?: AdminPermissionWhereUniqueInput | AdminPermissionWhereUniqueInput[]
    disconnect?: AdminPermissionWhereUniqueInput | AdminPermissionWhereUniqueInput[]
    delete?: AdminPermissionWhereUniqueInput | AdminPermissionWhereUniqueInput[]
    connect?: AdminPermissionWhereUniqueInput | AdminPermissionWhereUniqueInput[]
    update?: AdminPermissionUpdateWithWhereUniqueWithoutAdminUserInput | AdminPermissionUpdateWithWhereUniqueWithoutAdminUserInput[]
    updateMany?: AdminPermissionUpdateManyWithWhereWithoutAdminUserInput | AdminPermissionUpdateManyWithWhereWithoutAdminUserInput[]
    deleteMany?: AdminPermissionScalarWhereInput | AdminPermissionScalarWhereInput[]
  }

  export type AdminActionUncheckedUpdateManyWithoutAdminUserNestedInput = {
    create?: XOR<AdminActionCreateWithoutAdminUserInput, AdminActionUncheckedCreateWithoutAdminUserInput> | AdminActionCreateWithoutAdminUserInput[] | AdminActionUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminActionCreateOrConnectWithoutAdminUserInput | AdminActionCreateOrConnectWithoutAdminUserInput[]
    upsert?: AdminActionUpsertWithWhereUniqueWithoutAdminUserInput | AdminActionUpsertWithWhereUniqueWithoutAdminUserInput[]
    createMany?: AdminActionCreateManyAdminUserInputEnvelope
    set?: AdminActionWhereUniqueInput | AdminActionWhereUniqueInput[]
    disconnect?: AdminActionWhereUniqueInput | AdminActionWhereUniqueInput[]
    delete?: AdminActionWhereUniqueInput | AdminActionWhereUniqueInput[]
    connect?: AdminActionWhereUniqueInput | AdminActionWhereUniqueInput[]
    update?: AdminActionUpdateWithWhereUniqueWithoutAdminUserInput | AdminActionUpdateWithWhereUniqueWithoutAdminUserInput[]
    updateMany?: AdminActionUpdateManyWithWhereWithoutAdminUserInput | AdminActionUpdateManyWithWhereWithoutAdminUserInput[]
    deleteMany?: AdminActionScalarWhereInput | AdminActionScalarWhereInput[]
  }

  export type AdminNoteUncheckedUpdateManyWithoutAdminUserNestedInput = {
    create?: XOR<AdminNoteCreateWithoutAdminUserInput, AdminNoteUncheckedCreateWithoutAdminUserInput> | AdminNoteCreateWithoutAdminUserInput[] | AdminNoteUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminNoteCreateOrConnectWithoutAdminUserInput | AdminNoteCreateOrConnectWithoutAdminUserInput[]
    upsert?: AdminNoteUpsertWithWhereUniqueWithoutAdminUserInput | AdminNoteUpsertWithWhereUniqueWithoutAdminUserInput[]
    createMany?: AdminNoteCreateManyAdminUserInputEnvelope
    set?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    disconnect?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    delete?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    connect?: AdminNoteWhereUniqueInput | AdminNoteWhereUniqueInput[]
    update?: AdminNoteUpdateWithWhereUniqueWithoutAdminUserInput | AdminNoteUpdateWithWhereUniqueWithoutAdminUserInput[]
    updateMany?: AdminNoteUpdateManyWithWhereWithoutAdminUserInput | AdminNoteUpdateManyWithWhereWithoutAdminUserInput[]
    deleteMany?: AdminNoteScalarWhereInput | AdminNoteScalarWhereInput[]
  }

  export type AdminPermissionUncheckedUpdateManyWithoutAdminUserNestedInput = {
    create?: XOR<AdminPermissionCreateWithoutAdminUserInput, AdminPermissionUncheckedCreateWithoutAdminUserInput> | AdminPermissionCreateWithoutAdminUserInput[] | AdminPermissionUncheckedCreateWithoutAdminUserInput[]
    connectOrCreate?: AdminPermissionCreateOrConnectWithoutAdminUserInput | AdminPermissionCreateOrConnectWithoutAdminUserInput[]
    upsert?: AdminPermissionUpsertWithWhereUniqueWithoutAdminUserInput | AdminPermissionUpsertWithWhereUniqueWithoutAdminUserInput[]
    createMany?: AdminPermissionCreateManyAdminUserInputEnvelope
    set?: AdminPermissionWhereUniqueInput | AdminPermissionWhereUniqueInput[]
    disconnect?: AdminPermissionWhereUniqueInput | AdminPermissionWhereUniqueInput[]
    delete?: AdminPermissionWhereUniqueInput | AdminPermissionWhereUniqueInput[]
    connect?: AdminPermissionWhereUniqueInput | AdminPermissionWhereUniqueInput[]
    update?: AdminPermissionUpdateWithWhereUniqueWithoutAdminUserInput | AdminPermissionUpdateWithWhereUniqueWithoutAdminUserInput[]
    updateMany?: AdminPermissionUpdateManyWithWhereWithoutAdminUserInput | AdminPermissionUpdateManyWithWhereWithoutAdminUserInput[]
    deleteMany?: AdminPermissionScalarWhereInput | AdminPermissionScalarWhereInput[]
  }

  export type AdminUserCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<AdminUserCreateWithoutPermissionsInput, AdminUserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: AdminUserCreateOrConnectWithoutPermissionsInput
    connect?: AdminUserWhereUniqueInput
  }

  export type AdminUserUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<AdminUserCreateWithoutPermissionsInput, AdminUserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: AdminUserCreateOrConnectWithoutPermissionsInput
    upsert?: AdminUserUpsertWithoutPermissionsInput
    connect?: AdminUserWhereUniqueInput
    update?: XOR<XOR<AdminUserUpdateToOneWithWhereWithoutPermissionsInput, AdminUserUpdateWithoutPermissionsInput>, AdminUserUncheckedUpdateWithoutPermissionsInput>
  }

  export type AdminUserCreateNestedOneWithoutAdminActionsInput = {
    create?: XOR<AdminUserCreateWithoutAdminActionsInput, AdminUserUncheckedCreateWithoutAdminActionsInput>
    connectOrCreate?: AdminUserCreateOrConnectWithoutAdminActionsInput
    connect?: AdminUserWhereUniqueInput
  }

  export type EnumAdminActionTypeFieldUpdateOperationsInput = {
    set?: $Enums.AdminActionType
  }

  export type EnumAdminActionStatusFieldUpdateOperationsInput = {
    set?: $Enums.AdminActionStatus
  }

  export type AdminUserUpdateOneRequiredWithoutAdminActionsNestedInput = {
    create?: XOR<AdminUserCreateWithoutAdminActionsInput, AdminUserUncheckedCreateWithoutAdminActionsInput>
    connectOrCreate?: AdminUserCreateOrConnectWithoutAdminActionsInput
    upsert?: AdminUserUpsertWithoutAdminActionsInput
    connect?: AdminUserWhereUniqueInput
    update?: XOR<XOR<AdminUserUpdateToOneWithWhereWithoutAdminActionsInput, AdminUserUpdateWithoutAdminActionsInput>, AdminUserUncheckedUpdateWithoutAdminActionsInput>
  }

  export type AdminUserCreateNestedOneWithoutAdminNotesInput = {
    create?: XOR<AdminUserCreateWithoutAdminNotesInput, AdminUserUncheckedCreateWithoutAdminNotesInput>
    connectOrCreate?: AdminUserCreateOrConnectWithoutAdminNotesInput
    connect?: AdminUserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAdminNotesInput = {
    create?: XOR<UserCreateWithoutAdminNotesInput, UserUncheckedCreateWithoutAdminNotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminNotesInput
    connect?: UserWhereUniqueInput
  }

  export type AdminUserUpdateOneRequiredWithoutAdminNotesNestedInput = {
    create?: XOR<AdminUserCreateWithoutAdminNotesInput, AdminUserUncheckedCreateWithoutAdminNotesInput>
    connectOrCreate?: AdminUserCreateOrConnectWithoutAdminNotesInput
    upsert?: AdminUserUpsertWithoutAdminNotesInput
    connect?: AdminUserWhereUniqueInput
    update?: XOR<XOR<AdminUserUpdateToOneWithWhereWithoutAdminNotesInput, AdminUserUpdateWithoutAdminNotesInput>, AdminUserUncheckedUpdateWithoutAdminNotesInput>
  }

  export type UserUpdateOneRequiredWithoutAdminNotesNestedInput = {
    create?: XOR<UserCreateWithoutAdminNotesInput, UserUncheckedCreateWithoutAdminNotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminNotesInput
    upsert?: UserUpsertWithoutAdminNotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminNotesInput, UserUpdateWithoutAdminNotesInput>, UserUncheckedUpdateWithoutAdminNotesInput>
  }

  export type FeatureAccessCreateNestedManyWithoutFeatureInput = {
    create?: XOR<FeatureAccessCreateWithoutFeatureInput, FeatureAccessUncheckedCreateWithoutFeatureInput> | FeatureAccessCreateWithoutFeatureInput[] | FeatureAccessUncheckedCreateWithoutFeatureInput[]
    connectOrCreate?: FeatureAccessCreateOrConnectWithoutFeatureInput | FeatureAccessCreateOrConnectWithoutFeatureInput[]
    createMany?: FeatureAccessCreateManyFeatureInputEnvelope
    connect?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
  }

  export type FeatureAccessUncheckedCreateNestedManyWithoutFeatureInput = {
    create?: XOR<FeatureAccessCreateWithoutFeatureInput, FeatureAccessUncheckedCreateWithoutFeatureInput> | FeatureAccessCreateWithoutFeatureInput[] | FeatureAccessUncheckedCreateWithoutFeatureInput[]
    connectOrCreate?: FeatureAccessCreateOrConnectWithoutFeatureInput | FeatureAccessCreateOrConnectWithoutFeatureInput[]
    createMany?: FeatureAccessCreateManyFeatureInputEnvelope
    connect?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
  }

  export type FeatureAccessUpdateManyWithoutFeatureNestedInput = {
    create?: XOR<FeatureAccessCreateWithoutFeatureInput, FeatureAccessUncheckedCreateWithoutFeatureInput> | FeatureAccessCreateWithoutFeatureInput[] | FeatureAccessUncheckedCreateWithoutFeatureInput[]
    connectOrCreate?: FeatureAccessCreateOrConnectWithoutFeatureInput | FeatureAccessCreateOrConnectWithoutFeatureInput[]
    upsert?: FeatureAccessUpsertWithWhereUniqueWithoutFeatureInput | FeatureAccessUpsertWithWhereUniqueWithoutFeatureInput[]
    createMany?: FeatureAccessCreateManyFeatureInputEnvelope
    set?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    disconnect?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    delete?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    connect?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    update?: FeatureAccessUpdateWithWhereUniqueWithoutFeatureInput | FeatureAccessUpdateWithWhereUniqueWithoutFeatureInput[]
    updateMany?: FeatureAccessUpdateManyWithWhereWithoutFeatureInput | FeatureAccessUpdateManyWithWhereWithoutFeatureInput[]
    deleteMany?: FeatureAccessScalarWhereInput | FeatureAccessScalarWhereInput[]
  }

  export type FeatureAccessUncheckedUpdateManyWithoutFeatureNestedInput = {
    create?: XOR<FeatureAccessCreateWithoutFeatureInput, FeatureAccessUncheckedCreateWithoutFeatureInput> | FeatureAccessCreateWithoutFeatureInput[] | FeatureAccessUncheckedCreateWithoutFeatureInput[]
    connectOrCreate?: FeatureAccessCreateOrConnectWithoutFeatureInput | FeatureAccessCreateOrConnectWithoutFeatureInput[]
    upsert?: FeatureAccessUpsertWithWhereUniqueWithoutFeatureInput | FeatureAccessUpsertWithWhereUniqueWithoutFeatureInput[]
    createMany?: FeatureAccessCreateManyFeatureInputEnvelope
    set?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    disconnect?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    delete?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    connect?: FeatureAccessWhereUniqueInput | FeatureAccessWhereUniqueInput[]
    update?: FeatureAccessUpdateWithWhereUniqueWithoutFeatureInput | FeatureAccessUpdateWithWhereUniqueWithoutFeatureInput[]
    updateMany?: FeatureAccessUpdateManyWithWhereWithoutFeatureInput | FeatureAccessUpdateManyWithWhereWithoutFeatureInput[]
    deleteMany?: FeatureAccessScalarWhereInput | FeatureAccessScalarWhereInput[]
  }

  export type FeatureCreateNestedOneWithoutFeatureAccessesInput = {
    create?: XOR<FeatureCreateWithoutFeatureAccessesInput, FeatureUncheckedCreateWithoutFeatureAccessesInput>
    connectOrCreate?: FeatureCreateOrConnectWithoutFeatureAccessesInput
    connect?: FeatureWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFeatureAccessesInput = {
    create?: XOR<UserCreateWithoutFeatureAccessesInput, UserUncheckedCreateWithoutFeatureAccessesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeatureAccessesInput
    connect?: UserWhereUniqueInput
  }

  export type FeatureUpdateOneRequiredWithoutFeatureAccessesNestedInput = {
    create?: XOR<FeatureCreateWithoutFeatureAccessesInput, FeatureUncheckedCreateWithoutFeatureAccessesInput>
    connectOrCreate?: FeatureCreateOrConnectWithoutFeatureAccessesInput
    upsert?: FeatureUpsertWithoutFeatureAccessesInput
    connect?: FeatureWhereUniqueInput
    update?: XOR<XOR<FeatureUpdateToOneWithWhereWithoutFeatureAccessesInput, FeatureUpdateWithoutFeatureAccessesInput>, FeatureUncheckedUpdateWithoutFeatureAccessesInput>
  }

  export type UserUpdateOneRequiredWithoutFeatureAccessesNestedInput = {
    create?: XOR<UserCreateWithoutFeatureAccessesInput, UserUncheckedCreateWithoutFeatureAccessesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeatureAccessesInput
    upsert?: UserUpsertWithoutFeatureAccessesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeatureAccessesInput, UserUpdateWithoutFeatureAccessesInput>, UserUncheckedUpdateWithoutFeatureAccessesInput>
  }

  export type GameScreenshotCreateNestedManyWithoutGameInput = {
    create?: XOR<GameScreenshotCreateWithoutGameInput, GameScreenshotUncheckedCreateWithoutGameInput> | GameScreenshotCreateWithoutGameInput[] | GameScreenshotUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameScreenshotCreateOrConnectWithoutGameInput | GameScreenshotCreateOrConnectWithoutGameInput[]
    createMany?: GameScreenshotCreateManyGameInputEnvelope
    connect?: GameScreenshotWhereUniqueInput | GameScreenshotWhereUniqueInput[]
  }

  export type GameCategoryCreateNestedManyWithoutGamesInput = {
    create?: XOR<GameCategoryCreateWithoutGamesInput, GameCategoryUncheckedCreateWithoutGamesInput> | GameCategoryCreateWithoutGamesInput[] | GameCategoryUncheckedCreateWithoutGamesInput[]
    connectOrCreate?: GameCategoryCreateOrConnectWithoutGamesInput | GameCategoryCreateOrConnectWithoutGamesInput[]
    connect?: GameCategoryWhereUniqueInput | GameCategoryWhereUniqueInput[]
  }

  export type GameTagCreateNestedManyWithoutGameInput = {
    create?: XOR<GameTagCreateWithoutGameInput, GameTagUncheckedCreateWithoutGameInput> | GameTagCreateWithoutGameInput[] | GameTagUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameTagCreateOrConnectWithoutGameInput | GameTagCreateOrConnectWithoutGameInput[]
    connect?: GameTagWhereUniqueInput | GameTagWhereUniqueInput[]
  }

  export type GameScreenshotUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<GameScreenshotCreateWithoutGameInput, GameScreenshotUncheckedCreateWithoutGameInput> | GameScreenshotCreateWithoutGameInput[] | GameScreenshotUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameScreenshotCreateOrConnectWithoutGameInput | GameScreenshotCreateOrConnectWithoutGameInput[]
    createMany?: GameScreenshotCreateManyGameInputEnvelope
    connect?: GameScreenshotWhereUniqueInput | GameScreenshotWhereUniqueInput[]
  }

  export type GameCategoryUncheckedCreateNestedManyWithoutGamesInput = {
    create?: XOR<GameCategoryCreateWithoutGamesInput, GameCategoryUncheckedCreateWithoutGamesInput> | GameCategoryCreateWithoutGamesInput[] | GameCategoryUncheckedCreateWithoutGamesInput[]
    connectOrCreate?: GameCategoryCreateOrConnectWithoutGamesInput | GameCategoryCreateOrConnectWithoutGamesInput[]
    connect?: GameCategoryWhereUniqueInput | GameCategoryWhereUniqueInput[]
  }

  export type GameTagUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<GameTagCreateWithoutGameInput, GameTagUncheckedCreateWithoutGameInput> | GameTagCreateWithoutGameInput[] | GameTagUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameTagCreateOrConnectWithoutGameInput | GameTagCreateOrConnectWithoutGameInput[]
    connect?: GameTagWhereUniqueInput | GameTagWhereUniqueInput[]
  }

  export type EnumGameOrientationFieldUpdateOperationsInput = {
    set?: $Enums.GameOrientation
  }

  export type EnumGameStatusFieldUpdateOperationsInput = {
    set?: $Enums.GameStatus
  }

  export type GameScreenshotUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameScreenshotCreateWithoutGameInput, GameScreenshotUncheckedCreateWithoutGameInput> | GameScreenshotCreateWithoutGameInput[] | GameScreenshotUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameScreenshotCreateOrConnectWithoutGameInput | GameScreenshotCreateOrConnectWithoutGameInput[]
    upsert?: GameScreenshotUpsertWithWhereUniqueWithoutGameInput | GameScreenshotUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameScreenshotCreateManyGameInputEnvelope
    set?: GameScreenshotWhereUniqueInput | GameScreenshotWhereUniqueInput[]
    disconnect?: GameScreenshotWhereUniqueInput | GameScreenshotWhereUniqueInput[]
    delete?: GameScreenshotWhereUniqueInput | GameScreenshotWhereUniqueInput[]
    connect?: GameScreenshotWhereUniqueInput | GameScreenshotWhereUniqueInput[]
    update?: GameScreenshotUpdateWithWhereUniqueWithoutGameInput | GameScreenshotUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameScreenshotUpdateManyWithWhereWithoutGameInput | GameScreenshotUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameScreenshotScalarWhereInput | GameScreenshotScalarWhereInput[]
  }

  export type GameCategoryUpdateManyWithoutGamesNestedInput = {
    create?: XOR<GameCategoryCreateWithoutGamesInput, GameCategoryUncheckedCreateWithoutGamesInput> | GameCategoryCreateWithoutGamesInput[] | GameCategoryUncheckedCreateWithoutGamesInput[]
    connectOrCreate?: GameCategoryCreateOrConnectWithoutGamesInput | GameCategoryCreateOrConnectWithoutGamesInput[]
    upsert?: GameCategoryUpsertWithWhereUniqueWithoutGamesInput | GameCategoryUpsertWithWhereUniqueWithoutGamesInput[]
    set?: GameCategoryWhereUniqueInput | GameCategoryWhereUniqueInput[]
    disconnect?: GameCategoryWhereUniqueInput | GameCategoryWhereUniqueInput[]
    delete?: GameCategoryWhereUniqueInput | GameCategoryWhereUniqueInput[]
    connect?: GameCategoryWhereUniqueInput | GameCategoryWhereUniqueInput[]
    update?: GameCategoryUpdateWithWhereUniqueWithoutGamesInput | GameCategoryUpdateWithWhereUniqueWithoutGamesInput[]
    updateMany?: GameCategoryUpdateManyWithWhereWithoutGamesInput | GameCategoryUpdateManyWithWhereWithoutGamesInput[]
    deleteMany?: GameCategoryScalarWhereInput | GameCategoryScalarWhereInput[]
  }

  export type GameTagUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameTagCreateWithoutGameInput, GameTagUncheckedCreateWithoutGameInput> | GameTagCreateWithoutGameInput[] | GameTagUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameTagCreateOrConnectWithoutGameInput | GameTagCreateOrConnectWithoutGameInput[]
    upsert?: GameTagUpsertWithWhereUniqueWithoutGameInput | GameTagUpsertWithWhereUniqueWithoutGameInput[]
    set?: GameTagWhereUniqueInput | GameTagWhereUniqueInput[]
    disconnect?: GameTagWhereUniqueInput | GameTagWhereUniqueInput[]
    delete?: GameTagWhereUniqueInput | GameTagWhereUniqueInput[]
    connect?: GameTagWhereUniqueInput | GameTagWhereUniqueInput[]
    update?: GameTagUpdateWithWhereUniqueWithoutGameInput | GameTagUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameTagUpdateManyWithWhereWithoutGameInput | GameTagUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameTagScalarWhereInput | GameTagScalarWhereInput[]
  }

  export type GameScreenshotUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameScreenshotCreateWithoutGameInput, GameScreenshotUncheckedCreateWithoutGameInput> | GameScreenshotCreateWithoutGameInput[] | GameScreenshotUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameScreenshotCreateOrConnectWithoutGameInput | GameScreenshotCreateOrConnectWithoutGameInput[]
    upsert?: GameScreenshotUpsertWithWhereUniqueWithoutGameInput | GameScreenshotUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameScreenshotCreateManyGameInputEnvelope
    set?: GameScreenshotWhereUniqueInput | GameScreenshotWhereUniqueInput[]
    disconnect?: GameScreenshotWhereUniqueInput | GameScreenshotWhereUniqueInput[]
    delete?: GameScreenshotWhereUniqueInput | GameScreenshotWhereUniqueInput[]
    connect?: GameScreenshotWhereUniqueInput | GameScreenshotWhereUniqueInput[]
    update?: GameScreenshotUpdateWithWhereUniqueWithoutGameInput | GameScreenshotUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameScreenshotUpdateManyWithWhereWithoutGameInput | GameScreenshotUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameScreenshotScalarWhereInput | GameScreenshotScalarWhereInput[]
  }

  export type GameCategoryUncheckedUpdateManyWithoutGamesNestedInput = {
    create?: XOR<GameCategoryCreateWithoutGamesInput, GameCategoryUncheckedCreateWithoutGamesInput> | GameCategoryCreateWithoutGamesInput[] | GameCategoryUncheckedCreateWithoutGamesInput[]
    connectOrCreate?: GameCategoryCreateOrConnectWithoutGamesInput | GameCategoryCreateOrConnectWithoutGamesInput[]
    upsert?: GameCategoryUpsertWithWhereUniqueWithoutGamesInput | GameCategoryUpsertWithWhereUniqueWithoutGamesInput[]
    set?: GameCategoryWhereUniqueInput | GameCategoryWhereUniqueInput[]
    disconnect?: GameCategoryWhereUniqueInput | GameCategoryWhereUniqueInput[]
    delete?: GameCategoryWhereUniqueInput | GameCategoryWhereUniqueInput[]
    connect?: GameCategoryWhereUniqueInput | GameCategoryWhereUniqueInput[]
    update?: GameCategoryUpdateWithWhereUniqueWithoutGamesInput | GameCategoryUpdateWithWhereUniqueWithoutGamesInput[]
    updateMany?: GameCategoryUpdateManyWithWhereWithoutGamesInput | GameCategoryUpdateManyWithWhereWithoutGamesInput[]
    deleteMany?: GameCategoryScalarWhereInput | GameCategoryScalarWhereInput[]
  }

  export type GameTagUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameTagCreateWithoutGameInput, GameTagUncheckedCreateWithoutGameInput> | GameTagCreateWithoutGameInput[] | GameTagUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameTagCreateOrConnectWithoutGameInput | GameTagCreateOrConnectWithoutGameInput[]
    upsert?: GameTagUpsertWithWhereUniqueWithoutGameInput | GameTagUpsertWithWhereUniqueWithoutGameInput[]
    set?: GameTagWhereUniqueInput | GameTagWhereUniqueInput[]
    disconnect?: GameTagWhereUniqueInput | GameTagWhereUniqueInput[]
    delete?: GameTagWhereUniqueInput | GameTagWhereUniqueInput[]
    connect?: GameTagWhereUniqueInput | GameTagWhereUniqueInput[]
    update?: GameTagUpdateWithWhereUniqueWithoutGameInput | GameTagUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameTagUpdateManyWithWhereWithoutGameInput | GameTagUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameTagScalarWhereInput | GameTagScalarWhereInput[]
  }

  export type GameCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<GameCreateWithoutCategoriesInput, GameUncheckedCreateWithoutCategoriesInput> | GameCreateWithoutCategoriesInput[] | GameUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: GameCreateOrConnectWithoutCategoriesInput | GameCreateOrConnectWithoutCategoriesInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<GameCreateWithoutCategoriesInput, GameUncheckedCreateWithoutCategoriesInput> | GameCreateWithoutCategoriesInput[] | GameUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: GameCreateOrConnectWithoutCategoriesInput | GameCreateOrConnectWithoutCategoriesInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<GameCreateWithoutCategoriesInput, GameUncheckedCreateWithoutCategoriesInput> | GameCreateWithoutCategoriesInput[] | GameUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: GameCreateOrConnectWithoutCategoriesInput | GameCreateOrConnectWithoutCategoriesInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutCategoriesInput | GameUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutCategoriesInput | GameUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: GameUpdateManyWithWhereWithoutCategoriesInput | GameUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<GameCreateWithoutCategoriesInput, GameUncheckedCreateWithoutCategoriesInput> | GameCreateWithoutCategoriesInput[] | GameUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: GameCreateOrConnectWithoutCategoriesInput | GameCreateOrConnectWithoutCategoriesInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutCategoriesInput | GameUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutCategoriesInput | GameUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: GameUpdateManyWithWhereWithoutCategoriesInput | GameUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameCreateNestedOneWithoutGameScreenshotInput = {
    create?: XOR<GameCreateWithoutGameScreenshotInput, GameUncheckedCreateWithoutGameScreenshotInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameScreenshotInput
    connect?: GameWhereUniqueInput
  }

  export type GameUpdateOneRequiredWithoutGameScreenshotNestedInput = {
    create?: XOR<GameCreateWithoutGameScreenshotInput, GameUncheckedCreateWithoutGameScreenshotInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameScreenshotInput
    upsert?: GameUpsertWithoutGameScreenshotInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutGameScreenshotInput, GameUpdateWithoutGameScreenshotInput>, GameUncheckedUpdateWithoutGameScreenshotInput>
  }

  export type GameCreateNestedManyWithoutGameTagInput = {
    create?: XOR<GameCreateWithoutGameTagInput, GameUncheckedCreateWithoutGameTagInput> | GameCreateWithoutGameTagInput[] | GameUncheckedCreateWithoutGameTagInput[]
    connectOrCreate?: GameCreateOrConnectWithoutGameTagInput | GameCreateOrConnectWithoutGameTagInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutGameTagInput = {
    create?: XOR<GameCreateWithoutGameTagInput, GameUncheckedCreateWithoutGameTagInput> | GameCreateWithoutGameTagInput[] | GameUncheckedCreateWithoutGameTagInput[]
    connectOrCreate?: GameCreateOrConnectWithoutGameTagInput | GameCreateOrConnectWithoutGameTagInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUpdateManyWithoutGameTagNestedInput = {
    create?: XOR<GameCreateWithoutGameTagInput, GameUncheckedCreateWithoutGameTagInput> | GameCreateWithoutGameTagInput[] | GameUncheckedCreateWithoutGameTagInput[]
    connectOrCreate?: GameCreateOrConnectWithoutGameTagInput | GameCreateOrConnectWithoutGameTagInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutGameTagInput | GameUpsertWithWhereUniqueWithoutGameTagInput[]
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutGameTagInput | GameUpdateWithWhereUniqueWithoutGameTagInput[]
    updateMany?: GameUpdateManyWithWhereWithoutGameTagInput | GameUpdateManyWithWhereWithoutGameTagInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutGameTagNestedInput = {
    create?: XOR<GameCreateWithoutGameTagInput, GameUncheckedCreateWithoutGameTagInput> | GameCreateWithoutGameTagInput[] | GameUncheckedCreateWithoutGameTagInput[]
    connectOrCreate?: GameCreateOrConnectWithoutGameTagInput | GameCreateOrConnectWithoutGameTagInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutGameTagInput | GameUpsertWithWhereUniqueWithoutGameTagInput[]
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutGameTagInput | GameUpdateWithWhereUniqueWithoutGameTagInput[]
    updateMany?: GameUpdateManyWithWhereWithoutGameTagInput | GameUpdateManyWithWhereWithoutGameTagInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type NestedEnumPrivacyLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.PrivacyLevel | EnumPrivacyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PrivacyLevel[] | ListEnumPrivacyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.PrivacyLevel[] | ListEnumPrivacyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumPrivacyLevelFilter<$PrismaModel> | $Enums.PrivacyLevel
  }

  export type NestedEnumPrivacyLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PrivacyLevel | EnumPrivacyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PrivacyLevel[] | ListEnumPrivacyLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.PrivacyLevel[] | ListEnumPrivacyLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumPrivacyLevelWithAggregatesFilter<$PrismaModel> | $Enums.PrivacyLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPrivacyLevelFilter<$PrismaModel>
    _max?: NestedEnumPrivacyLevelFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumRewardTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardType | EnumRewardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardTypeFilter<$PrismaModel> | $Enums.RewardType
  }

  export type NestedEnumRewardStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardStatus | EnumRewardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardStatusFilter<$PrismaModel> | $Enums.RewardStatus
  }

  export type NestedEnumRewardSourceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardSourceType | EnumRewardSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardSourceType[] | ListEnumRewardSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardSourceType[] | ListEnumRewardSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardSourceTypeFilter<$PrismaModel> | $Enums.RewardSourceType
  }

  export type NestedEnumRewardTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardType | EnumRewardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardType[] | ListEnumRewardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardTypeWithAggregatesFilter<$PrismaModel> | $Enums.RewardType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRewardTypeFilter<$PrismaModel>
    _max?: NestedEnumRewardTypeFilter<$PrismaModel>
  }

  export type NestedEnumRewardStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardStatus | EnumRewardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardStatus[] | ListEnumRewardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardStatusWithAggregatesFilter<$PrismaModel> | $Enums.RewardStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRewardStatusFilter<$PrismaModel>
    _max?: NestedEnumRewardStatusFilter<$PrismaModel>
  }

  export type NestedEnumRewardSourceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RewardSourceType | EnumRewardSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RewardSourceType[] | ListEnumRewardSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RewardSourceType[] | ListEnumRewardSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRewardSourceTypeWithAggregatesFilter<$PrismaModel> | $Enums.RewardSourceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRewardSourceTypeFilter<$PrismaModel>
    _max?: NestedEnumRewardSourceTypeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumQuestTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestType | EnumQuestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestType[] | ListEnumQuestTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestType[] | ListEnumQuestTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestTypeFilter<$PrismaModel> | $Enums.QuestType
  }

  export type NestedEnumQuestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestStatus | EnumQuestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuestStatus[] | ListEnumQuestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestStatus[] | ListEnumQuestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestStatusFilter<$PrismaModel> | $Enums.QuestStatus
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumQuestTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestType | EnumQuestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestType[] | ListEnumQuestTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestType[] | ListEnumQuestTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestTypeFilter<$PrismaModel>
  }

  export type NestedEnumQuestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestStatus | EnumQuestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuestStatus[] | ListEnumQuestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestStatus[] | ListEnumQuestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestStatusWithAggregatesFilter<$PrismaModel> | $Enums.QuestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestStatusFilter<$PrismaModel>
    _max?: NestedEnumQuestStatusFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumCoinTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CoinType | EnumCoinTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CoinType[] | ListEnumCoinTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CoinType[] | ListEnumCoinTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCoinTypeFilter<$PrismaModel> | $Enums.CoinType
  }

  export type NestedEnumCoinSourceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CoinSourceType | EnumCoinSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CoinSourceType[] | ListEnumCoinSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CoinSourceType[] | ListEnumCoinSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCoinSourceTypeFilter<$PrismaModel> | $Enums.CoinSourceType
  }

  export type NestedEnumCoinTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CoinType | EnumCoinTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CoinType[] | ListEnumCoinTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CoinType[] | ListEnumCoinTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCoinTypeWithAggregatesFilter<$PrismaModel> | $Enums.CoinType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCoinTypeFilter<$PrismaModel>
    _max?: NestedEnumCoinTypeFilter<$PrismaModel>
  }

  export type NestedEnumCoinSourceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CoinSourceType | EnumCoinSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CoinSourceType[] | ListEnumCoinSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CoinSourceType[] | ListEnumCoinSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCoinSourceTypeWithAggregatesFilter<$PrismaModel> | $Enums.CoinSourceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCoinSourceTypeFilter<$PrismaModel>
    _max?: NestedEnumCoinSourceTypeFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityFilter<$PrismaModel> | $Enums.NotificationPriority
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumNotificationPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityWithAggregatesFilter<$PrismaModel> | $Enums.NotificationPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationPriorityFilter<$PrismaModel>
    _max?: NestedEnumNotificationPriorityFilter<$PrismaModel>
  }

  export type NestedEnumAdminRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleFilter<$PrismaModel> | $Enums.AdminRole
  }

  export type NestedEnumAdminRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleWithAggregatesFilter<$PrismaModel> | $Enums.AdminRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminRoleFilter<$PrismaModel>
    _max?: NestedEnumAdminRoleFilter<$PrismaModel>
  }

  export type NestedEnumAdminActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminActionType | EnumAdminActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AdminActionType[] | ListEnumAdminActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminActionType[] | ListEnumAdminActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminActionTypeFilter<$PrismaModel> | $Enums.AdminActionType
  }

  export type NestedEnumAdminActionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminActionStatus | EnumAdminActionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AdminActionStatus[] | ListEnumAdminActionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminActionStatus[] | ListEnumAdminActionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminActionStatusFilter<$PrismaModel> | $Enums.AdminActionStatus
  }

  export type NestedEnumAdminActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminActionType | EnumAdminActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AdminActionType[] | ListEnumAdminActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminActionType[] | ListEnumAdminActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.AdminActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminActionTypeFilter<$PrismaModel>
    _max?: NestedEnumAdminActionTypeFilter<$PrismaModel>
  }

  export type NestedEnumAdminActionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminActionStatus | EnumAdminActionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AdminActionStatus[] | ListEnumAdminActionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminActionStatus[] | ListEnumAdminActionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminActionStatusWithAggregatesFilter<$PrismaModel> | $Enums.AdminActionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminActionStatusFilter<$PrismaModel>
    _max?: NestedEnumAdminActionStatusFilter<$PrismaModel>
  }

  export type NestedEnumGameOrientationFilter<$PrismaModel = never> = {
    equals?: $Enums.GameOrientation | EnumGameOrientationFieldRefInput<$PrismaModel>
    in?: $Enums.GameOrientation[] | ListEnumGameOrientationFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameOrientation[] | ListEnumGameOrientationFieldRefInput<$PrismaModel>
    not?: NestedEnumGameOrientationFilter<$PrismaModel> | $Enums.GameOrientation
  }

  export type NestedEnumGameStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusFilter<$PrismaModel> | $Enums.GameStatus
  }

  export type NestedEnumGameOrientationWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameOrientation | EnumGameOrientationFieldRefInput<$PrismaModel>
    in?: $Enums.GameOrientation[] | ListEnumGameOrientationFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameOrientation[] | ListEnumGameOrientationFieldRefInput<$PrismaModel>
    not?: NestedEnumGameOrientationWithAggregatesFilter<$PrismaModel> | $Enums.GameOrientation
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameOrientationFilter<$PrismaModel>
    _max?: NestedEnumGameOrientationFilter<$PrismaModel>
  }

  export type NestedEnumGameStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusWithAggregatesFilter<$PrismaModel> | $Enums.GameStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameStatusFilter<$PrismaModel>
    _max?: NestedEnumGameStatusFilter<$PrismaModel>
  }

  export type UserCreateWithoutPremiumProfileInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessCreateNestedManyWithoutUserInput
    userCoins?: UserCoinCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    userQuests?: UserQuestCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userStats?: UserStatsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPremiumProfileInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessUncheckedCreateNestedManyWithoutUserInput
    userCoins?: UserCoinUncheckedCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
    userQuests?: UserQuestUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userStats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPremiumProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPremiumProfileInput, UserUncheckedCreateWithoutPremiumProfileInput>
  }

  export type UserUpsertWithoutPremiumProfileInput = {
    update: XOR<UserUpdateWithoutPremiumProfileInput, UserUncheckedUpdateWithoutPremiumProfileInput>
    create: XOR<UserCreateWithoutPremiumProfileInput, UserUncheckedCreateWithoutPremiumProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPremiumProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPremiumProfileInput, UserUncheckedUpdateWithoutPremiumProfileInput>
  }

  export type UserUpdateWithoutPremiumProfileInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUpdateManyWithoutUserNestedInput
    userCoins?: UserCoinUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPremiumProfileInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUncheckedUpdateManyWithoutUserNestedInput
    userCoins?: UserCoinUncheckedUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type AdminNoteCreateWithoutUserInput = {
    id?: string
    note: string
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    adminUser: AdminUserCreateNestedOneWithoutAdminNotesInput
  }

  export type AdminNoteUncheckedCreateWithoutUserInput = {
    id?: string
    adminUserId: string
    note: string
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminNoteCreateOrConnectWithoutUserInput = {
    where: AdminNoteWhereUniqueInput
    create: XOR<AdminNoteCreateWithoutUserInput, AdminNoteUncheckedCreateWithoutUserInput>
  }

  export type AdminNoteCreateManyUserInputEnvelope = {
    data: AdminNoteCreateManyUserInput | AdminNoteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeatureAccessCreateWithoutUserInput = {
    id?: string
    grantedBy?: string | null
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    feature: FeatureCreateNestedOneWithoutFeatureAccessesInput
  }

  export type FeatureAccessUncheckedCreateWithoutUserInput = {
    id?: string
    featureId: string
    grantedBy?: string | null
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
  }

  export type FeatureAccessCreateOrConnectWithoutUserInput = {
    where: FeatureAccessWhereUniqueInput
    create: XOR<FeatureAccessCreateWithoutUserInput, FeatureAccessUncheckedCreateWithoutUserInput>
  }

  export type FeatureAccessCreateManyUserInputEnvelope = {
    data: FeatureAccessCreateManyUserInput | FeatureAccessCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PremiumProfileCreateWithoutUserInput = {
    id?: string
    profileId: string
    isActive?: boolean
    linkedAt?: Date | string
    deactivatedAt?: Date | string | null
  }

  export type PremiumProfileUncheckedCreateWithoutUserInput = {
    id?: string
    profileId: string
    isActive?: boolean
    linkedAt?: Date | string
    deactivatedAt?: Date | string | null
  }

  export type PremiumProfileCreateOrConnectWithoutUserInput = {
    where: PremiumProfileWhereUniqueInput
    create: XOR<PremiumProfileCreateWithoutUserInput, PremiumProfileUncheckedCreateWithoutUserInput>
  }

  export type UserCoinCreateWithoutUserInput = {
    id?: string
    coinType: $Enums.CoinType
    amount?: number
    earnedAt?: Date | string
    sourceType: $Enums.CoinSourceType
    sourceId?: string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserCoinUncheckedCreateWithoutUserInput = {
    id?: string
    coinType: $Enums.CoinType
    amount?: number
    earnedAt?: Date | string
    sourceType: $Enums.CoinSourceType
    sourceId?: string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserCoinCreateOrConnectWithoutUserInput = {
    where: UserCoinWhereUniqueInput
    create: XOR<UserCoinCreateWithoutUserInput, UserCoinUncheckedCreateWithoutUserInput>
  }

  export type UserCoinCreateManyUserInputEnvelope = {
    data: UserCoinCreateManyUserInput | UserCoinCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserNotificationCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    priority?: $Enums.NotificationPriority
    isRead?: boolean
    readAt?: Date | string | null
    actionUrl?: string | null
    actionMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserNotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    priority?: $Enums.NotificationPriority
    isRead?: boolean
    readAt?: Date | string | null
    actionUrl?: string | null
    actionMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserNotificationCreateOrConnectWithoutUserInput = {
    where: UserNotificationWhereUniqueInput
    create: XOR<UserNotificationCreateWithoutUserInput, UserNotificationUncheckedCreateWithoutUserInput>
  }

  export type UserNotificationCreateManyUserInputEnvelope = {
    data: UserNotificationCreateManyUserInput | UserNotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPreferencesCreateWithoutUserInput = {
    emailNotifications?: boolean
    pushNotifications?: boolean
    marketingEmails?: boolean
    privacyLevel?: $Enums.PrivacyLevel
    language?: string
    timezone?: string
    autoLinkProfile?: boolean
    showPremiumBadge?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferencesUncheckedCreateWithoutUserInput = {
    emailNotifications?: boolean
    pushNotifications?: boolean
    marketingEmails?: boolean
    privacyLevel?: $Enums.PrivacyLevel
    language?: string
    timezone?: string
    autoLinkProfile?: boolean
    showPremiumBadge?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferencesCreateOrConnectWithoutUserInput = {
    where: UserPreferencesWhereUniqueInput
    create: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
  }

  export type UserQuestCreateWithoutUserInput = {
    id?: string
    questId: string
    title: string
    description: string
    type: $Enums.QuestType
    status?: $Enums.QuestStatus
    currentProgress?: number
    targetProgress: number
    rewardAmount?: Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: string
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserQuestUncheckedCreateWithoutUserInput = {
    id?: string
    questId: string
    title: string
    description: string
    type: $Enums.QuestType
    status?: $Enums.QuestStatus
    currentProgress?: number
    targetProgress: number
    rewardAmount?: Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: string
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserQuestCreateOrConnectWithoutUserInput = {
    where: UserQuestWhereUniqueInput
    create: XOR<UserQuestCreateWithoutUserInput, UserQuestUncheckedCreateWithoutUserInput>
  }

  export type UserQuestCreateManyUserInputEnvelope = {
    data: UserQuestCreateManyUserInput | UserQuestCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserRewardCreateWithoutUserInput = {
    id?: string
    type: $Enums.RewardType
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    status?: $Enums.RewardStatus
    sourceType: $Enums.RewardSourceType
    sourceId?: string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    txHash?: string | null
    claimedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRewardUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.RewardType
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    status?: $Enums.RewardStatus
    sourceType: $Enums.RewardSourceType
    sourceId?: string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    txHash?: string | null
    claimedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRewardCreateOrConnectWithoutUserInput = {
    where: UserRewardWhereUniqueInput
    create: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput>
  }

  export type UserRewardCreateManyUserInputEnvelope = {
    data: UserRewardCreateManyUserInput | UserRewardCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserStatsCreateWithoutUserInput = {
    totalPosts?: number
    totalComments?: number
    totalLikes?: number
    totalFollowers?: number
    totalFollowing?: number
    daysAsPremium?: number
    referralCount?: number
    totalEarnings?: Decimal | DecimalJsLike | number | string
    questsCompleted?: number
    questsInProgress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStatsUncheckedCreateWithoutUserInput = {
    totalPosts?: number
    totalComments?: number
    totalLikes?: number
    totalFollowers?: number
    totalFollowing?: number
    daysAsPremium?: number
    referralCount?: number
    totalEarnings?: Decimal | DecimalJsLike | number | string
    questsCompleted?: number
    questsInProgress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStatsCreateOrConnectWithoutUserInput = {
    where: UserStatsWhereUniqueInput
    create: XOR<UserStatsCreateWithoutUserInput, UserStatsUncheckedCreateWithoutUserInput>
  }

  export type AdminNoteUpsertWithWhereUniqueWithoutUserInput = {
    where: AdminNoteWhereUniqueInput
    update: XOR<AdminNoteUpdateWithoutUserInput, AdminNoteUncheckedUpdateWithoutUserInput>
    create: XOR<AdminNoteCreateWithoutUserInput, AdminNoteUncheckedCreateWithoutUserInput>
  }

  export type AdminNoteUpdateWithWhereUniqueWithoutUserInput = {
    where: AdminNoteWhereUniqueInput
    data: XOR<AdminNoteUpdateWithoutUserInput, AdminNoteUncheckedUpdateWithoutUserInput>
  }

  export type AdminNoteUpdateManyWithWhereWithoutUserInput = {
    where: AdminNoteScalarWhereInput
    data: XOR<AdminNoteUpdateManyMutationInput, AdminNoteUncheckedUpdateManyWithoutUserInput>
  }

  export type AdminNoteScalarWhereInput = {
    AND?: AdminNoteScalarWhereInput | AdminNoteScalarWhereInput[]
    OR?: AdminNoteScalarWhereInput[]
    NOT?: AdminNoteScalarWhereInput | AdminNoteScalarWhereInput[]
    id?: StringFilter<"AdminNote"> | string
    adminUserId?: StringFilter<"AdminNote"> | string
    walletAddress?: StringFilter<"AdminNote"> | string
    note?: StringFilter<"AdminNote"> | string
    isPrivate?: BoolFilter<"AdminNote"> | boolean
    createdAt?: DateTimeFilter<"AdminNote"> | Date | string
    updatedAt?: DateTimeFilter<"AdminNote"> | Date | string
  }

  export type FeatureAccessUpsertWithWhereUniqueWithoutUserInput = {
    where: FeatureAccessWhereUniqueInput
    update: XOR<FeatureAccessUpdateWithoutUserInput, FeatureAccessUncheckedUpdateWithoutUserInput>
    create: XOR<FeatureAccessCreateWithoutUserInput, FeatureAccessUncheckedCreateWithoutUserInput>
  }

  export type FeatureAccessUpdateWithWhereUniqueWithoutUserInput = {
    where: FeatureAccessWhereUniqueInput
    data: XOR<FeatureAccessUpdateWithoutUserInput, FeatureAccessUncheckedUpdateWithoutUserInput>
  }

  export type FeatureAccessUpdateManyWithWhereWithoutUserInput = {
    where: FeatureAccessScalarWhereInput
    data: XOR<FeatureAccessUpdateManyMutationInput, FeatureAccessUncheckedUpdateManyWithoutUserInput>
  }

  export type FeatureAccessScalarWhereInput = {
    AND?: FeatureAccessScalarWhereInput | FeatureAccessScalarWhereInput[]
    OR?: FeatureAccessScalarWhereInput[]
    NOT?: FeatureAccessScalarWhereInput | FeatureAccessScalarWhereInput[]
    id?: StringFilter<"FeatureAccess"> | string
    featureId?: StringFilter<"FeatureAccess"> | string
    walletAddress?: StringFilter<"FeatureAccess"> | string
    grantedBy?: StringNullableFilter<"FeatureAccess"> | string | null
    grantedAt?: DateTimeFilter<"FeatureAccess"> | Date | string
    expiresAt?: DateTimeNullableFilter<"FeatureAccess"> | Date | string | null
    isActive?: BoolFilter<"FeatureAccess"> | boolean
  }

  export type PremiumProfileUpsertWithoutUserInput = {
    update: XOR<PremiumProfileUpdateWithoutUserInput, PremiumProfileUncheckedUpdateWithoutUserInput>
    create: XOR<PremiumProfileCreateWithoutUserInput, PremiumProfileUncheckedCreateWithoutUserInput>
    where?: PremiumProfileWhereInput
  }

  export type PremiumProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: PremiumProfileWhereInput
    data: XOR<PremiumProfileUpdateWithoutUserInput, PremiumProfileUncheckedUpdateWithoutUserInput>
  }

  export type PremiumProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    linkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PremiumProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    linkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deactivatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCoinUpsertWithWhereUniqueWithoutUserInput = {
    where: UserCoinWhereUniqueInput
    update: XOR<UserCoinUpdateWithoutUserInput, UserCoinUncheckedUpdateWithoutUserInput>
    create: XOR<UserCoinCreateWithoutUserInput, UserCoinUncheckedCreateWithoutUserInput>
  }

  export type UserCoinUpdateWithWhereUniqueWithoutUserInput = {
    where: UserCoinWhereUniqueInput
    data: XOR<UserCoinUpdateWithoutUserInput, UserCoinUncheckedUpdateWithoutUserInput>
  }

  export type UserCoinUpdateManyWithWhereWithoutUserInput = {
    where: UserCoinScalarWhereInput
    data: XOR<UserCoinUpdateManyMutationInput, UserCoinUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCoinScalarWhereInput = {
    AND?: UserCoinScalarWhereInput | UserCoinScalarWhereInput[]
    OR?: UserCoinScalarWhereInput[]
    NOT?: UserCoinScalarWhereInput | UserCoinScalarWhereInput[]
    id?: StringFilter<"UserCoin"> | string
    walletAddress?: StringFilter<"UserCoin"> | string
    coinType?: EnumCoinTypeFilter<"UserCoin"> | $Enums.CoinType
    amount?: IntFilter<"UserCoin"> | number
    earnedAt?: DateTimeFilter<"UserCoin"> | Date | string
    sourceType?: EnumCoinSourceTypeFilter<"UserCoin"> | $Enums.CoinSourceType
    sourceId?: StringNullableFilter<"UserCoin"> | string | null
    sourceMetadata?: JsonNullableFilter<"UserCoin">
    createdAt?: DateTimeFilter<"UserCoin"> | Date | string
  }

  export type UserNotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: UserNotificationWhereUniqueInput
    update: XOR<UserNotificationUpdateWithoutUserInput, UserNotificationUncheckedUpdateWithoutUserInput>
    create: XOR<UserNotificationCreateWithoutUserInput, UserNotificationUncheckedCreateWithoutUserInput>
  }

  export type UserNotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: UserNotificationWhereUniqueInput
    data: XOR<UserNotificationUpdateWithoutUserInput, UserNotificationUncheckedUpdateWithoutUserInput>
  }

  export type UserNotificationUpdateManyWithWhereWithoutUserInput = {
    where: UserNotificationScalarWhereInput
    data: XOR<UserNotificationUpdateManyMutationInput, UserNotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type UserNotificationScalarWhereInput = {
    AND?: UserNotificationScalarWhereInput | UserNotificationScalarWhereInput[]
    OR?: UserNotificationScalarWhereInput[]
    NOT?: UserNotificationScalarWhereInput | UserNotificationScalarWhereInput[]
    id?: StringFilter<"UserNotification"> | string
    walletAddress?: StringFilter<"UserNotification"> | string
    type?: EnumNotificationTypeFilter<"UserNotification"> | $Enums.NotificationType
    title?: StringFilter<"UserNotification"> | string
    message?: StringFilter<"UserNotification"> | string
    priority?: EnumNotificationPriorityFilter<"UserNotification"> | $Enums.NotificationPriority
    isRead?: BoolFilter<"UserNotification"> | boolean
    readAt?: DateTimeNullableFilter<"UserNotification"> | Date | string | null
    actionUrl?: StringNullableFilter<"UserNotification"> | string | null
    actionMetadata?: JsonNullableFilter<"UserNotification">
    createdAt?: DateTimeFilter<"UserNotification"> | Date | string
  }

  export type UserPreferencesUpsertWithoutUserInput = {
    update: XOR<UserPreferencesUpdateWithoutUserInput, UserPreferencesUncheckedUpdateWithoutUserInput>
    create: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    where?: UserPreferencesWhereInput
  }

  export type UserPreferencesUpdateToOneWithWhereWithoutUserInput = {
    where?: UserPreferencesWhereInput
    data: XOR<UserPreferencesUpdateWithoutUserInput, UserPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type UserPreferencesUpdateWithoutUserInput = {
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    marketingEmails?: BoolFieldUpdateOperationsInput | boolean
    privacyLevel?: EnumPrivacyLevelFieldUpdateOperationsInput | $Enums.PrivacyLevel
    language?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    autoLinkProfile?: BoolFieldUpdateOperationsInput | boolean
    showPremiumBadge?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferencesUncheckedUpdateWithoutUserInput = {
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    marketingEmails?: BoolFieldUpdateOperationsInput | boolean
    privacyLevel?: EnumPrivacyLevelFieldUpdateOperationsInput | $Enums.PrivacyLevel
    language?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    autoLinkProfile?: BoolFieldUpdateOperationsInput | boolean
    showPremiumBadge?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestUpsertWithWhereUniqueWithoutUserInput = {
    where: UserQuestWhereUniqueInput
    update: XOR<UserQuestUpdateWithoutUserInput, UserQuestUncheckedUpdateWithoutUserInput>
    create: XOR<UserQuestCreateWithoutUserInput, UserQuestUncheckedCreateWithoutUserInput>
  }

  export type UserQuestUpdateWithWhereUniqueWithoutUserInput = {
    where: UserQuestWhereUniqueInput
    data: XOR<UserQuestUpdateWithoutUserInput, UserQuestUncheckedUpdateWithoutUserInput>
  }

  export type UserQuestUpdateManyWithWhereWithoutUserInput = {
    where: UserQuestScalarWhereInput
    data: XOR<UserQuestUpdateManyMutationInput, UserQuestUncheckedUpdateManyWithoutUserInput>
  }

  export type UserQuestScalarWhereInput = {
    AND?: UserQuestScalarWhereInput | UserQuestScalarWhereInput[]
    OR?: UserQuestScalarWhereInput[]
    NOT?: UserQuestScalarWhereInput | UserQuestScalarWhereInput[]
    id?: StringFilter<"UserQuest"> | string
    walletAddress?: StringFilter<"UserQuest"> | string
    questId?: StringFilter<"UserQuest"> | string
    title?: StringFilter<"UserQuest"> | string
    description?: StringFilter<"UserQuest"> | string
    type?: EnumQuestTypeFilter<"UserQuest"> | $Enums.QuestType
    status?: EnumQuestStatusFilter<"UserQuest"> | $Enums.QuestStatus
    currentProgress?: IntFilter<"UserQuest"> | number
    targetProgress?: IntFilter<"UserQuest"> | number
    rewardAmount?: DecimalNullableFilter<"UserQuest"> | Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: StringFilter<"UserQuest"> | string
    completedAt?: DateTimeNullableFilter<"UserQuest"> | Date | string | null
    createdAt?: DateTimeFilter<"UserQuest"> | Date | string
    updatedAt?: DateTimeFilter<"UserQuest"> | Date | string
  }

  export type UserRewardUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRewardWhereUniqueInput
    update: XOR<UserRewardUpdateWithoutUserInput, UserRewardUncheckedUpdateWithoutUserInput>
    create: XOR<UserRewardCreateWithoutUserInput, UserRewardUncheckedCreateWithoutUserInput>
  }

  export type UserRewardUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRewardWhereUniqueInput
    data: XOR<UserRewardUpdateWithoutUserInput, UserRewardUncheckedUpdateWithoutUserInput>
  }

  export type UserRewardUpdateManyWithWhereWithoutUserInput = {
    where: UserRewardScalarWhereInput
    data: XOR<UserRewardUpdateManyMutationInput, UserRewardUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRewardScalarWhereInput = {
    AND?: UserRewardScalarWhereInput | UserRewardScalarWhereInput[]
    OR?: UserRewardScalarWhereInput[]
    NOT?: UserRewardScalarWhereInput | UserRewardScalarWhereInput[]
    id?: StringFilter<"UserReward"> | string
    walletAddress?: StringFilter<"UserReward"> | string
    type?: EnumRewardTypeFilter<"UserReward"> | $Enums.RewardType
    amount?: DecimalFilter<"UserReward"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"UserReward"> | string
    status?: EnumRewardStatusFilter<"UserReward"> | $Enums.RewardStatus
    sourceType?: EnumRewardSourceTypeFilter<"UserReward"> | $Enums.RewardSourceType
    sourceId?: StringNullableFilter<"UserReward"> | string | null
    sourceMetadata?: JsonNullableFilter<"UserReward">
    txHash?: StringNullableFilter<"UserReward"> | string | null
    claimedAt?: DateTimeNullableFilter<"UserReward"> | Date | string | null
    createdAt?: DateTimeFilter<"UserReward"> | Date | string
    updatedAt?: DateTimeFilter<"UserReward"> | Date | string
  }

  export type UserStatsUpsertWithoutUserInput = {
    update: XOR<UserStatsUpdateWithoutUserInput, UserStatsUncheckedUpdateWithoutUserInput>
    create: XOR<UserStatsCreateWithoutUserInput, UserStatsUncheckedCreateWithoutUserInput>
    where?: UserStatsWhereInput
  }

  export type UserStatsUpdateToOneWithWhereWithoutUserInput = {
    where?: UserStatsWhereInput
    data: XOR<UserStatsUpdateWithoutUserInput, UserStatsUncheckedUpdateWithoutUserInput>
  }

  export type UserStatsUpdateWithoutUserInput = {
    totalPosts?: IntFieldUpdateOperationsInput | number
    totalComments?: IntFieldUpdateOperationsInput | number
    totalLikes?: IntFieldUpdateOperationsInput | number
    totalFollowers?: IntFieldUpdateOperationsInput | number
    totalFollowing?: IntFieldUpdateOperationsInput | number
    daysAsPremium?: IntFieldUpdateOperationsInput | number
    referralCount?: IntFieldUpdateOperationsInput | number
    totalEarnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    questsCompleted?: IntFieldUpdateOperationsInput | number
    questsInProgress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatsUncheckedUpdateWithoutUserInput = {
    totalPosts?: IntFieldUpdateOperationsInput | number
    totalComments?: IntFieldUpdateOperationsInput | number
    totalLikes?: IntFieldUpdateOperationsInput | number
    totalFollowers?: IntFieldUpdateOperationsInput | number
    totalFollowing?: IntFieldUpdateOperationsInput | number
    daysAsPremium?: IntFieldUpdateOperationsInput | number
    referralCount?: IntFieldUpdateOperationsInput | number
    totalEarnings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    questsCompleted?: IntFieldUpdateOperationsInput | number
    questsInProgress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutPreferencesInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileCreateNestedOneWithoutUserInput
    userCoins?: UserCoinCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationCreateNestedManyWithoutUserInput
    userQuests?: UserQuestCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userStats?: UserStatsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPreferencesInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessUncheckedCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileUncheckedCreateNestedOneWithoutUserInput
    userCoins?: UserCoinUncheckedCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationUncheckedCreateNestedManyWithoutUserInput
    userQuests?: UserQuestUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userStats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
  }

  export type UserUpsertWithoutPreferencesInput = {
    update: XOR<UserUpdateWithoutPreferencesInput, UserUncheckedUpdateWithoutPreferencesInput>
    create: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPreferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPreferencesInput, UserUncheckedUpdateWithoutPreferencesInput>
  }

  export type UserUpdateWithoutPreferencesInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUpdateManyWithoutUserNestedInput
    userQuests?: UserQuestUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPreferencesInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUncheckedUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUncheckedUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUncheckedUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUncheckedUpdateManyWithoutUserNestedInput
    userQuests?: UserQuestUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutUserStatsInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileCreateNestedOneWithoutUserInput
    userCoins?: UserCoinCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    userQuests?: UserQuestCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserStatsInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessUncheckedCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileUncheckedCreateNestedOneWithoutUserInput
    userCoins?: UserCoinUncheckedCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
    userQuests?: UserQuestUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserStatsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserStatsInput, UserUncheckedCreateWithoutUserStatsInput>
  }

  export type UserUpsertWithoutUserStatsInput = {
    update: XOR<UserUpdateWithoutUserStatsInput, UserUncheckedUpdateWithoutUserStatsInput>
    create: XOR<UserCreateWithoutUserStatsInput, UserUncheckedCreateWithoutUserStatsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserStatsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserStatsInput, UserUncheckedUpdateWithoutUserStatsInput>
  }

  export type UserUpdateWithoutUserStatsInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserStatsInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUncheckedUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUncheckedUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUncheckedUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutUserRewardsInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileCreateNestedOneWithoutUserInput
    userCoins?: UserCoinCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    userQuests?: UserQuestCreateNestedManyWithoutUserInput
    userStats?: UserStatsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserRewardsInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessUncheckedCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileUncheckedCreateNestedOneWithoutUserInput
    userCoins?: UserCoinUncheckedCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
    userQuests?: UserQuestUncheckedCreateNestedManyWithoutUserInput
    userStats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserRewardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRewardsInput, UserUncheckedCreateWithoutUserRewardsInput>
  }

  export type UserUpsertWithoutUserRewardsInput = {
    update: XOR<UserUpdateWithoutUserRewardsInput, UserUncheckedUpdateWithoutUserRewardsInput>
    create: XOR<UserCreateWithoutUserRewardsInput, UserUncheckedCreateWithoutUserRewardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserRewardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserRewardsInput, UserUncheckedUpdateWithoutUserRewardsInput>
  }

  export type UserUpdateWithoutUserRewardsInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRewardsInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUncheckedUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUncheckedUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUncheckedUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUncheckedUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutUserQuestsInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileCreateNestedOneWithoutUserInput
    userCoins?: UserCoinCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userStats?: UserStatsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserQuestsInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessUncheckedCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileUncheckedCreateNestedOneWithoutUserInput
    userCoins?: UserCoinUncheckedCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userStats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserQuestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserQuestsInput, UserUncheckedCreateWithoutUserQuestsInput>
  }

  export type UserUpsertWithoutUserQuestsInput = {
    update: XOR<UserUpdateWithoutUserQuestsInput, UserUncheckedUpdateWithoutUserQuestsInput>
    create: XOR<UserCreateWithoutUserQuestsInput, UserUncheckedCreateWithoutUserQuestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserQuestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserQuestsInput, UserUncheckedUpdateWithoutUserQuestsInput>
  }

  export type UserUpdateWithoutUserQuestsInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserQuestsInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUncheckedUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUncheckedUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUncheckedUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutUserCoinsInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileCreateNestedOneWithoutUserInput
    userNotifications?: UserNotificationCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    userQuests?: UserQuestCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userStats?: UserStatsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserCoinsInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessUncheckedCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileUncheckedCreateNestedOneWithoutUserInput
    userNotifications?: UserNotificationUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
    userQuests?: UserQuestUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userStats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserCoinsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserCoinsInput, UserUncheckedCreateWithoutUserCoinsInput>
  }

  export type UserUpsertWithoutUserCoinsInput = {
    update: XOR<UserUpdateWithoutUserCoinsInput, UserUncheckedUpdateWithoutUserCoinsInput>
    create: XOR<UserCreateWithoutUserCoinsInput, UserUncheckedCreateWithoutUserCoinsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserCoinsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserCoinsInput, UserUncheckedUpdateWithoutUserCoinsInput>
  }

  export type UserUpdateWithoutUserCoinsInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUpdateOneWithoutUserNestedInput
    userNotifications?: UserNotificationUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserCoinsInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUncheckedUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUncheckedUpdateOneWithoutUserNestedInput
    userNotifications?: UserNotificationUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutUserNotificationsInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileCreateNestedOneWithoutUserInput
    userCoins?: UserCoinCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    userQuests?: UserQuestCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userStats?: UserStatsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserNotificationsInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedCreateNestedManyWithoutUserInput
    featureAccesses?: FeatureAccessUncheckedCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileUncheckedCreateNestedOneWithoutUserInput
    userCoins?: UserCoinUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
    userQuests?: UserQuestUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userStats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserNotificationsInput, UserUncheckedCreateWithoutUserNotificationsInput>
  }

  export type UserUpsertWithoutUserNotificationsInput = {
    update: XOR<UserUpdateWithoutUserNotificationsInput, UserUncheckedUpdateWithoutUserNotificationsInput>
    create: XOR<UserCreateWithoutUserNotificationsInput, UserUncheckedCreateWithoutUserNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserNotificationsInput, UserUncheckedUpdateWithoutUserNotificationsInput>
  }

  export type UserUpdateWithoutUserNotificationsInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserNotificationsInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedUpdateManyWithoutUserNestedInput
    featureAccesses?: FeatureAccessUncheckedUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUncheckedUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type AdminActionCreateWithoutAdminUserInput = {
    id?: string
    actionType: $Enums.AdminActionType
    targetWallet: string
    targetProfileId?: string | null
    reason: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.AdminActionStatus
    result?: NullableJsonNullValueInput | InputJsonValue
    errorMessage?: string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
  }

  export type AdminActionUncheckedCreateWithoutAdminUserInput = {
    id?: string
    actionType: $Enums.AdminActionType
    targetWallet: string
    targetProfileId?: string | null
    reason: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.AdminActionStatus
    result?: NullableJsonNullValueInput | InputJsonValue
    errorMessage?: string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
  }

  export type AdminActionCreateOrConnectWithoutAdminUserInput = {
    where: AdminActionWhereUniqueInput
    create: XOR<AdminActionCreateWithoutAdminUserInput, AdminActionUncheckedCreateWithoutAdminUserInput>
  }

  export type AdminActionCreateManyAdminUserInputEnvelope = {
    data: AdminActionCreateManyAdminUserInput | AdminActionCreateManyAdminUserInput[]
    skipDuplicates?: boolean
  }

  export type AdminNoteCreateWithoutAdminUserInput = {
    id?: string
    note: string
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAdminNotesInput
  }

  export type AdminNoteUncheckedCreateWithoutAdminUserInput = {
    id?: string
    walletAddress: string
    note: string
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminNoteCreateOrConnectWithoutAdminUserInput = {
    where: AdminNoteWhereUniqueInput
    create: XOR<AdminNoteCreateWithoutAdminUserInput, AdminNoteUncheckedCreateWithoutAdminUserInput>
  }

  export type AdminNoteCreateManyAdminUserInputEnvelope = {
    data: AdminNoteCreateManyAdminUserInput | AdminNoteCreateManyAdminUserInput[]
    skipDuplicates?: boolean
  }

  export type AdminPermissionCreateWithoutAdminUserInput = {
    id?: string
    permission: string
    grantedAt?: Date | string
    grantedBy: string
  }

  export type AdminPermissionUncheckedCreateWithoutAdminUserInput = {
    id?: string
    permission: string
    grantedAt?: Date | string
    grantedBy: string
  }

  export type AdminPermissionCreateOrConnectWithoutAdminUserInput = {
    where: AdminPermissionWhereUniqueInput
    create: XOR<AdminPermissionCreateWithoutAdminUserInput, AdminPermissionUncheckedCreateWithoutAdminUserInput>
  }

  export type AdminPermissionCreateManyAdminUserInputEnvelope = {
    data: AdminPermissionCreateManyAdminUserInput | AdminPermissionCreateManyAdminUserInput[]
    skipDuplicates?: boolean
  }

  export type AdminActionUpsertWithWhereUniqueWithoutAdminUserInput = {
    where: AdminActionWhereUniqueInput
    update: XOR<AdminActionUpdateWithoutAdminUserInput, AdminActionUncheckedUpdateWithoutAdminUserInput>
    create: XOR<AdminActionCreateWithoutAdminUserInput, AdminActionUncheckedCreateWithoutAdminUserInput>
  }

  export type AdminActionUpdateWithWhereUniqueWithoutAdminUserInput = {
    where: AdminActionWhereUniqueInput
    data: XOR<AdminActionUpdateWithoutAdminUserInput, AdminActionUncheckedUpdateWithoutAdminUserInput>
  }

  export type AdminActionUpdateManyWithWhereWithoutAdminUserInput = {
    where: AdminActionScalarWhereInput
    data: XOR<AdminActionUpdateManyMutationInput, AdminActionUncheckedUpdateManyWithoutAdminUserInput>
  }

  export type AdminActionScalarWhereInput = {
    AND?: AdminActionScalarWhereInput | AdminActionScalarWhereInput[]
    OR?: AdminActionScalarWhereInput[]
    NOT?: AdminActionScalarWhereInput | AdminActionScalarWhereInput[]
    id?: StringFilter<"AdminAction"> | string
    adminUserId?: StringFilter<"AdminAction"> | string
    actionType?: EnumAdminActionTypeFilter<"AdminAction"> | $Enums.AdminActionType
    targetWallet?: StringFilter<"AdminAction"> | string
    targetProfileId?: StringNullableFilter<"AdminAction"> | string | null
    reason?: StringFilter<"AdminAction"> | string
    metadata?: JsonNullableFilter<"AdminAction">
    status?: EnumAdminActionStatusFilter<"AdminAction"> | $Enums.AdminActionStatus
    result?: JsonNullableFilter<"AdminAction">
    errorMessage?: StringNullableFilter<"AdminAction"> | string | null
    createdAt?: DateTimeFilter<"AdminAction"> | Date | string
    completedAt?: DateTimeNullableFilter<"AdminAction"> | Date | string | null
  }

  export type AdminNoteUpsertWithWhereUniqueWithoutAdminUserInput = {
    where: AdminNoteWhereUniqueInput
    update: XOR<AdminNoteUpdateWithoutAdminUserInput, AdminNoteUncheckedUpdateWithoutAdminUserInput>
    create: XOR<AdminNoteCreateWithoutAdminUserInput, AdminNoteUncheckedCreateWithoutAdminUserInput>
  }

  export type AdminNoteUpdateWithWhereUniqueWithoutAdminUserInput = {
    where: AdminNoteWhereUniqueInput
    data: XOR<AdminNoteUpdateWithoutAdminUserInput, AdminNoteUncheckedUpdateWithoutAdminUserInput>
  }

  export type AdminNoteUpdateManyWithWhereWithoutAdminUserInput = {
    where: AdminNoteScalarWhereInput
    data: XOR<AdminNoteUpdateManyMutationInput, AdminNoteUncheckedUpdateManyWithoutAdminUserInput>
  }

  export type AdminPermissionUpsertWithWhereUniqueWithoutAdminUserInput = {
    where: AdminPermissionWhereUniqueInput
    update: XOR<AdminPermissionUpdateWithoutAdminUserInput, AdminPermissionUncheckedUpdateWithoutAdminUserInput>
    create: XOR<AdminPermissionCreateWithoutAdminUserInput, AdminPermissionUncheckedCreateWithoutAdminUserInput>
  }

  export type AdminPermissionUpdateWithWhereUniqueWithoutAdminUserInput = {
    where: AdminPermissionWhereUniqueInput
    data: XOR<AdminPermissionUpdateWithoutAdminUserInput, AdminPermissionUncheckedUpdateWithoutAdminUserInput>
  }

  export type AdminPermissionUpdateManyWithWhereWithoutAdminUserInput = {
    where: AdminPermissionScalarWhereInput
    data: XOR<AdminPermissionUpdateManyMutationInput, AdminPermissionUncheckedUpdateManyWithoutAdminUserInput>
  }

  export type AdminPermissionScalarWhereInput = {
    AND?: AdminPermissionScalarWhereInput | AdminPermissionScalarWhereInput[]
    OR?: AdminPermissionScalarWhereInput[]
    NOT?: AdminPermissionScalarWhereInput | AdminPermissionScalarWhereInput[]
    id?: StringFilter<"AdminPermission"> | string
    adminUserId?: StringFilter<"AdminPermission"> | string
    permission?: StringFilter<"AdminPermission"> | string
    grantedAt?: DateTimeFilter<"AdminPermission"> | Date | string
    grantedBy?: StringFilter<"AdminPermission"> | string
  }

  export type AdminUserCreateWithoutPermissionsInput = {
    id?: string
    walletAddress: string
    email: string
    username: string
    displayName?: string | null
    role?: $Enums.AdminRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    adminActions?: AdminActionCreateNestedManyWithoutAdminUserInput
    adminNotes?: AdminNoteCreateNestedManyWithoutAdminUserInput
  }

  export type AdminUserUncheckedCreateWithoutPermissionsInput = {
    id?: string
    walletAddress: string
    email: string
    username: string
    displayName?: string | null
    role?: $Enums.AdminRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    adminActions?: AdminActionUncheckedCreateNestedManyWithoutAdminUserInput
    adminNotes?: AdminNoteUncheckedCreateNestedManyWithoutAdminUserInput
  }

  export type AdminUserCreateOrConnectWithoutPermissionsInput = {
    where: AdminUserWhereUniqueInput
    create: XOR<AdminUserCreateWithoutPermissionsInput, AdminUserUncheckedCreateWithoutPermissionsInput>
  }

  export type AdminUserUpsertWithoutPermissionsInput = {
    update: XOR<AdminUserUpdateWithoutPermissionsInput, AdminUserUncheckedUpdateWithoutPermissionsInput>
    create: XOR<AdminUserCreateWithoutPermissionsInput, AdminUserUncheckedCreateWithoutPermissionsInput>
    where?: AdminUserWhereInput
  }

  export type AdminUserUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: AdminUserWhereInput
    data: XOR<AdminUserUpdateWithoutPermissionsInput, AdminUserUncheckedUpdateWithoutPermissionsInput>
  }

  export type AdminUserUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminActions?: AdminActionUpdateManyWithoutAdminUserNestedInput
    adminNotes?: AdminNoteUpdateManyWithoutAdminUserNestedInput
  }

  export type AdminUserUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminActions?: AdminActionUncheckedUpdateManyWithoutAdminUserNestedInput
    adminNotes?: AdminNoteUncheckedUpdateManyWithoutAdminUserNestedInput
  }

  export type AdminUserCreateWithoutAdminActionsInput = {
    id?: string
    walletAddress: string
    email: string
    username: string
    displayName?: string | null
    role?: $Enums.AdminRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    adminNotes?: AdminNoteCreateNestedManyWithoutAdminUserInput
    permissions?: AdminPermissionCreateNestedManyWithoutAdminUserInput
  }

  export type AdminUserUncheckedCreateWithoutAdminActionsInput = {
    id?: string
    walletAddress: string
    email: string
    username: string
    displayName?: string | null
    role?: $Enums.AdminRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    adminNotes?: AdminNoteUncheckedCreateNestedManyWithoutAdminUserInput
    permissions?: AdminPermissionUncheckedCreateNestedManyWithoutAdminUserInput
  }

  export type AdminUserCreateOrConnectWithoutAdminActionsInput = {
    where: AdminUserWhereUniqueInput
    create: XOR<AdminUserCreateWithoutAdminActionsInput, AdminUserUncheckedCreateWithoutAdminActionsInput>
  }

  export type AdminUserUpsertWithoutAdminActionsInput = {
    update: XOR<AdminUserUpdateWithoutAdminActionsInput, AdminUserUncheckedUpdateWithoutAdminActionsInput>
    create: XOR<AdminUserCreateWithoutAdminActionsInput, AdminUserUncheckedCreateWithoutAdminActionsInput>
    where?: AdminUserWhereInput
  }

  export type AdminUserUpdateToOneWithWhereWithoutAdminActionsInput = {
    where?: AdminUserWhereInput
    data: XOR<AdminUserUpdateWithoutAdminActionsInput, AdminUserUncheckedUpdateWithoutAdminActionsInput>
  }

  export type AdminUserUpdateWithoutAdminActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminNotes?: AdminNoteUpdateManyWithoutAdminUserNestedInput
    permissions?: AdminPermissionUpdateManyWithoutAdminUserNestedInput
  }

  export type AdminUserUncheckedUpdateWithoutAdminActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminNotes?: AdminNoteUncheckedUpdateManyWithoutAdminUserNestedInput
    permissions?: AdminPermissionUncheckedUpdateManyWithoutAdminUserNestedInput
  }

  export type AdminUserCreateWithoutAdminNotesInput = {
    id?: string
    walletAddress: string
    email: string
    username: string
    displayName?: string | null
    role?: $Enums.AdminRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    adminActions?: AdminActionCreateNestedManyWithoutAdminUserInput
    permissions?: AdminPermissionCreateNestedManyWithoutAdminUserInput
  }

  export type AdminUserUncheckedCreateWithoutAdminNotesInput = {
    id?: string
    walletAddress: string
    email: string
    username: string
    displayName?: string | null
    role?: $Enums.AdminRole
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    adminActions?: AdminActionUncheckedCreateNestedManyWithoutAdminUserInput
    permissions?: AdminPermissionUncheckedCreateNestedManyWithoutAdminUserInput
  }

  export type AdminUserCreateOrConnectWithoutAdminNotesInput = {
    where: AdminUserWhereUniqueInput
    create: XOR<AdminUserCreateWithoutAdminNotesInput, AdminUserUncheckedCreateWithoutAdminNotesInput>
  }

  export type UserCreateWithoutAdminNotesInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    featureAccesses?: FeatureAccessCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileCreateNestedOneWithoutUserInput
    userCoins?: UserCoinCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    userQuests?: UserQuestCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userStats?: UserStatsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminNotesInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    featureAccesses?: FeatureAccessUncheckedCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileUncheckedCreateNestedOneWithoutUserInput
    userCoins?: UserCoinUncheckedCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
    userQuests?: UserQuestUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userStats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminNotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminNotesInput, UserUncheckedCreateWithoutAdminNotesInput>
  }

  export type AdminUserUpsertWithoutAdminNotesInput = {
    update: XOR<AdminUserUpdateWithoutAdminNotesInput, AdminUserUncheckedUpdateWithoutAdminNotesInput>
    create: XOR<AdminUserCreateWithoutAdminNotesInput, AdminUserUncheckedCreateWithoutAdminNotesInput>
    where?: AdminUserWhereInput
  }

  export type AdminUserUpdateToOneWithWhereWithoutAdminNotesInput = {
    where?: AdminUserWhereInput
    data: XOR<AdminUserUpdateWithoutAdminNotesInput, AdminUserUncheckedUpdateWithoutAdminNotesInput>
  }

  export type AdminUserUpdateWithoutAdminNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminActions?: AdminActionUpdateManyWithoutAdminUserNestedInput
    permissions?: AdminPermissionUpdateManyWithoutAdminUserNestedInput
  }

  export type AdminUserUncheckedUpdateWithoutAdminNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminActions?: AdminActionUncheckedUpdateManyWithoutAdminUserNestedInput
    permissions?: AdminPermissionUncheckedUpdateManyWithoutAdminUserNestedInput
  }

  export type UserUpsertWithoutAdminNotesInput = {
    update: XOR<UserUpdateWithoutAdminNotesInput, UserUncheckedUpdateWithoutAdminNotesInput>
    create: XOR<UserCreateWithoutAdminNotesInput, UserUncheckedCreateWithoutAdminNotesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminNotesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminNotesInput, UserUncheckedUpdateWithoutAdminNotesInput>
  }

  export type UserUpdateWithoutAdminNotesInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    featureAccesses?: FeatureAccessUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminNotesInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    featureAccesses?: FeatureAccessUncheckedUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUncheckedUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUncheckedUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type FeatureAccessCreateWithoutFeatureInput = {
    id?: string
    grantedBy?: string | null
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    user: UserCreateNestedOneWithoutFeatureAccessesInput
  }

  export type FeatureAccessUncheckedCreateWithoutFeatureInput = {
    id?: string
    walletAddress: string
    grantedBy?: string | null
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
  }

  export type FeatureAccessCreateOrConnectWithoutFeatureInput = {
    where: FeatureAccessWhereUniqueInput
    create: XOR<FeatureAccessCreateWithoutFeatureInput, FeatureAccessUncheckedCreateWithoutFeatureInput>
  }

  export type FeatureAccessCreateManyFeatureInputEnvelope = {
    data: FeatureAccessCreateManyFeatureInput | FeatureAccessCreateManyFeatureInput[]
    skipDuplicates?: boolean
  }

  export type FeatureAccessUpsertWithWhereUniqueWithoutFeatureInput = {
    where: FeatureAccessWhereUniqueInput
    update: XOR<FeatureAccessUpdateWithoutFeatureInput, FeatureAccessUncheckedUpdateWithoutFeatureInput>
    create: XOR<FeatureAccessCreateWithoutFeatureInput, FeatureAccessUncheckedCreateWithoutFeatureInput>
  }

  export type FeatureAccessUpdateWithWhereUniqueWithoutFeatureInput = {
    where: FeatureAccessWhereUniqueInput
    data: XOR<FeatureAccessUpdateWithoutFeatureInput, FeatureAccessUncheckedUpdateWithoutFeatureInput>
  }

  export type FeatureAccessUpdateManyWithWhereWithoutFeatureInput = {
    where: FeatureAccessScalarWhereInput
    data: XOR<FeatureAccessUpdateManyMutationInput, FeatureAccessUncheckedUpdateManyWithoutFeatureInput>
  }

  export type FeatureCreateWithoutFeatureAccessesInput = {
    id?: string
    featureId: string
    name: string
    description: string
    category: string
    standardAccess?: boolean
    premiumAccess?: boolean
    adminOverride?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeatureUncheckedCreateWithoutFeatureAccessesInput = {
    id?: string
    featureId: string
    name: string
    description: string
    category: string
    standardAccess?: boolean
    premiumAccess?: boolean
    adminOverride?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeatureCreateOrConnectWithoutFeatureAccessesInput = {
    where: FeatureWhereUniqueInput
    create: XOR<FeatureCreateWithoutFeatureAccessesInput, FeatureUncheckedCreateWithoutFeatureAccessesInput>
  }

  export type UserCreateWithoutFeatureAccessesInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileCreateNestedOneWithoutUserInput
    userCoins?: UserCoinCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    userQuests?: UserQuestCreateNestedManyWithoutUserInput
    userRewards?: UserRewardCreateNestedManyWithoutUserInput
    userStats?: UserStatsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeatureAccessesInput = {
    walletAddress: string
    email?: string | null
    username?: string | null
    displayName?: string | null
    avatarUrl?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitterHandle?: string | null
    registrationDate?: Date | string
    referrerAddress?: string | null
    registrationTxHash?: string | null
    premiumUpgradedAt?: Date | string | null
    lastActiveAt?: Date | string
    totalLogins?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedCreateNestedManyWithoutUserInput
    premiumProfile?: PremiumProfileUncheckedCreateNestedOneWithoutUserInput
    userCoins?: UserCoinUncheckedCreateNestedManyWithoutUserInput
    userNotifications?: UserNotificationUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
    userQuests?: UserQuestUncheckedCreateNestedManyWithoutUserInput
    userRewards?: UserRewardUncheckedCreateNestedManyWithoutUserInput
    userStats?: UserStatsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeatureAccessesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeatureAccessesInput, UserUncheckedCreateWithoutFeatureAccessesInput>
  }

  export type FeatureUpsertWithoutFeatureAccessesInput = {
    update: XOR<FeatureUpdateWithoutFeatureAccessesInput, FeatureUncheckedUpdateWithoutFeatureAccessesInput>
    create: XOR<FeatureCreateWithoutFeatureAccessesInput, FeatureUncheckedCreateWithoutFeatureAccessesInput>
    where?: FeatureWhereInput
  }

  export type FeatureUpdateToOneWithWhereWithoutFeatureAccessesInput = {
    where?: FeatureWhereInput
    data: XOR<FeatureUpdateWithoutFeatureAccessesInput, FeatureUncheckedUpdateWithoutFeatureAccessesInput>
  }

  export type FeatureUpdateWithoutFeatureAccessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    featureId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    standardAccess?: BoolFieldUpdateOperationsInput | boolean
    premiumAccess?: BoolFieldUpdateOperationsInput | boolean
    adminOverride?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeatureUncheckedUpdateWithoutFeatureAccessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    featureId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    standardAccess?: BoolFieldUpdateOperationsInput | boolean
    premiumAccess?: BoolFieldUpdateOperationsInput | boolean
    adminOverride?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutFeatureAccessesInput = {
    update: XOR<UserUpdateWithoutFeatureAccessesInput, UserUncheckedUpdateWithoutFeatureAccessesInput>
    create: XOR<UserCreateWithoutFeatureAccessesInput, UserUncheckedCreateWithoutFeatureAccessesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeatureAccessesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeatureAccessesInput, UserUncheckedUpdateWithoutFeatureAccessesInput>
  }

  export type UserUpdateWithoutFeatureAccessesInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeatureAccessesInput = {
    walletAddress?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitterHandle?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referrerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    registrationTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    premiumUpgradedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalLogins?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    adminNotes?: AdminNoteUncheckedUpdateManyWithoutUserNestedInput
    premiumProfile?: PremiumProfileUncheckedUpdateOneWithoutUserNestedInput
    userCoins?: UserCoinUncheckedUpdateManyWithoutUserNestedInput
    userNotifications?: UserNotificationUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
    userQuests?: UserQuestUncheckedUpdateManyWithoutUserNestedInput
    userRewards?: UserRewardUncheckedUpdateManyWithoutUserNestedInput
    userStats?: UserStatsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type GameScreenshotCreateWithoutGameInput = {
    id: string
    imageUrl: string
    order?: number
    createdAt?: Date | string
  }

  export type GameScreenshotUncheckedCreateWithoutGameInput = {
    id: string
    imageUrl: string
    order?: number
    createdAt?: Date | string
  }

  export type GameScreenshotCreateOrConnectWithoutGameInput = {
    where: GameScreenshotWhereUniqueInput
    create: XOR<GameScreenshotCreateWithoutGameInput, GameScreenshotUncheckedCreateWithoutGameInput>
  }

  export type GameScreenshotCreateManyGameInputEnvelope = {
    data: GameScreenshotCreateManyGameInput | GameScreenshotCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type GameCategoryCreateWithoutGamesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    description?: string | null
    icon?: string | null
    metaDescription?: string | null
    slug?: string | null
  }

  export type GameCategoryUncheckedCreateWithoutGamesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    color?: string | null
    description?: string | null
    icon?: string | null
    metaDescription?: string | null
    slug?: string | null
  }

  export type GameCategoryCreateOrConnectWithoutGamesInput = {
    where: GameCategoryWhereUniqueInput
    create: XOR<GameCategoryCreateWithoutGamesInput, GameCategoryUncheckedCreateWithoutGamesInput>
  }

  export type GameTagCreateWithoutGameInput = {
    id: string
    name: string
    createdAt?: Date | string
  }

  export type GameTagUncheckedCreateWithoutGameInput = {
    id: string
    name: string
    createdAt?: Date | string
  }

  export type GameTagCreateOrConnectWithoutGameInput = {
    where: GameTagWhereUniqueInput
    create: XOR<GameTagCreateWithoutGameInput, GameTagUncheckedCreateWithoutGameInput>
  }

  export type GameScreenshotUpsertWithWhereUniqueWithoutGameInput = {
    where: GameScreenshotWhereUniqueInput
    update: XOR<GameScreenshotUpdateWithoutGameInput, GameScreenshotUncheckedUpdateWithoutGameInput>
    create: XOR<GameScreenshotCreateWithoutGameInput, GameScreenshotUncheckedCreateWithoutGameInput>
  }

  export type GameScreenshotUpdateWithWhereUniqueWithoutGameInput = {
    where: GameScreenshotWhereUniqueInput
    data: XOR<GameScreenshotUpdateWithoutGameInput, GameScreenshotUncheckedUpdateWithoutGameInput>
  }

  export type GameScreenshotUpdateManyWithWhereWithoutGameInput = {
    where: GameScreenshotScalarWhereInput
    data: XOR<GameScreenshotUpdateManyMutationInput, GameScreenshotUncheckedUpdateManyWithoutGameInput>
  }

  export type GameScreenshotScalarWhereInput = {
    AND?: GameScreenshotScalarWhereInput | GameScreenshotScalarWhereInput[]
    OR?: GameScreenshotScalarWhereInput[]
    NOT?: GameScreenshotScalarWhereInput | GameScreenshotScalarWhereInput[]
    id?: StringFilter<"GameScreenshot"> | string
    gameId?: StringFilter<"GameScreenshot"> | string
    imageUrl?: StringFilter<"GameScreenshot"> | string
    order?: IntFilter<"GameScreenshot"> | number
    createdAt?: DateTimeFilter<"GameScreenshot"> | Date | string
  }

  export type GameCategoryUpsertWithWhereUniqueWithoutGamesInput = {
    where: GameCategoryWhereUniqueInput
    update: XOR<GameCategoryUpdateWithoutGamesInput, GameCategoryUncheckedUpdateWithoutGamesInput>
    create: XOR<GameCategoryCreateWithoutGamesInput, GameCategoryUncheckedCreateWithoutGamesInput>
  }

  export type GameCategoryUpdateWithWhereUniqueWithoutGamesInput = {
    where: GameCategoryWhereUniqueInput
    data: XOR<GameCategoryUpdateWithoutGamesInput, GameCategoryUncheckedUpdateWithoutGamesInput>
  }

  export type GameCategoryUpdateManyWithWhereWithoutGamesInput = {
    where: GameCategoryScalarWhereInput
    data: XOR<GameCategoryUpdateManyMutationInput, GameCategoryUncheckedUpdateManyWithoutGamesInput>
  }

  export type GameCategoryScalarWhereInput = {
    AND?: GameCategoryScalarWhereInput | GameCategoryScalarWhereInput[]
    OR?: GameCategoryScalarWhereInput[]
    NOT?: GameCategoryScalarWhereInput | GameCategoryScalarWhereInput[]
    id?: StringFilter<"GameCategory"> | string
    name?: StringFilter<"GameCategory"> | string
    createdAt?: DateTimeFilter<"GameCategory"> | Date | string
    updatedAt?: DateTimeFilter<"GameCategory"> | Date | string
    color?: StringNullableFilter<"GameCategory"> | string | null
    description?: StringNullableFilter<"GameCategory"> | string | null
    icon?: StringNullableFilter<"GameCategory"> | string | null
    metaDescription?: StringNullableFilter<"GameCategory"> | string | null
    slug?: StringNullableFilter<"GameCategory"> | string | null
  }

  export type GameTagUpsertWithWhereUniqueWithoutGameInput = {
    where: GameTagWhereUniqueInput
    update: XOR<GameTagUpdateWithoutGameInput, GameTagUncheckedUpdateWithoutGameInput>
    create: XOR<GameTagCreateWithoutGameInput, GameTagUncheckedCreateWithoutGameInput>
  }

  export type GameTagUpdateWithWhereUniqueWithoutGameInput = {
    where: GameTagWhereUniqueInput
    data: XOR<GameTagUpdateWithoutGameInput, GameTagUncheckedUpdateWithoutGameInput>
  }

  export type GameTagUpdateManyWithWhereWithoutGameInput = {
    where: GameTagScalarWhereInput
    data: XOR<GameTagUpdateManyMutationInput, GameTagUncheckedUpdateManyWithoutGameInput>
  }

  export type GameTagScalarWhereInput = {
    AND?: GameTagScalarWhereInput | GameTagScalarWhereInput[]
    OR?: GameTagScalarWhereInput[]
    NOT?: GameTagScalarWhereInput | GameTagScalarWhereInput[]
    id?: StringFilter<"GameTag"> | string
    name?: StringFilter<"GameTag"> | string
    createdAt?: DateTimeFilter<"GameTag"> | Date | string
  }

  export type GameCreateWithoutCategoriesInput = {
    id?: string
    title: string
    slug: string
    description: string
    instructions?: string | null
    packageUrl: string
    entryFilePath?: string
    iconUrl: string
    coverImageUrl: string
    width?: number
    height?: number
    orientation?: $Enums.GameOrientation
    developerName?: string | null
    version?: string | null
    status?: $Enums.GameStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    GameScreenshot?: GameScreenshotCreateNestedManyWithoutGameInput
    GameTag?: GameTagCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutCategoriesInput = {
    id?: string
    title: string
    slug: string
    description: string
    instructions?: string | null
    packageUrl: string
    entryFilePath?: string
    iconUrl: string
    coverImageUrl: string
    width?: number
    height?: number
    orientation?: $Enums.GameOrientation
    developerName?: string | null
    version?: string | null
    status?: $Enums.GameStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    GameScreenshot?: GameScreenshotUncheckedCreateNestedManyWithoutGameInput
    GameTag?: GameTagUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutCategoriesInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutCategoriesInput, GameUncheckedCreateWithoutCategoriesInput>
  }

  export type GameUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutCategoriesInput, GameUncheckedUpdateWithoutCategoriesInput>
    create: XOR<GameCreateWithoutCategoriesInput, GameUncheckedCreateWithoutCategoriesInput>
  }

  export type GameUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutCategoriesInput, GameUncheckedUpdateWithoutCategoriesInput>
  }

  export type GameUpdateManyWithWhereWithoutCategoriesInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type GameScalarWhereInput = {
    AND?: GameScalarWhereInput | GameScalarWhereInput[]
    OR?: GameScalarWhereInput[]
    NOT?: GameScalarWhereInput | GameScalarWhereInput[]
    id?: StringFilter<"Game"> | string
    title?: StringFilter<"Game"> | string
    slug?: StringFilter<"Game"> | string
    description?: StringFilter<"Game"> | string
    instructions?: StringNullableFilter<"Game"> | string | null
    packageUrl?: StringFilter<"Game"> | string
    entryFilePath?: StringFilter<"Game"> | string
    iconUrl?: StringFilter<"Game"> | string
    coverImageUrl?: StringFilter<"Game"> | string
    width?: IntFilter<"Game"> | number
    height?: IntFilter<"Game"> | number
    orientation?: EnumGameOrientationFilter<"Game"> | $Enums.GameOrientation
    developerName?: StringNullableFilter<"Game"> | string | null
    version?: StringNullableFilter<"Game"> | string | null
    status?: EnumGameStatusFilter<"Game"> | $Enums.GameStatus
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
  }

  export type GameCreateWithoutGameScreenshotInput = {
    id?: string
    title: string
    slug: string
    description: string
    instructions?: string | null
    packageUrl: string
    entryFilePath?: string
    iconUrl: string
    coverImageUrl: string
    width?: number
    height?: number
    orientation?: $Enums.GameOrientation
    developerName?: string | null
    version?: string | null
    status?: $Enums.GameStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: GameCategoryCreateNestedManyWithoutGamesInput
    GameTag?: GameTagCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutGameScreenshotInput = {
    id?: string
    title: string
    slug: string
    description: string
    instructions?: string | null
    packageUrl: string
    entryFilePath?: string
    iconUrl: string
    coverImageUrl: string
    width?: number
    height?: number
    orientation?: $Enums.GameOrientation
    developerName?: string | null
    version?: string | null
    status?: $Enums.GameStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: GameCategoryUncheckedCreateNestedManyWithoutGamesInput
    GameTag?: GameTagUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutGameScreenshotInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutGameScreenshotInput, GameUncheckedCreateWithoutGameScreenshotInput>
  }

  export type GameUpsertWithoutGameScreenshotInput = {
    update: XOR<GameUpdateWithoutGameScreenshotInput, GameUncheckedUpdateWithoutGameScreenshotInput>
    create: XOR<GameCreateWithoutGameScreenshotInput, GameUncheckedCreateWithoutGameScreenshotInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutGameScreenshotInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutGameScreenshotInput, GameUncheckedUpdateWithoutGameScreenshotInput>
  }

  export type GameUpdateWithoutGameScreenshotInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    packageUrl?: StringFieldUpdateOperationsInput | string
    entryFilePath?: StringFieldUpdateOperationsInput | string
    iconUrl?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    orientation?: EnumGameOrientationFieldUpdateOperationsInput | $Enums.GameOrientation
    developerName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: GameCategoryUpdateManyWithoutGamesNestedInput
    GameTag?: GameTagUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutGameScreenshotInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    packageUrl?: StringFieldUpdateOperationsInput | string
    entryFilePath?: StringFieldUpdateOperationsInput | string
    iconUrl?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    orientation?: EnumGameOrientationFieldUpdateOperationsInput | $Enums.GameOrientation
    developerName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: GameCategoryUncheckedUpdateManyWithoutGamesNestedInput
    GameTag?: GameTagUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateWithoutGameTagInput = {
    id?: string
    title: string
    slug: string
    description: string
    instructions?: string | null
    packageUrl: string
    entryFilePath?: string
    iconUrl: string
    coverImageUrl: string
    width?: number
    height?: number
    orientation?: $Enums.GameOrientation
    developerName?: string | null
    version?: string | null
    status?: $Enums.GameStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    GameScreenshot?: GameScreenshotCreateNestedManyWithoutGameInput
    categories?: GameCategoryCreateNestedManyWithoutGamesInput
  }

  export type GameUncheckedCreateWithoutGameTagInput = {
    id?: string
    title: string
    slug: string
    description: string
    instructions?: string | null
    packageUrl: string
    entryFilePath?: string
    iconUrl: string
    coverImageUrl: string
    width?: number
    height?: number
    orientation?: $Enums.GameOrientation
    developerName?: string | null
    version?: string | null
    status?: $Enums.GameStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    GameScreenshot?: GameScreenshotUncheckedCreateNestedManyWithoutGameInput
    categories?: GameCategoryUncheckedCreateNestedManyWithoutGamesInput
  }

  export type GameCreateOrConnectWithoutGameTagInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutGameTagInput, GameUncheckedCreateWithoutGameTagInput>
  }

  export type GameUpsertWithWhereUniqueWithoutGameTagInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutGameTagInput, GameUncheckedUpdateWithoutGameTagInput>
    create: XOR<GameCreateWithoutGameTagInput, GameUncheckedCreateWithoutGameTagInput>
  }

  export type GameUpdateWithWhereUniqueWithoutGameTagInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutGameTagInput, GameUncheckedUpdateWithoutGameTagInput>
  }

  export type GameUpdateManyWithWhereWithoutGameTagInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutGameTagInput>
  }

  export type AdminNoteCreateManyUserInput = {
    id?: string
    adminUserId: string
    note: string
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeatureAccessCreateManyUserInput = {
    id?: string
    featureId: string
    grantedBy?: string | null
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
  }

  export type UserCoinCreateManyUserInput = {
    id?: string
    coinType: $Enums.CoinType
    amount?: number
    earnedAt?: Date | string
    sourceType: $Enums.CoinSourceType
    sourceId?: string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserNotificationCreateManyUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    priority?: $Enums.NotificationPriority
    isRead?: boolean
    readAt?: Date | string | null
    actionUrl?: string | null
    actionMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserQuestCreateManyUserInput = {
    id?: string
    questId: string
    title: string
    description: string
    type: $Enums.QuestType
    status?: $Enums.QuestStatus
    currentProgress?: number
    targetProgress: number
    rewardAmount?: Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: string
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRewardCreateManyUserInput = {
    id?: string
    type: $Enums.RewardType
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    status?: $Enums.RewardStatus
    sourceType: $Enums.RewardSourceType
    sourceId?: string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    txHash?: string | null
    claimedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminNoteUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminUser?: AdminUserUpdateOneRequiredWithoutAdminNotesNestedInput
  }

  export type AdminNoteUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminUserId?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminNoteUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminUserId?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeatureAccessUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    feature?: FeatureUpdateOneRequiredWithoutFeatureAccessesNestedInput
  }

  export type FeatureAccessUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    featureId?: StringFieldUpdateOperationsInput | string
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FeatureAccessUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    featureId?: StringFieldUpdateOperationsInput | string
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCoinUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    coinType?: EnumCoinTypeFieldUpdateOperationsInput | $Enums.CoinType
    amount?: IntFieldUpdateOperationsInput | number
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceType?: EnumCoinSourceTypeFieldUpdateOperationsInput | $Enums.CoinSourceType
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCoinUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    coinType?: EnumCoinTypeFieldUpdateOperationsInput | $Enums.CoinType
    amount?: IntFieldUpdateOperationsInput | number
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceType?: EnumCoinSourceTypeFieldUpdateOperationsInput | $Enums.CoinSourceType
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCoinUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    coinType?: EnumCoinTypeFieldUpdateOperationsInput | $Enums.CoinType
    amount?: IntFieldUpdateOperationsInput | number
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceType?: EnumCoinSourceTypeFieldUpdateOperationsInput | $Enums.CoinSourceType
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    actionMetadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    questId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestTypeFieldUpdateOperationsInput | $Enums.QuestType
    status?: EnumQuestStatusFieldUpdateOperationsInput | $Enums.QuestStatus
    currentProgress?: IntFieldUpdateOperationsInput | number
    targetProgress?: IntFieldUpdateOperationsInput | number
    rewardAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    questId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestTypeFieldUpdateOperationsInput | $Enums.QuestType
    status?: EnumQuestStatusFieldUpdateOperationsInput | $Enums.QuestStatus
    currentProgress?: IntFieldUpdateOperationsInput | number
    targetProgress?: IntFieldUpdateOperationsInput | number
    rewardAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    questId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestTypeFieldUpdateOperationsInput | $Enums.QuestType
    status?: EnumQuestStatusFieldUpdateOperationsInput | $Enums.QuestStatus
    currentProgress?: IntFieldUpdateOperationsInput | number
    targetProgress?: IntFieldUpdateOperationsInput | number
    rewardAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rewardCurrency?: StringFieldUpdateOperationsInput | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRewardUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    sourceType?: EnumRewardSourceTypeFieldUpdateOperationsInput | $Enums.RewardSourceType
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRewardUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    sourceType?: EnumRewardSourceTypeFieldUpdateOperationsInput | $Enums.RewardSourceType
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRewardUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumRewardTypeFieldUpdateOperationsInput | $Enums.RewardType
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumRewardStatusFieldUpdateOperationsInput | $Enums.RewardStatus
    sourceType?: EnumRewardSourceTypeFieldUpdateOperationsInput | $Enums.RewardSourceType
    sourceId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceMetadata?: NullableJsonNullValueInput | InputJsonValue
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminActionCreateManyAdminUserInput = {
    id?: string
    actionType: $Enums.AdminActionType
    targetWallet: string
    targetProfileId?: string | null
    reason: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.AdminActionStatus
    result?: NullableJsonNullValueInput | InputJsonValue
    errorMessage?: string | null
    createdAt?: Date | string
    completedAt?: Date | string | null
  }

  export type AdminNoteCreateManyAdminUserInput = {
    id?: string
    walletAddress: string
    note: string
    isPrivate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminPermissionCreateManyAdminUserInput = {
    id?: string
    permission: string
    grantedAt?: Date | string
    grantedBy: string
  }

  export type AdminActionUpdateWithoutAdminUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAdminActionTypeFieldUpdateOperationsInput | $Enums.AdminActionType
    targetWallet?: StringFieldUpdateOperationsInput | string
    targetProfileId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumAdminActionStatusFieldUpdateOperationsInput | $Enums.AdminActionStatus
    result?: NullableJsonNullValueInput | InputJsonValue
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AdminActionUncheckedUpdateWithoutAdminUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAdminActionTypeFieldUpdateOperationsInput | $Enums.AdminActionType
    targetWallet?: StringFieldUpdateOperationsInput | string
    targetProfileId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumAdminActionStatusFieldUpdateOperationsInput | $Enums.AdminActionStatus
    result?: NullableJsonNullValueInput | InputJsonValue
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AdminActionUncheckedUpdateManyWithoutAdminUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: EnumAdminActionTypeFieldUpdateOperationsInput | $Enums.AdminActionType
    targetWallet?: StringFieldUpdateOperationsInput | string
    targetProfileId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumAdminActionStatusFieldUpdateOperationsInput | $Enums.AdminActionStatus
    result?: NullableJsonNullValueInput | InputJsonValue
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AdminNoteUpdateWithoutAdminUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAdminNotesNestedInput
  }

  export type AdminNoteUncheckedUpdateWithoutAdminUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminNoteUncheckedUpdateManyWithoutAdminUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminPermissionUpdateWithoutAdminUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permission?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: StringFieldUpdateOperationsInput | string
  }

  export type AdminPermissionUncheckedUpdateWithoutAdminUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permission?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: StringFieldUpdateOperationsInput | string
  }

  export type AdminPermissionUncheckedUpdateManyWithoutAdminUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permission?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: StringFieldUpdateOperationsInput | string
  }

  export type FeatureAccessCreateManyFeatureInput = {
    id?: string
    walletAddress: string
    grantedBy?: string | null
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
  }

  export type FeatureAccessUpdateWithoutFeatureInput = {
    id?: StringFieldUpdateOperationsInput | string
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutFeatureAccessesNestedInput
  }

  export type FeatureAccessUncheckedUpdateWithoutFeatureInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FeatureAccessUncheckedUpdateManyWithoutFeatureInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameScreenshotCreateManyGameInput = {
    id: string
    imageUrl: string
    order?: number
    createdAt?: Date | string
  }

  export type GameScreenshotUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameScreenshotUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameScreenshotUncheckedUpdateManyWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCategoryUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameCategoryUncheckedUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameCategoryUncheckedUpdateManyWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameTagUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameTagUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameTagUncheckedUpdateManyWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    packageUrl?: StringFieldUpdateOperationsInput | string
    entryFilePath?: StringFieldUpdateOperationsInput | string
    iconUrl?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    orientation?: EnumGameOrientationFieldUpdateOperationsInput | $Enums.GameOrientation
    developerName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GameScreenshot?: GameScreenshotUpdateManyWithoutGameNestedInput
    GameTag?: GameTagUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    packageUrl?: StringFieldUpdateOperationsInput | string
    entryFilePath?: StringFieldUpdateOperationsInput | string
    iconUrl?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    orientation?: EnumGameOrientationFieldUpdateOperationsInput | $Enums.GameOrientation
    developerName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GameScreenshot?: GameScreenshotUncheckedUpdateManyWithoutGameNestedInput
    GameTag?: GameTagUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    packageUrl?: StringFieldUpdateOperationsInput | string
    entryFilePath?: StringFieldUpdateOperationsInput | string
    iconUrl?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    orientation?: EnumGameOrientationFieldUpdateOperationsInput | $Enums.GameOrientation
    developerName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUpdateWithoutGameTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    packageUrl?: StringFieldUpdateOperationsInput | string
    entryFilePath?: StringFieldUpdateOperationsInput | string
    iconUrl?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    orientation?: EnumGameOrientationFieldUpdateOperationsInput | $Enums.GameOrientation
    developerName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GameScreenshot?: GameScreenshotUpdateManyWithoutGameNestedInput
    categories?: GameCategoryUpdateManyWithoutGamesNestedInput
  }

  export type GameUncheckedUpdateWithoutGameTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    packageUrl?: StringFieldUpdateOperationsInput | string
    entryFilePath?: StringFieldUpdateOperationsInput | string
    iconUrl?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    orientation?: EnumGameOrientationFieldUpdateOperationsInput | $Enums.GameOrientation
    developerName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GameScreenshot?: GameScreenshotUncheckedUpdateManyWithoutGameNestedInput
    categories?: GameCategoryUncheckedUpdateManyWithoutGamesNestedInput
  }

  export type GameUncheckedUpdateManyWithoutGameTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    packageUrl?: StringFieldUpdateOperationsInput | string
    entryFilePath?: StringFieldUpdateOperationsInput | string
    iconUrl?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    orientation?: EnumGameOrientationFieldUpdateOperationsInput | $Enums.GameOrientation
    developerName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}