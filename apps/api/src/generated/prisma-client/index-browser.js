
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PreferenceScalarFieldEnum = {
  accountAddress: 'accountAddress',
  appIcon: 'appIcon',
  includeLowScore: 'includeLowScore',
  createdAt: 'createdAt'
};

exports.Prisma.PremiumProfileScalarFieldEnum = {
  id: 'id',
  walletAddress: 'walletAddress',
  profileId: 'profileId',
  isActive: 'isActive',
  linkedAt: 'linkedAt',
  deactivatedAt: 'deactivatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  walletAddress: 'walletAddress',
  email: 'email',
  username: 'username',
  displayName: 'displayName',
  avatarUrl: 'avatarUrl',
  bio: 'bio',
  location: 'location',
  website: 'website',
  twitterHandle: 'twitterHandle',
  registrationDate: 'registrationDate',
  referrerAddress: 'referrerAddress',
  registrationTxHash: 'registrationTxHash',
  premiumUpgradedAt: 'premiumUpgradedAt',
  lastActiveAt: 'lastActiveAt',
  totalLogins: 'totalLogins',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status'
};

exports.Prisma.UserPreferencesScalarFieldEnum = {
  walletAddress: 'walletAddress',
  emailNotifications: 'emailNotifications',
  pushNotifications: 'pushNotifications',
  marketingEmails: 'marketingEmails',
  privacyLevel: 'privacyLevel',
  language: 'language',
  timezone: 'timezone',
  autoLinkProfile: 'autoLinkProfile',
  showPremiumBadge: 'showPremiumBadge',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserStatsScalarFieldEnum = {
  walletAddress: 'walletAddress',
  totalPosts: 'totalPosts',
  totalComments: 'totalComments',
  totalLikes: 'totalLikes',
  totalFollowers: 'totalFollowers',
  totalFollowing: 'totalFollowing',
  daysAsPremium: 'daysAsPremium',
  referralCount: 'referralCount',
  totalEarnings: 'totalEarnings',
  questsCompleted: 'questsCompleted',
  questsInProgress: 'questsInProgress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserRewardScalarFieldEnum = {
  id: 'id',
  walletAddress: 'walletAddress',
  type: 'type',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  sourceType: 'sourceType',
  sourceId: 'sourceId',
  sourceMetadata: 'sourceMetadata',
  txHash: 'txHash',
  claimedAt: 'claimedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserQuestScalarFieldEnum = {
  id: 'id',
  walletAddress: 'walletAddress',
  questId: 'questId',
  title: 'title',
  description: 'description',
  type: 'type',
  status: 'status',
  currentProgress: 'currentProgress',
  targetProgress: 'targetProgress',
  rewardAmount: 'rewardAmount',
  rewardCurrency: 'rewardCurrency',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserCoinScalarFieldEnum = {
  id: 'id',
  walletAddress: 'walletAddress',
  coinType: 'coinType',
  amount: 'amount',
  earnedAt: 'earnedAt',
  sourceType: 'sourceType',
  sourceId: 'sourceId',
  sourceMetadata: 'sourceMetadata',
  createdAt: 'createdAt'
};

exports.Prisma.UserNotificationScalarFieldEnum = {
  id: 'id',
  walletAddress: 'walletAddress',
  type: 'type',
  title: 'title',
  message: 'message',
  priority: 'priority',
  isRead: 'isRead',
  readAt: 'readAt',
  actionUrl: 'actionUrl',
  actionMetadata: 'actionMetadata',
  createdAt: 'createdAt'
};

exports.Prisma.AdminUserScalarFieldEnum = {
  id: 'id',
  walletAddress: 'walletAddress',
  email: 'email',
  username: 'username',
  displayName: 'displayName',
  role: 'role',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminPermissionScalarFieldEnum = {
  id: 'id',
  adminUserId: 'adminUserId',
  permission: 'permission',
  grantedAt: 'grantedAt',
  grantedBy: 'grantedBy'
};

exports.Prisma.AdminActionScalarFieldEnum = {
  id: 'id',
  adminUserId: 'adminUserId',
  actionType: 'actionType',
  targetWallet: 'targetWallet',
  targetProfileId: 'targetProfileId',
  reason: 'reason',
  metadata: 'metadata',
  status: 'status',
  result: 'result',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
};

exports.Prisma.AdminNoteScalarFieldEnum = {
  id: 'id',
  adminUserId: 'adminUserId',
  walletAddress: 'walletAddress',
  note: 'note',
  isPrivate: 'isPrivate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeatureScalarFieldEnum = {
  id: 'id',
  featureId: 'featureId',
  name: 'name',
  description: 'description',
  category: 'category',
  standardAccess: 'standardAccess',
  premiumAccess: 'premiumAccess',
  adminOverride: 'adminOverride',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeatureAccessScalarFieldEnum = {
  id: 'id',
  featureId: 'featureId',
  walletAddress: 'walletAddress',
  grantedBy: 'grantedBy',
  grantedAt: 'grantedAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive'
};

exports.Prisma.GameScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  instructions: 'instructions',
  packageUrl: 'packageUrl',
  entryFilePath: 'entryFilePath',
  iconUrl: 'iconUrl',
  coverImageUrl: 'coverImageUrl',
  width: 'width',
  height: 'height',
  orientation: 'orientation',
  developerName: 'developerName',
  version: 'version',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  color: 'color',
  description: 'description',
  icon: 'icon',
  metaDescription: 'metaDescription',
  slug: 'slug'
};

exports.Prisma.GameScreenshotScalarFieldEnum = {
  id: 'id',
  gameId: 'gameId',
  imageUrl: 'imageUrl',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.GameTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserStatus = exports.$Enums.UserStatus = {
  Standard: 'Standard',
  Premium: 'Premium',
  OnChainUnlinked: 'OnChainUnlinked'
};

exports.PrivacyLevel = exports.$Enums.PrivacyLevel = {
  Public: 'Public',
  Private: 'Private',
  FriendsOnly: 'FriendsOnly'
};

exports.RewardType = exports.$Enums.RewardType = {
  Referral: 'Referral',
  Quest: 'Quest',
  Activity: 'Activity',
  Bonus: 'Bonus',
  Welcome: 'Welcome'
};

exports.RewardStatus = exports.$Enums.RewardStatus = {
  Pending: 'Pending',
  Claimed: 'Claimed',
  Failed: 'Failed',
  Expired: 'Expired'
};

exports.RewardSourceType = exports.$Enums.RewardSourceType = {
  Registration: 'Registration',
  Referral: 'Referral',
  Quest: 'Quest',
  Activity: 'Activity',
  Admin: 'Admin'
};

exports.QuestType = exports.$Enums.QuestType = {
  Welcome: 'Welcome',
  Referral: 'Referral',
  Activity: 'Activity',
  Social: 'Social',
  Premium: 'Premium'
};

exports.QuestStatus = exports.$Enums.QuestStatus = {
  Active: 'Active',
  Completed: 'Completed',
  Expired: 'Expired',
  Failed: 'Failed'
};

exports.CoinType = exports.$Enums.CoinType = {
  Experience: 'Experience',
  Achievement: 'Achievement',
  Social: 'Social',
  Premium: 'Premium'
};

exports.CoinSourceType = exports.$Enums.CoinSourceType = {
  Registration: 'Registration',
  Referral: 'Referral',
  Quest: 'Quest',
  Activity: 'Activity',
  Social: 'Social'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  Welcome: 'Welcome',
  Premium: 'Premium',
  Quest: 'Quest',
  Reward: 'Reward',
  Referral: 'Referral',
  System: 'System',
  Marketing: 'Marketing'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  Low: 'Low',
  Normal: 'Normal',
  High: 'High',
  Urgent: 'Urgent'
};

exports.AdminRole = exports.$Enums.AdminRole = {
  SuperAdmin: 'SuperAdmin',
  SupportAgent: 'SupportAgent',
  Auditor: 'Auditor',
  Moderator: 'Moderator'
};

exports.AdminActionType = exports.$Enums.AdminActionType = {
  ForceUnlinkProfile: 'ForceUnlinkProfile',
  ForceLinkProfile: 'ForceLinkProfile',
  GrantPremium: 'GrantPremium',
  RevokePremium: 'RevokePremium',
  UpdateFeatureAccess: 'UpdateFeatureAccess',
  AddAdminNote: 'AddAdminNote',
  UpdateUserStatus: 'UpdateUserStatus',
  BlockUser: 'BlockUser',
  UnblockUser: 'UnblockUser'
};

exports.AdminActionStatus = exports.$Enums.AdminActionStatus = {
  Pending: 'Pending',
  Completed: 'Completed',
  Failed: 'Failed',
  Cancelled: 'Cancelled'
};

exports.GameOrientation = exports.$Enums.GameOrientation = {
  Landscape: 'Landscape',
  Portrait: 'Portrait',
  Both: 'Both'
};

exports.GameStatus = exports.$Enums.GameStatus = {
  Draft: 'Draft',
  Published: 'Published'
};

exports.Prisma.ModelName = {
  Preference: 'Preference',
  PremiumProfile: 'PremiumProfile',
  User: 'User',
  UserPreferences: 'UserPreferences',
  UserStats: 'UserStats',
  UserReward: 'UserReward',
  UserQuest: 'UserQuest',
  UserCoin: 'UserCoin',
  UserNotification: 'UserNotification',
  AdminUser: 'AdminUser',
  AdminPermission: 'AdminPermission',
  AdminAction: 'AdminAction',
  AdminNote: 'AdminNote',
  Feature: 'Feature',
  FeatureAccess: 'FeatureAccess',
  Game: 'Game',
  GameCategory: 'GameCategory',
  GameScreenshot: 'GameScreenshot',
  GameTag: 'GameTag'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
